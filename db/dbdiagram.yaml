Project LOOM {
  Note: '''
    # MetaLoom - Loom 1.0 Database model

  '''
}
//// -- LEVEL 1
//// -- Tables and References

// Creating tables

Table loom as LOOM {
  db_rev varchar
  last_used_timestamp timestamp [default: `now()`, not null]
}

Table users as U {
  uuid uuid [pk, increment]
  username varchar [unique, not null]
  firstname varchar
  lastname varchar
  email varchar
  enabled boolean [default: true, not null]
  meta varchar [note: "Custom meta properties to the element"]
  permissions permission_flag
  
  created timestamp [default: `now()`]
  creator_uuid uuid  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (username) [unique]
  }
}

Table user_tokens as AK {
  uuid uuid [pk, increment]
  user_uuid user_uuid [ref: > U.uuid]
  note varchar
  token varchar [not null]
  permissions permission_flag
  
  Indexes {
    (uuid) [pk]
    (user_uuid)
  }

}

Table roles as R {
  uuid uuid [pk, increment]
  name varchar [unique, not null]
  permissions permission_flag
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}

// Do we require custom object level permissions?
Table role_permissions as PERM {
  role_uuid uuid [ref: > R.uuid]
  element_uuid uuid [not null]
  
  create_perm boolean [default: false, not null]
  read_perm boolean [default: false, not null]
  delete_perm boolean [default: false, not null]
  update_perm boolean [default: false, not null]
  read_publish_perm boolean [default: false, not null]
  publish_perm boolean [default: false, not null]
  
  Indexes {
    (role_uuid, element_uuid) [pk]
  }
}

Table groups as G {
  uuid uuid [pk, increment]
  name varchar [unique, not null]
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}
 
Table roles_groups as RG {
   group_uuid uuid [ref: > G.uuid, not null]
   role_uuid uuid [ref: > R.uuid, not null]
   
  Indexes {
    (group_uuid, role_uuid) [pk]
  }
}

Table user_groups as UG {
   user_uuid uuid [ref: > U.uuid, not null]
   group_uuid uuid [ref: > G.uuid, not null]
   
  Indexes {
    (user_uuid, group_uuid) [pk]
  }
}

Table tags as T {
  uuid uuid [pk, increment]
  name varchar [not null]
  collection varchar [not null]
  meta varchar [note: "Custom meta properties to the element"]

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  Indexes {
    (uuid) [pk]
    (name, collection) [unique]
  }
}

Table tags_namespaces {
  tag_uuid uuid [ref: > T.uuid, not null]
  namespace_uuid uuid [ref: > N.uuid, not null]
  
  Indexes {
    (tag_uuid, namespace_uuid) [pk]
  }
}

Table tags_contents {
  tag_uuid uuid [ref: > T.uuid, not null]
  content_uuid uuid [ref: > C.uuid, not null]
  
  Indexes {
    (tag_uuid, content_uuid) [pk]
  }
}

Table assets as ASSET {
  uuid uuid [pk, increment]
  
  size long [not null]
  sha512sum varchar [not null]
  sha256sum varchar [not null]
  md5sum varchar [not null]
  meta varchar [note: "Custom meta properties to the element"]

  media_width  int [note: 'Only set for images']
  media_height int [note: 'Only set for images']

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
  }
}

Table assets_timeline as ASSET_TIMELINE {
  uuid uuid [pk, increment]
  asset_uuid uuid [ref: > ASSET.uuid]
  from int [not null]
  to int  [not null]
  description varchar
  tags varchar
  meta varchar
  thumbail varchar
  
  note: "This table contains asset timeline entries"
}

Table assets_timeline_tags as ASSET_TIMELINE_TAGS {
  assettimeline_uuid uuid [ref: > ASSET_TIMELINE.uuid]
  tag_uuid           uuid [ref: > T.uuid]
}

Table contents as C {
  uuid uuid [pk, increment]
  namespace_uuid uuid [ref: > N.uuid, not null]
  parent uuid [ref: > C.uuid, note: 'Reference to the parent content.']
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  model_uuid uuid [ref: > M.uuid, not null]
  
  Indexes {
    (uuid) [pk]
  }
}

Table fields_references as FR {
  source_uuid uuid [ref: > F.uuid, not null]
  target_uuid uuid [ref: > F.uuid, not null]
  field_name varchar [not null, note: 'Name of the field in which the content reference was listed.']

  Indexes {
    (source_uuid, target_uuid) [pk]
  }
  
  note: "This table is mainly used to lookup foreign references to contents"
}

Table contents_fields as CF {
  content_uuid uuid [ref: > C.uuid]
  fields_uuid uuid [ref: >  F.uuid, not null]

  webroot_path_info varchar [unique, note: 'prefixed with branch']
  content_type content_type [not null, note: "D or P for draft and published"]
  
  Indexes {
    (content_uuid, content_type) [note: 'Index to be used to lookup contents of contents']
    (content_type, webroot_path_info) [note: 'Index to be used to lookup webroot paths']
  }
  note: "Crosstable that tracks all fields for a content"
}


//Table webroot_nice_urls {
//  content_uuid uuid [ref: > C.uuid]  
//  content_type content_type [not null]
//  url varchar [not null]
//
//  Indexes {
//    (content_type, url) [name:'webroot_url', note: 'Index to be used to lookup nice urls']
//  }
//}

Enum content_type {
  D
  P
  I [note: 'Maybe implicitly used']
}

Enum permission_flag {
  // C
  CREATE_CONTENT
  READ_CONTENT
  UPDATE_CONTENT
  DELETE_CONTENT
  PUBLISH_CONTENT
  UNPUBLISH_CONTENT

  // N
  CREATE_NAMESPACE
  READ_NAMESPACE
  UPDATE_NAMESPACE
  DELETE_NAMESPACE
  
  // U
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  
  // G
  CREATE_GROUP
  READ_GROUP
  UPDATE_GROUP
  DELETE_GROUP
  
  // R
  CREATE_ROLE
  READ_ROLE
  UPDATE_ROLE
  DELETE_ROLE
  
  // T
  CREATE_TAG
  READ_TAG
  UPDATE_TAG
  DELETE_TAG
  
  // M
  CREATE_MODEL
  READ_MODEL
  UPDATE_MODEL
  DELETE_MODEL
  
  // A
  CREATE_ASSET
  READ_ASSET
  UPDATE_ASSET
  DELETE_ASSET
  UPLOAD_ASSET
  DOWNLOAD_ASSET
  
  // W
  CREATE_WEBHOOK
  READ_WEBHOOK
  UPDATE_WEBHOOK
  DELETE_WEBHOOK

  // E
  CREATE_EXTENSION
  READ_EXTENSION
  UPDATE_EXTENSION
  DELETE_EXTENSION

  // L
  CREATE_LANGUAGE
  READ_LANGUAGE
  UPDATE_LANGUAGE
  DELETE_LANGUAGE

  // ADMIN
  // TBD
  
}

Table fields as F {
  uuid uuid [pk, increment]
  content_uuid uuid [ref: > N.uuid, note: "Reference to the content that uses this fields record"]
  
  fields_json varchar [note: 'JSON which contains the actual fields content']
  // REF to language table?
  language_tag varchar
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  modelversion_uuid uuid [ref: > MV.uuid]
  version int
  
  Indexes {
    (uuid) [pk]
  }
  
  note: "Table which stores the actual fields content as JSON"
}

Table fields_assets as FA {
  field_uuid uuid [ref: > F.uuid]
  asset_uuid uuid [ref: > ASSET.uuid]
  field_name varchar
  
  Indexes {
    (field_uuid, asset_uuid) [pk]
  }
  
  note: "Crosstable which tracks the used assets in a fields record"

}

Table namespaces as N {
  uuid uuid [pk, increment]
  name varchar [unique, not null]
  root_conten_uuid uuid [ref: > C.uuid]
  meta varchar [note: "Custom meta properties to the element"]
  path_prefix varchar [note: "Prefix for webroot paths"]
  model_filters varchar [note: "filter for models that can be used in the namespace"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}

Table models as M {
  uuid uuid [pk, increment]
  name varchar [unique, not null]
  latest_version_uuid uuid [ref: > MV.uuid]

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
}

Table model_versions as MV {
  uuid uuid [pk, increment]
  model_uuid uuid [ref: > M.uuid]
  json varchar [not null]
  next_version_uuid uuid [ref: - MV.uuid]
  prev_version_uuid uuid [ref: - MV.uuid]
  
  Indexes {
    (uuid) [pk]
  }
}

Table languages as L {
  uuid uuid [pk, increment]
  native_name varchar [not null]
  tag varchar [unique, not null]
  meta varchar [note: "Custom meta properties to the element"]

  Indexes {
    (uuid) [pk]
    (tag)
  }
}

Table extensions as E {
  uuid uuid [pk, increment]
  url varchar [not null]
  // TODO enum
  kind  varchar [note: "Defines the type of the extension service"]
  status varchar
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  note: "Table which lists the registered extensions"
}

Table webhooks as W {
  uuid uuid [pk, increment]
  url varchar [not null]
  status varchar
  active boolean [default: true, not null]
  triggers varchar
  secretToken varchar [note: "Secret token which webhook services can use to authenticate the request."]
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  note: "Table which stores the registered webhooks"
}