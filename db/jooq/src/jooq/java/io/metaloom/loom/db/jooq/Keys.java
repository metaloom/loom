/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq;


import io.metaloom.loom.db.jooq.tables.AssetBinaries;
import io.metaloom.loom.db.jooq.tables.AssetTimeline;
import io.metaloom.loom.db.jooq.tables.AssetTimelineTag;
import io.metaloom.loom.db.jooq.tables.AssetUserMeta;
import io.metaloom.loom.db.jooq.tables.Assets;
import io.metaloom.loom.db.jooq.tables.ContentUserMeta;
import io.metaloom.loom.db.jooq.tables.Contents;
import io.metaloom.loom.db.jooq.tables.Extensions;
import io.metaloom.loom.db.jooq.tables.FieldAsset;
import io.metaloom.loom.db.jooq.tables.FieldContent;
import io.metaloom.loom.db.jooq.tables.FieldReference;
import io.metaloom.loom.db.jooq.tables.Fields;
import io.metaloom.loom.db.jooq.tables.Groups;
import io.metaloom.loom.db.jooq.tables.Languages;
import io.metaloom.loom.db.jooq.tables.ModelVersion;
import io.metaloom.loom.db.jooq.tables.Models;
import io.metaloom.loom.db.jooq.tables.Namespaces;
import io.metaloom.loom.db.jooq.tables.RoleGroup;
import io.metaloom.loom.db.jooq.tables.RolePermission;
import io.metaloom.loom.db.jooq.tables.Roles;
import io.metaloom.loom.db.jooq.tables.SchemaVersion;
import io.metaloom.loom.db.jooq.tables.TagAsset;
import io.metaloom.loom.db.jooq.tables.TagContent;
import io.metaloom.loom.db.jooq.tables.TagNamespace;
import io.metaloom.loom.db.jooq.tables.TagUserMeta;
import io.metaloom.loom.db.jooq.tables.Tags;
import io.metaloom.loom.db.jooq.tables.UserToken;
import io.metaloom.loom.db.jooq.tables.Users;
import io.metaloom.loom.db.jooq.tables.UsersGroups;
import io.metaloom.loom.db.jooq.tables.Webhooks;
import io.metaloom.loom.db.jooq.tables.records.AssetBinariesRecord;
import io.metaloom.loom.db.jooq.tables.records.AssetTimelineRecord;
import io.metaloom.loom.db.jooq.tables.records.AssetTimelineTagRecord;
import io.metaloom.loom.db.jooq.tables.records.AssetUserMetaRecord;
import io.metaloom.loom.db.jooq.tables.records.AssetsRecord;
import io.metaloom.loom.db.jooq.tables.records.ContentUserMetaRecord;
import io.metaloom.loom.db.jooq.tables.records.ContentsRecord;
import io.metaloom.loom.db.jooq.tables.records.ExtensionsRecord;
import io.metaloom.loom.db.jooq.tables.records.FieldAssetRecord;
import io.metaloom.loom.db.jooq.tables.records.FieldContentRecord;
import io.metaloom.loom.db.jooq.tables.records.FieldReferenceRecord;
import io.metaloom.loom.db.jooq.tables.records.FieldsRecord;
import io.metaloom.loom.db.jooq.tables.records.GroupsRecord;
import io.metaloom.loom.db.jooq.tables.records.LanguagesRecord;
import io.metaloom.loom.db.jooq.tables.records.ModelVersionRecord;
import io.metaloom.loom.db.jooq.tables.records.ModelsRecord;
import io.metaloom.loom.db.jooq.tables.records.NamespacesRecord;
import io.metaloom.loom.db.jooq.tables.records.RoleGroupRecord;
import io.metaloom.loom.db.jooq.tables.records.RolePermissionRecord;
import io.metaloom.loom.db.jooq.tables.records.RolesRecord;
import io.metaloom.loom.db.jooq.tables.records.SchemaVersionRecord;
import io.metaloom.loom.db.jooq.tables.records.TagAssetRecord;
import io.metaloom.loom.db.jooq.tables.records.TagContentRecord;
import io.metaloom.loom.db.jooq.tables.records.TagNamespaceRecord;
import io.metaloom.loom.db.jooq.tables.records.TagUserMetaRecord;
import io.metaloom.loom.db.jooq.tables.records.TagsRecord;
import io.metaloom.loom.db.jooq.tables.records.UserTokenRecord;
import io.metaloom.loom.db.jooq.tables.records.UsersGroupsRecord;
import io.metaloom.loom.db.jooq.tables.records.UsersRecord;
import io.metaloom.loom.db.jooq.tables.records.WebhooksRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AssetBinariesRecord> ASSET_BINARIES_PKEY = Internal.createUniqueKey(AssetBinaries.ASSET_BINARIES, DSL.name("asset_binaries_pkey"), new TableField[] { AssetBinaries.ASSET_BINARIES.UUID }, true);
    public static final UniqueKey<AssetTimelineRecord> ASSET_TIMELINE_PKEY = Internal.createUniqueKey(AssetTimeline.ASSET_TIMELINE, DSL.name("asset_timeline_pkey"), new TableField[] { AssetTimeline.ASSET_TIMELINE.UUID }, true);
    public static final UniqueKey<AssetUserMetaRecord> ASSET_USER_META_PKEY = Internal.createUniqueKey(AssetUserMeta.ASSET_USER_META, DSL.name("asset_user_meta_pkey"), new TableField[] { AssetUserMeta.ASSET_USER_META.ASSET_UUID, AssetUserMeta.ASSET_USER_META.USER_UUID }, true);
    public static final UniqueKey<AssetsRecord> ASSETS_PKEY = Internal.createUniqueKey(Assets.ASSETS, DSL.name("assets_pkey"), new TableField[] { Assets.ASSETS.UUID }, true);
    public static final UniqueKey<ContentUserMetaRecord> CONTENT_USER_META_PKEY = Internal.createUniqueKey(ContentUserMeta.CONTENT_USER_META, DSL.name("content_user_meta_pkey"), new TableField[] { ContentUserMeta.CONTENT_USER_META.CONTENT_UUID, ContentUserMeta.CONTENT_USER_META.USER_UUID }, true);
    public static final UniqueKey<ContentsRecord> CONTENTS_PKEY = Internal.createUniqueKey(Contents.CONTENTS, DSL.name("contents_pkey"), new TableField[] { Contents.CONTENTS.UUID }, true);
    public static final UniqueKey<ExtensionsRecord> EXTENSIONS_PKEY = Internal.createUniqueKey(Extensions.EXTENSIONS, DSL.name("extensions_pkey"), new TableField[] { Extensions.EXTENSIONS.UUID }, true);
    public static final UniqueKey<FieldAssetRecord> FIELD_ASSET_PKEY = Internal.createUniqueKey(FieldAsset.FIELD_ASSET, DSL.name("field_asset_pkey"), new TableField[] { FieldAsset.FIELD_ASSET.FIELD_UUID, FieldAsset.FIELD_ASSET.ASSET_UUID }, true);
    public static final UniqueKey<FieldContentRecord> FIELD_CONTENT_WEBROOT_PATH_INFO_KEY = Internal.createUniqueKey(FieldContent.FIELD_CONTENT, DSL.name("field_content_webroot_path_info_key"), new TableField[] { FieldContent.FIELD_CONTENT.WEBROOT_PATH_INFO }, true);
    public static final UniqueKey<FieldReferenceRecord> FIELD_REFERENCE_PKEY = Internal.createUniqueKey(FieldReference.FIELD_REFERENCE, DSL.name("field_reference_pkey"), new TableField[] { FieldReference.FIELD_REFERENCE.SOURCE_UUID, FieldReference.FIELD_REFERENCE.TARGET_UUID }, true);
    public static final UniqueKey<FieldsRecord> FIELDS_PKEY = Internal.createUniqueKey(Fields.FIELDS, DSL.name("fields_pkey"), new TableField[] { Fields.FIELDS.UUID }, true);
    public static final UniqueKey<GroupsRecord> GROUPS_NAME_KEY = Internal.createUniqueKey(Groups.GROUPS, DSL.name("groups_name_key"), new TableField[] { Groups.GROUPS.NAME }, true);
    public static final UniqueKey<GroupsRecord> GROUPS_PKEY = Internal.createUniqueKey(Groups.GROUPS, DSL.name("groups_pkey"), new TableField[] { Groups.GROUPS.UUID }, true);
    public static final UniqueKey<LanguagesRecord> LANGUAGES_PKEY = Internal.createUniqueKey(Languages.LANGUAGES, DSL.name("languages_pkey"), new TableField[] { Languages.LANGUAGES.UUID }, true);
    public static final UniqueKey<LanguagesRecord> LANGUAGES_TAGS_KEY = Internal.createUniqueKey(Languages.LANGUAGES, DSL.name("languages_tags_key"), new TableField[] { Languages.LANGUAGES.TAGS }, true);
    public static final UniqueKey<ModelVersionRecord> MODEL_VERSION_PKEY = Internal.createUniqueKey(ModelVersion.MODEL_VERSION, DSL.name("model_version_pkey"), new TableField[] { ModelVersion.MODEL_VERSION.UUID }, true);
    public static final UniqueKey<ModelsRecord> MODELS_NAME_KEY = Internal.createUniqueKey(Models.MODELS, DSL.name("models_name_key"), new TableField[] { Models.MODELS.NAME }, true);
    public static final UniqueKey<ModelsRecord> MODELS_PKEY = Internal.createUniqueKey(Models.MODELS, DSL.name("models_pkey"), new TableField[] { Models.MODELS.UUID }, true);
    public static final UniqueKey<NamespacesRecord> NAMESPACES_NAME_KEY = Internal.createUniqueKey(Namespaces.NAMESPACES, DSL.name("namespaces_name_key"), new TableField[] { Namespaces.NAMESPACES.NAME }, true);
    public static final UniqueKey<NamespacesRecord> NAMESPACES_PKEY = Internal.createUniqueKey(Namespaces.NAMESPACES, DSL.name("namespaces_pkey"), new TableField[] { Namespaces.NAMESPACES.UUID }, true);
    public static final UniqueKey<RoleGroupRecord> ROLE_GROUP_PKEY = Internal.createUniqueKey(RoleGroup.ROLE_GROUP, DSL.name("role_group_pkey"), new TableField[] { RoleGroup.ROLE_GROUP.GROUP_UUID, RoleGroup.ROLE_GROUP.ROLE_UUID }, true);
    public static final UniqueKey<RolePermissionRecord> ROLE_PERMISSION_PKEY = Internal.createUniqueKey(RolePermission.ROLE_PERMISSION, DSL.name("role_permission_pkey"), new TableField[] { RolePermission.ROLE_PERMISSION.ROLE_UUID, RolePermission.ROLE_PERMISSION.ELEMENT_UUID }, true);
    public static final UniqueKey<RolesRecord> ROLES_NAME_KEY = Internal.createUniqueKey(Roles.ROLES, DSL.name("roles_name_key"), new TableField[] { Roles.ROLES.NAME }, true);
    public static final UniqueKey<RolesRecord> ROLES_PKEY = Internal.createUniqueKey(Roles.ROLES, DSL.name("roles_pkey"), new TableField[] { Roles.ROLES.UUID }, true);
    public static final UniqueKey<SchemaVersionRecord> SCHEMA_VERSION_PK = Internal.createUniqueKey(SchemaVersion.SCHEMA_VERSION, DSL.name("schema_version_pk"), new TableField[] { SchemaVersion.SCHEMA_VERSION.VERSION }, true);
    public static final UniqueKey<TagAssetRecord> TAG_ASSET_PKEY = Internal.createUniqueKey(TagAsset.TAG_ASSET, DSL.name("tag_asset_pkey"), new TableField[] { TagAsset.TAG_ASSET.TAG_UUID, TagAsset.TAG_ASSET.ASSET_UUID }, true);
    public static final UniqueKey<TagContentRecord> TAG_CONTENT_PKEY = Internal.createUniqueKey(TagContent.TAG_CONTENT, DSL.name("tag_content_pkey"), new TableField[] { TagContent.TAG_CONTENT.TAG_UUID, TagContent.TAG_CONTENT.CONTENT_UUID }, true);
    public static final UniqueKey<TagNamespaceRecord> TAG_NAMESPACE_PKEY = Internal.createUniqueKey(TagNamespace.TAG_NAMESPACE, DSL.name("tag_namespace_pkey"), new TableField[] { TagNamespace.TAG_NAMESPACE.TAG_UUID, TagNamespace.TAG_NAMESPACE.NAMESPACE_UUID }, true);
    public static final UniqueKey<TagsRecord> TAGS_PKEY = Internal.createUniqueKey(Tags.TAGS, DSL.name("tags_pkey"), new TableField[] { Tags.TAGS.UUID }, true);
    public static final UniqueKey<UserTokenRecord> USER_TOKEN_PKEY = Internal.createUniqueKey(UserToken.USER_TOKEN, DSL.name("user_token_pkey"), new TableField[] { UserToken.USER_TOKEN.UUID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.UUID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);
    public static final UniqueKey<UsersGroupsRecord> USERS_GROUPS_PKEY = Internal.createUniqueKey(UsersGroups.USERS_GROUPS, DSL.name("users_groups_pkey"), new TableField[] { UsersGroups.USERS_GROUPS.USER_UUID, UsersGroups.USERS_GROUPS.GROUP_UUID }, true);
    public static final UniqueKey<WebhooksRecord> WEBHOOKS_PKEY = Internal.createUniqueKey(Webhooks.WEBHOOKS, DSL.name("webhooks_pkey"), new TableField[] { Webhooks.WEBHOOKS.UUID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AssetTimelineRecord, AssetsRecord> ASSET_TIMELINE__ASSET_TIMELINE_ASSET_UUID_FKEY = Internal.createForeignKey(AssetTimeline.ASSET_TIMELINE, DSL.name("asset_timeline_asset_uuid_fkey"), new TableField[] { AssetTimeline.ASSET_TIMELINE.ASSET_UUID }, Keys.ASSETS_PKEY, new TableField[] { Assets.ASSETS.UUID }, true);
    public static final ForeignKey<AssetTimelineTagRecord, AssetTimelineRecord> ASSET_TIMELINE_TAG__ASSET_TIMELINE_TAG_ASSETTIMELINE_UUID_FKEY = Internal.createForeignKey(AssetTimelineTag.ASSET_TIMELINE_TAG, DSL.name("asset_timeline_tag_assettimeline_uuid_fkey"), new TableField[] { AssetTimelineTag.ASSET_TIMELINE_TAG.ASSETTIMELINE_UUID }, Keys.ASSET_TIMELINE_PKEY, new TableField[] { AssetTimeline.ASSET_TIMELINE.UUID }, true);
    public static final ForeignKey<AssetTimelineTagRecord, TagsRecord> ASSET_TIMELINE_TAG__ASSET_TIMELINE_TAG_TAG_UUID_FKEY = Internal.createForeignKey(AssetTimelineTag.ASSET_TIMELINE_TAG, DSL.name("asset_timeline_tag_tag_uuid_fkey"), new TableField[] { AssetTimelineTag.ASSET_TIMELINE_TAG.TAG_UUID }, Keys.TAGS_PKEY, new TableField[] { Tags.TAGS.UUID }, true);
    public static final ForeignKey<AssetUserMetaRecord, AssetsRecord> ASSET_USER_META__ASSET_USER_META_ASSET_UUID_FKEY = Internal.createForeignKey(AssetUserMeta.ASSET_USER_META, DSL.name("asset_user_meta_asset_uuid_fkey"), new TableField[] { AssetUserMeta.ASSET_USER_META.ASSET_UUID }, Keys.ASSETS_PKEY, new TableField[] { Assets.ASSETS.UUID }, true);
    public static final ForeignKey<AssetUserMetaRecord, UsersRecord> ASSET_USER_META__ASSET_USER_META_USER_UUID_FKEY = Internal.createForeignKey(AssetUserMeta.ASSET_USER_META, DSL.name("asset_user_meta_user_uuid_fkey"), new TableField[] { AssetUserMeta.ASSET_USER_META.USER_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<AssetsRecord, AssetBinariesRecord> ASSETS__ASSETS_ASSET_BINARIES_UUID_FKEY = Internal.createForeignKey(Assets.ASSETS, DSL.name("assets_asset_binaries_uuid_fkey"), new TableField[] { Assets.ASSETS.ASSET_BINARIES_UUID }, Keys.ASSET_BINARIES_PKEY, new TableField[] { AssetBinaries.ASSET_BINARIES.UUID }, true);
    public static final ForeignKey<AssetsRecord, UsersRecord> ASSETS__ASSETS_CREATOR_UUID_FKEY = Internal.createForeignKey(Assets.ASSETS, DSL.name("assets_creator_uuid_fkey"), new TableField[] { Assets.ASSETS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<AssetsRecord, UsersRecord> ASSETS__ASSETS_EDITOR_UUID_FKEY = Internal.createForeignKey(Assets.ASSETS, DSL.name("assets_editor_uuid_fkey"), new TableField[] { Assets.ASSETS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<AssetsRecord, NamespacesRecord> ASSETS__ASSETS_NAMESPACE_UUID_FKEY = Internal.createForeignKey(Assets.ASSETS, DSL.name("assets_namespace_uuid_fkey"), new TableField[] { Assets.ASSETS.NAMESPACE_UUID }, Keys.NAMESPACES_PKEY, new TableField[] { Namespaces.NAMESPACES.UUID }, true);
    public static final ForeignKey<ContentUserMetaRecord, TagsRecord> CONTENT_USER_META__CONTENT_USER_META_CONTENT_UUID_FKEY = Internal.createForeignKey(ContentUserMeta.CONTENT_USER_META, DSL.name("content_user_meta_content_uuid_fkey"), new TableField[] { ContentUserMeta.CONTENT_USER_META.CONTENT_UUID }, Keys.TAGS_PKEY, new TableField[] { Tags.TAGS.UUID }, true);
    public static final ForeignKey<ContentUserMetaRecord, UsersRecord> CONTENT_USER_META__CONTENT_USER_META_USER_UUID_FKEY = Internal.createForeignKey(ContentUserMeta.CONTENT_USER_META, DSL.name("content_user_meta_user_uuid_fkey"), new TableField[] { ContentUserMeta.CONTENT_USER_META.USER_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<ContentsRecord, UsersRecord> CONTENTS__CONTENTS_CREATOR_UUID_FKEY = Internal.createForeignKey(Contents.CONTENTS, DSL.name("contents_creator_uuid_fkey"), new TableField[] { Contents.CONTENTS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<ContentsRecord, ModelsRecord> CONTENTS__CONTENTS_MODEL_UUID_FKEY = Internal.createForeignKey(Contents.CONTENTS, DSL.name("contents_model_uuid_fkey"), new TableField[] { Contents.CONTENTS.MODEL_UUID }, Keys.MODELS_PKEY, new TableField[] { Models.MODELS.UUID }, true);
    public static final ForeignKey<ContentsRecord, NamespacesRecord> CONTENTS__CONTENTS_NAMESPACE_UUID_FKEY = Internal.createForeignKey(Contents.CONTENTS, DSL.name("contents_namespace_uuid_fkey"), new TableField[] { Contents.CONTENTS.NAMESPACE_UUID }, Keys.NAMESPACES_PKEY, new TableField[] { Namespaces.NAMESPACES.UUID }, true);
    public static final ForeignKey<ContentsRecord, ContentsRecord> CONTENTS__CONTENTS_PARENT_FKEY = Internal.createForeignKey(Contents.CONTENTS, DSL.name("contents_parent_fkey"), new TableField[] { Contents.CONTENTS.PARENT }, Keys.CONTENTS_PKEY, new TableField[] { Contents.CONTENTS.UUID }, true);
    public static final ForeignKey<ExtensionsRecord, UsersRecord> EXTENSIONS__EXTENSIONS_CREATOR_UUID_FKEY = Internal.createForeignKey(Extensions.EXTENSIONS, DSL.name("extensions_creator_uuid_fkey"), new TableField[] { Extensions.EXTENSIONS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<ExtensionsRecord, UsersRecord> EXTENSIONS__EXTENSIONS_EDITOR_UUID_FKEY = Internal.createForeignKey(Extensions.EXTENSIONS, DSL.name("extensions_editor_uuid_fkey"), new TableField[] { Extensions.EXTENSIONS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<FieldAssetRecord, AssetsRecord> FIELD_ASSET__FIELD_ASSET_ASSET_UUID_FKEY = Internal.createForeignKey(FieldAsset.FIELD_ASSET, DSL.name("field_asset_asset_uuid_fkey"), new TableField[] { FieldAsset.FIELD_ASSET.ASSET_UUID }, Keys.ASSETS_PKEY, new TableField[] { Assets.ASSETS.UUID }, true);
    public static final ForeignKey<FieldAssetRecord, FieldsRecord> FIELD_ASSET__FIELD_ASSET_FIELD_UUID_FKEY = Internal.createForeignKey(FieldAsset.FIELD_ASSET, DSL.name("field_asset_field_uuid_fkey"), new TableField[] { FieldAsset.FIELD_ASSET.FIELD_UUID }, Keys.FIELDS_PKEY, new TableField[] { Fields.FIELDS.UUID }, true);
    public static final ForeignKey<FieldContentRecord, ContentsRecord> FIELD_CONTENT__FIELD_CONTENT_CONTENT_UUID_FKEY = Internal.createForeignKey(FieldContent.FIELD_CONTENT, DSL.name("field_content_content_uuid_fkey"), new TableField[] { FieldContent.FIELD_CONTENT.CONTENT_UUID }, Keys.CONTENTS_PKEY, new TableField[] { Contents.CONTENTS.UUID }, true);
    public static final ForeignKey<FieldContentRecord, FieldsRecord> FIELD_CONTENT__FIELD_CONTENT_FIELDS_UUID_FKEY = Internal.createForeignKey(FieldContent.FIELD_CONTENT, DSL.name("field_content_fields_uuid_fkey"), new TableField[] { FieldContent.FIELD_CONTENT.FIELDS_UUID }, Keys.FIELDS_PKEY, new TableField[] { Fields.FIELDS.UUID }, true);
    public static final ForeignKey<FieldReferenceRecord, FieldsRecord> FIELD_REFERENCE__FIELD_REFERENCE_SOURCE_UUID_FKEY = Internal.createForeignKey(FieldReference.FIELD_REFERENCE, DSL.name("field_reference_source_uuid_fkey"), new TableField[] { FieldReference.FIELD_REFERENCE.SOURCE_UUID }, Keys.FIELDS_PKEY, new TableField[] { Fields.FIELDS.UUID }, true);
    public static final ForeignKey<FieldReferenceRecord, FieldsRecord> FIELD_REFERENCE__FIELD_REFERENCE_TARGET_UUID_FKEY = Internal.createForeignKey(FieldReference.FIELD_REFERENCE, DSL.name("field_reference_target_uuid_fkey"), new TableField[] { FieldReference.FIELD_REFERENCE.TARGET_UUID }, Keys.FIELDS_PKEY, new TableField[] { Fields.FIELDS.UUID }, true);
    public static final ForeignKey<FieldsRecord, NamespacesRecord> FIELDS__FIELDS_CONTENT_UUID_FKEY = Internal.createForeignKey(Fields.FIELDS, DSL.name("fields_content_uuid_fkey"), new TableField[] { Fields.FIELDS.CONTENT_UUID }, Keys.NAMESPACES_PKEY, new TableField[] { Namespaces.NAMESPACES.UUID }, true);
    public static final ForeignKey<FieldsRecord, UsersRecord> FIELDS__FIELDS_EDITOR_UUID_FKEY = Internal.createForeignKey(Fields.FIELDS, DSL.name("fields_editor_uuid_fkey"), new TableField[] { Fields.FIELDS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<FieldsRecord, LanguagesRecord> FIELDS__FIELDS_LANGUAGE_UUID_FKEY = Internal.createForeignKey(Fields.FIELDS, DSL.name("fields_language_uuid_fkey"), new TableField[] { Fields.FIELDS.LANGUAGE_UUID }, Keys.LANGUAGES_PKEY, new TableField[] { Languages.LANGUAGES.UUID }, true);
    public static final ForeignKey<FieldsRecord, ModelVersionRecord> FIELDS__FIELDS_MODELVERSION_UUID_FKEY = Internal.createForeignKey(Fields.FIELDS, DSL.name("fields_modelversion_uuid_fkey"), new TableField[] { Fields.FIELDS.MODELVERSION_UUID }, Keys.MODEL_VERSION_PKEY, new TableField[] { ModelVersion.MODEL_VERSION.UUID }, true);
    public static final ForeignKey<GroupsRecord, UsersRecord> GROUPS__GROUPS_CREATOR_UUID_FKEY = Internal.createForeignKey(Groups.GROUPS, DSL.name("groups_creator_uuid_fkey"), new TableField[] { Groups.GROUPS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<GroupsRecord, UsersRecord> GROUPS__GROUPS_EDITOR_UUID_FKEY = Internal.createForeignKey(Groups.GROUPS, DSL.name("groups_editor_uuid_fkey"), new TableField[] { Groups.GROUPS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<ModelVersionRecord, ModelsRecord> MODEL_VERSION__MODEL_VERSION_MODEL_UUID_FKEY = Internal.createForeignKey(ModelVersion.MODEL_VERSION, DSL.name("model_version_model_uuid_fkey"), new TableField[] { ModelVersion.MODEL_VERSION.MODEL_UUID }, Keys.MODELS_PKEY, new TableField[] { Models.MODELS.UUID }, true);
    public static final ForeignKey<ModelVersionRecord, ModelVersionRecord> MODEL_VERSION__MODEL_VERSION_NEXT_VERSION_UUID_FKEY = Internal.createForeignKey(ModelVersion.MODEL_VERSION, DSL.name("model_version_next_version_uuid_fkey"), new TableField[] { ModelVersion.MODEL_VERSION.NEXT_VERSION_UUID }, Keys.MODEL_VERSION_PKEY, new TableField[] { ModelVersion.MODEL_VERSION.UUID }, true);
    public static final ForeignKey<ModelVersionRecord, ModelVersionRecord> MODEL_VERSION__MODEL_VERSION_PREV_VERSION_UUID_FKEY = Internal.createForeignKey(ModelVersion.MODEL_VERSION, DSL.name("model_version_prev_version_uuid_fkey"), new TableField[] { ModelVersion.MODEL_VERSION.PREV_VERSION_UUID }, Keys.MODEL_VERSION_PKEY, new TableField[] { ModelVersion.MODEL_VERSION.UUID }, true);
    public static final ForeignKey<ModelsRecord, UsersRecord> MODELS__MODELS_CREATOR_UUID_FKEY = Internal.createForeignKey(Models.MODELS, DSL.name("models_creator_uuid_fkey"), new TableField[] { Models.MODELS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<ModelsRecord, UsersRecord> MODELS__MODELS_EDITOR_UUID_FKEY = Internal.createForeignKey(Models.MODELS, DSL.name("models_editor_uuid_fkey"), new TableField[] { Models.MODELS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<ModelsRecord, ModelVersionRecord> MODELS__MODELS_LATEST_VERSION_UUID_FKEY = Internal.createForeignKey(Models.MODELS, DSL.name("models_latest_version_uuid_fkey"), new TableField[] { Models.MODELS.LATEST_VERSION_UUID }, Keys.MODEL_VERSION_PKEY, new TableField[] { ModelVersion.MODEL_VERSION.UUID }, true);
    public static final ForeignKey<NamespacesRecord, UsersRecord> NAMESPACES__NAMESPACES_CREATOR_UUID_FKEY = Internal.createForeignKey(Namespaces.NAMESPACES, DSL.name("namespaces_creator_uuid_fkey"), new TableField[] { Namespaces.NAMESPACES.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<NamespacesRecord, UsersRecord> NAMESPACES__NAMESPACES_EDITOR_UUID_FKEY = Internal.createForeignKey(Namespaces.NAMESPACES, DSL.name("namespaces_editor_uuid_fkey"), new TableField[] { Namespaces.NAMESPACES.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<NamespacesRecord, ContentsRecord> NAMESPACES__NAMESPACES_ROOT_CONTENT_UUID_FKEY = Internal.createForeignKey(Namespaces.NAMESPACES, DSL.name("namespaces_root_content_uuid_fkey"), new TableField[] { Namespaces.NAMESPACES.ROOT_CONTENT_UUID }, Keys.CONTENTS_PKEY, new TableField[] { Contents.CONTENTS.UUID }, true);
    public static final ForeignKey<RoleGroupRecord, GroupsRecord> ROLE_GROUP__ROLE_GROUP_GROUP_UUID_FKEY = Internal.createForeignKey(RoleGroup.ROLE_GROUP, DSL.name("role_group_group_uuid_fkey"), new TableField[] { RoleGroup.ROLE_GROUP.GROUP_UUID }, Keys.GROUPS_PKEY, new TableField[] { Groups.GROUPS.UUID }, true);
    public static final ForeignKey<RoleGroupRecord, RolesRecord> ROLE_GROUP__ROLE_GROUP_ROLE_UUID_FKEY = Internal.createForeignKey(RoleGroup.ROLE_GROUP, DSL.name("role_group_role_uuid_fkey"), new TableField[] { RoleGroup.ROLE_GROUP.ROLE_UUID }, Keys.ROLES_PKEY, new TableField[] { Roles.ROLES.UUID }, true);
    public static final ForeignKey<RolePermissionRecord, RolesRecord> ROLE_PERMISSION__ROLE_PERMISSION_ROLE_UUID_FKEY = Internal.createForeignKey(RolePermission.ROLE_PERMISSION, DSL.name("role_permission_role_uuid_fkey"), new TableField[] { RolePermission.ROLE_PERMISSION.ROLE_UUID }, Keys.ROLES_PKEY, new TableField[] { Roles.ROLES.UUID }, true);
    public static final ForeignKey<RolesRecord, UsersRecord> ROLES__ROLES_CREATOR_UUID_FKEY = Internal.createForeignKey(Roles.ROLES, DSL.name("roles_creator_uuid_fkey"), new TableField[] { Roles.ROLES.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<RolesRecord, UsersRecord> ROLES__ROLES_EDITOR_UUID_FKEY = Internal.createForeignKey(Roles.ROLES, DSL.name("roles_editor_uuid_fkey"), new TableField[] { Roles.ROLES.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<TagContentRecord, ContentsRecord> TAG_CONTENT__TAG_CONTENT_CONTENT_UUID_FKEY = Internal.createForeignKey(TagContent.TAG_CONTENT, DSL.name("tag_content_content_uuid_fkey"), new TableField[] { TagContent.TAG_CONTENT.CONTENT_UUID }, Keys.CONTENTS_PKEY, new TableField[] { Contents.CONTENTS.UUID }, true);
    public static final ForeignKey<TagContentRecord, TagsRecord> TAG_CONTENT__TAG_CONTENT_TAG_UUID_FKEY = Internal.createForeignKey(TagContent.TAG_CONTENT, DSL.name("tag_content_tag_uuid_fkey"), new TableField[] { TagContent.TAG_CONTENT.TAG_UUID }, Keys.TAGS_PKEY, new TableField[] { Tags.TAGS.UUID }, true);
    public static final ForeignKey<TagNamespaceRecord, NamespacesRecord> TAG_NAMESPACE__TAG_NAMESPACE_NAMESPACE_UUID_FKEY = Internal.createForeignKey(TagNamespace.TAG_NAMESPACE, DSL.name("tag_namespace_namespace_uuid_fkey"), new TableField[] { TagNamespace.TAG_NAMESPACE.NAMESPACE_UUID }, Keys.NAMESPACES_PKEY, new TableField[] { Namespaces.NAMESPACES.UUID }, true);
    public static final ForeignKey<TagNamespaceRecord, TagsRecord> TAG_NAMESPACE__TAG_NAMESPACE_TAG_UUID_FKEY = Internal.createForeignKey(TagNamespace.TAG_NAMESPACE, DSL.name("tag_namespace_tag_uuid_fkey"), new TableField[] { TagNamespace.TAG_NAMESPACE.TAG_UUID }, Keys.TAGS_PKEY, new TableField[] { Tags.TAGS.UUID }, true);
    public static final ForeignKey<TagUserMetaRecord, TagsRecord> TAG_USER_META__TAG_USER_META_TAG_UUID_FKEY = Internal.createForeignKey(TagUserMeta.TAG_USER_META, DSL.name("tag_user_meta_tag_uuid_fkey"), new TableField[] { TagUserMeta.TAG_USER_META.TAG_UUID }, Keys.TAGS_PKEY, new TableField[] { Tags.TAGS.UUID }, true);
    public static final ForeignKey<TagUserMetaRecord, UsersRecord> TAG_USER_META__TAG_USER_META_USER_UUID_FKEY = Internal.createForeignKey(TagUserMeta.TAG_USER_META, DSL.name("tag_user_meta_user_uuid_fkey"), new TableField[] { TagUserMeta.TAG_USER_META.USER_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<TagsRecord, UsersRecord> TAGS__TAGS_CREATOR_UUID_FKEY = Internal.createForeignKey(Tags.TAGS, DSL.name("tags_creator_uuid_fkey"), new TableField[] { Tags.TAGS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<TagsRecord, UsersRecord> TAGS__TAGS_EDITOR_UUID_FKEY = Internal.createForeignKey(Tags.TAGS, DSL.name("tags_editor_uuid_fkey"), new TableField[] { Tags.TAGS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<TagsRecord, NamespacesRecord> TAGS__TAGS_NAMESPACE_UUID_FKEY = Internal.createForeignKey(Tags.TAGS, DSL.name("tags_namespace_uuid_fkey"), new TableField[] { Tags.TAGS.NAMESPACE_UUID }, Keys.NAMESPACES_PKEY, new TableField[] { Namespaces.NAMESPACES.UUID }, true);
    public static final ForeignKey<UserTokenRecord, UsersRecord> USER_TOKEN__USER_TOKEN_USER_UUID_FKEY = Internal.createForeignKey(UserToken.USER_TOKEN, DSL.name("user_token_user_uuid_fkey"), new TableField[] { UserToken.USER_TOKEN.USER_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<UsersRecord, UsersRecord> USERS__USERS_CREATOR_UUID_FKEY = Internal.createForeignKey(Users.USERS, DSL.name("users_creator_uuid_fkey"), new TableField[] { Users.USERS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<UsersRecord, UsersRecord> USERS__USERS_EDITOR_UUID_FKEY = Internal.createForeignKey(Users.USERS, DSL.name("users_editor_uuid_fkey"), new TableField[] { Users.USERS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<UsersGroupsRecord, GroupsRecord> USERS_GROUPS__USERS_GROUPS_GROUP_UUID_FKEY = Internal.createForeignKey(UsersGroups.USERS_GROUPS, DSL.name("users_groups_group_uuid_fkey"), new TableField[] { UsersGroups.USERS_GROUPS.GROUP_UUID }, Keys.GROUPS_PKEY, new TableField[] { Groups.GROUPS.UUID }, true);
    public static final ForeignKey<UsersGroupsRecord, UsersRecord> USERS_GROUPS__USERS_GROUPS_USER_UUID_FKEY = Internal.createForeignKey(UsersGroups.USERS_GROUPS, DSL.name("users_groups_user_uuid_fkey"), new TableField[] { UsersGroups.USERS_GROUPS.USER_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<WebhooksRecord, UsersRecord> WEBHOOKS__WEBHOOKS_CREATOR_UUID_FKEY = Internal.createForeignKey(Webhooks.WEBHOOKS, DSL.name("webhooks_creator_uuid_fkey"), new TableField[] { Webhooks.WEBHOOKS.CREATOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
    public static final ForeignKey<WebhooksRecord, UsersRecord> WEBHOOKS__WEBHOOKS_EDITOR_UUID_FKEY = Internal.createForeignKey(Webhooks.WEBHOOKS, DSL.name("webhooks_editor_uuid_fkey"), new TableField[] { Webhooks.WEBHOOKS.EDITOR_UUID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.UUID }, true);
}
