/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.AssetsRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Assets extends TableImpl<AssetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.assets</code>
     */
    public static final Assets ASSETS = new Assets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetsRecord> getRecordType() {
        return AssetsRecord.class;
    }

    /**
     * The column <code>public.assets.uuid</code>.
     */
    public final TableField<AssetsRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.assets.asset_binaries_uuid</code>.
     */
    public final TableField<AssetsRecord, java.util.UUID> ASSET_BINARIES_UUID = createField(DSL.name("asset_binaries_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.assets.namespace_uuid</code>.
     */
    public final TableField<AssetsRecord, java.util.UUID> NAMESPACE_UUID = createField(DSL.name("namespace_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.assets.filename</code>.
     */
    public final TableField<AssetsRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.assets.localPath</code>. Local path to the asset
     * (when using the local path feature)
     */
    public final TableField<AssetsRecord, String> LOCALPATH = createField(DSL.name("localPath"), SQLDataType.VARCHAR, this, "Local path to the asset (when using the local path feature)");

    /**
     * The column <code>public.assets.meta</code>. Custom meta properties to the
     * element
     */
    public final TableField<AssetsRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    /**
     * The column <code>public.assets.rating</code>. Absolute or computed asset
     * rating
     */
    public final TableField<AssetsRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER, this, "Absolute or computed asset rating");

    /**
     * The column <code>public.assets.dominantColor</code>.
     */
    public final TableField<AssetsRecord, String> DOMINANTCOLOR = createField(DSL.name("dominantColor"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assets.mimeType</code>.
     */
    public final TableField<AssetsRecord, String> MIMETYPE = createField(DSL.name("mimeType"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assets.gps_lon</code>.
     */
    public final TableField<AssetsRecord, BigDecimal> GPS_LON = createField(DSL.name("gps_lon"), SQLDataType.NUMERIC(9, 6), this, "");

    /**
     * The column <code>public.assets.gps_lat</code>.
     */
    public final TableField<AssetsRecord, BigDecimal> GPS_LAT = createField(DSL.name("gps_lat"), SQLDataType.NUMERIC(8, 6), this, "");

    /**
     * The column <code>public.assets.s3_bucket_name</code>.
     */
    public final TableField<AssetsRecord, String> S3_BUCKET_NAME = createField(DSL.name("s3_bucket_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assets.s3_object_path</code>.
     */
    public final TableField<AssetsRecord, String> S3_OBJECT_PATH = createField(DSL.name("s3_object_path"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.assets.created</code>.
     */
    public final TableField<AssetsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.assets.creator_uuid</code>.
     */
    public final TableField<AssetsRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.assets.edited</code>.
     */
    public final TableField<AssetsRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.assets.editor_uuid</code>.
     */
    public final TableField<AssetsRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Assets(Name alias, Table<AssetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Assets(Name alias, Table<AssetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.assets</code> table reference
     */
    public Assets(String alias) {
        this(DSL.name(alias), ASSETS);
    }

    /**
     * Create an aliased <code>public.assets</code> table reference
     */
    public Assets(Name alias) {
        this(alias, ASSETS);
    }

    /**
     * Create a <code>public.assets</code> table reference
     */
    public Assets() {
        this(DSL.name("assets"), null);
    }

    public <O extends Record> Assets(Table<O> child, ForeignKey<O, AssetsRecord> key) {
        super(child, key, ASSETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ASSETS_UUID_NAMESPACE_UUID_IDX);
    }

    @Override
    public UniqueKey<AssetsRecord> getPrimaryKey() {
        return Keys.ASSETS_PKEY;
    }

    @Override
    public List<ForeignKey<AssetsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASSETS__ASSETS_ASSET_BINARIES_UUID_FKEY, Keys.ASSETS__ASSETS_NAMESPACE_UUID_FKEY, Keys.ASSETS__ASSETS_CREATOR_UUID_FKEY, Keys.ASSETS__ASSETS_EDITOR_UUID_FKEY);
    }

    private transient AssetBinaries _assetBinaries;
    private transient Namespaces _namespaces;
    private transient Users _assetsCreatorUuidFkey;
    private transient Users _assetsEditorUuidFkey;

    public AssetBinaries assetBinaries() {
        if (_assetBinaries == null)
            _assetBinaries = new AssetBinaries(this, Keys.ASSETS__ASSETS_ASSET_BINARIES_UUID_FKEY);

        return _assetBinaries;
    }

    public Namespaces namespaces() {
        if (_namespaces == null)
            _namespaces = new Namespaces(this, Keys.ASSETS__ASSETS_NAMESPACE_UUID_FKEY);

        return _namespaces;
    }

    public Users assetsCreatorUuidFkey() {
        if (_assetsCreatorUuidFkey == null)
            _assetsCreatorUuidFkey = new Users(this, Keys.ASSETS__ASSETS_CREATOR_UUID_FKEY);

        return _assetsCreatorUuidFkey;
    }

    public Users assetsEditorUuidFkey() {
        if (_assetsEditorUuidFkey == null)
            _assetsEditorUuidFkey = new Users(this, Keys.ASSETS__ASSETS_EDITOR_UUID_FKEY);

        return _assetsEditorUuidFkey;
    }

    @Override
    public Assets as(String alias) {
        return new Assets(DSL.name(alias), this);
    }

    @Override
    public Assets as(Name alias) {
        return new Assets(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Assets rename(String name) {
        return new Assets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Assets rename(Name name) {
        return new Assets(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<java.util.UUID, java.util.UUID, java.util.UUID, String, String, JSONB, Integer, String, String, BigDecimal, BigDecimal, String, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
