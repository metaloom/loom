/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.ContentUserMetaRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContentUserMeta extends TableImpl<ContentUserMetaRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.content_user_meta</code>
     */
    public static final ContentUserMeta CONTENT_USER_META = new ContentUserMeta();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentUserMetaRecord> getRecordType() {
        return ContentUserMetaRecord.class;
    }

    /**
     * The column <code>public.content_user_meta.content_uuid</code>.
     */
    public final TableField<ContentUserMetaRecord, UUID> CONTENT_UUID = createField(DSL.name("content_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.content_user_meta.user_uuid</code>.
     */
    public final TableField<ContentUserMetaRecord, UUID> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.content_user_meta.rating</code>. Rating of the content by the user
     */
    public final TableField<ContentUserMetaRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER.nullable(false), this, "Rating of the content by the user");

    /**
     * The column <code>public.content_user_meta.meta</code>. Custom meta properties
     */
    public final TableField<ContentUserMetaRecord, String> META = createField(DSL.name("meta"), SQLDataType.VARCHAR, this, "Custom meta properties");

    private ContentUserMeta(Name alias, Table<ContentUserMetaRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContentUserMeta(Name alias, Table<ContentUserMetaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.content_user_meta</code> table reference
     */
    public ContentUserMeta(String alias) {
        this(DSL.name(alias), CONTENT_USER_META);
    }

    /**
     * Create an aliased <code>public.content_user_meta</code> table reference
     */
    public ContentUserMeta(Name alias) {
        this(alias, CONTENT_USER_META);
    }

    /**
     * Create a <code>public.content_user_meta</code> table reference
     */
    public ContentUserMeta() {
        this(DSL.name("content_user_meta"), null);
    }

    public <O extends Record> ContentUserMeta(Table<O> child, ForeignKey<O, ContentUserMetaRecord> key) {
        super(child, key, CONTENT_USER_META);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContentUserMetaRecord> getPrimaryKey() {
        return Keys.CONTENT_USER_META_PKEY;
    }

    @Override
    public List<UniqueKey<ContentUserMetaRecord>> getKeys() {
        return Arrays.<UniqueKey<ContentUserMetaRecord>>asList(Keys.CONTENT_USER_META_PKEY);
    }

    @Override
    public List<ForeignKey<ContentUserMetaRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ContentUserMetaRecord, ?>>asList(Keys.CONTENT_USER_META__CONTENT_USER_META_CONTENT_UUID_FKEY, Keys.CONTENT_USER_META__CONTENT_USER_META_USER_UUID_FKEY);
    }

    private transient Tag _tag;
    private transient User _user;

    public Tag tag() {
        if (_tag == null)
            _tag = new Tag(this, Keys.CONTENT_USER_META__CONTENT_USER_META_CONTENT_UUID_FKEY);

        return _tag;
    }

    public User user() {
        if (_user == null)
            _user = new User(this, Keys.CONTENT_USER_META__CONTENT_USER_META_USER_UUID_FKEY);

        return _user;
    }

    @Override
    public ContentUserMeta as(String alias) {
        return new ContentUserMeta(DSL.name(alias), this);
    }

    @Override
    public ContentUserMeta as(Name alias) {
        return new ContentUserMeta(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentUserMeta rename(String name) {
        return new ContentUserMeta(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ContentUserMeta rename(Name name) {
        return new ContentUserMeta(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
