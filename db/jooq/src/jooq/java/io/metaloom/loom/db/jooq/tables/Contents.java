/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.ContentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contents extends TableImpl<ContentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.contents</code>
     */
    public static final Contents CONTENTS = new Contents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContentsRecord> getRecordType() {
        return ContentsRecord.class;
    }

    /**
     * The column <code>public.contents.uuid</code>.
     */
    public final TableField<ContentsRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.contents.namespace_uuid</code>.
     */
    public final TableField<ContentsRecord, java.util.UUID> NAMESPACE_UUID = createField(DSL.name("namespace_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.contents.parent</code>. Reference to the parent
     * content.
     */
    public final TableField<ContentsRecord, java.util.UUID> PARENT = createField(DSL.name("parent"), SQLDataType.UUID, this, "Reference to the parent content.");

    /**
     * The column <code>public.contents.created</code>.
     */
    public final TableField<ContentsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.contents.creator_uuid</code>.
     */
    public final TableField<ContentsRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.contents.edited</code>.
     */
    public final TableField<ContentsRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.contents.editor_uuid</code>.
     */
    public final TableField<ContentsRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.contents.meta</code>.
     */
    public final TableField<ContentsRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.contents.model_uuid</code>.
     */
    public final TableField<ContentsRecord, java.util.UUID> MODEL_UUID = createField(DSL.name("model_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private Contents(Name alias, Table<ContentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contents(Name alias, Table<ContentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.contents</code> table reference
     */
    public Contents(String alias) {
        this(DSL.name(alias), CONTENTS);
    }

    /**
     * Create an aliased <code>public.contents</code> table reference
     */
    public Contents(Name alias) {
        this(alias, CONTENTS);
    }

    /**
     * Create a <code>public.contents</code> table reference
     */
    public Contents() {
        this(DSL.name("contents"), null);
    }

    public <O extends Record> Contents(Table<O> child, ForeignKey<O, ContentsRecord> key) {
        super(child, key, CONTENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContentsRecord> getPrimaryKey() {
        return Keys.CONTENTS_PKEY;
    }

    @Override
    public List<ForeignKey<ContentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTENTS__CONTENTS_NAMESPACE_UUID_FKEY, Keys.CONTENTS__CONTENTS_PARENT_FKEY, Keys.CONTENTS__CONTENTS_CREATOR_UUID_FKEY, Keys.CONTENTS__CONTENTS_MODEL_UUID_FKEY);
    }

    private transient Namespaces _namespaces;
    private transient Contents _contents;
    private transient Users _users;
    private transient Models _models;

    public Namespaces namespaces() {
        if (_namespaces == null)
            _namespaces = new Namespaces(this, Keys.CONTENTS__CONTENTS_NAMESPACE_UUID_FKEY);

        return _namespaces;
    }

    public Contents contents() {
        if (_contents == null)
            _contents = new Contents(this, Keys.CONTENTS__CONTENTS_PARENT_FKEY);

        return _contents;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CONTENTS__CONTENTS_CREATOR_UUID_FKEY);

        return _users;
    }

    public Models models() {
        if (_models == null)
            _models = new Models(this, Keys.CONTENTS__CONTENTS_MODEL_UUID_FKEY);

        return _models;
    }

    @Override
    public Contents as(String alias) {
        return new Contents(DSL.name(alias), this);
    }

    @Override
    public Contents as(Name alias) {
        return new Contents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(String name) {
        return new Contents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contents rename(Name name) {
        return new Contents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<java.util.UUID, java.util.UUID, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID, JSONB, java.util.UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
