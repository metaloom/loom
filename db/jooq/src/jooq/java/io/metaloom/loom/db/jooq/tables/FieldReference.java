/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.FieldReferenceRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This table is mainly used to lookup foreign references to contents
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldReference extends TableImpl<FieldReferenceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.field_reference</code>
     */
    public static final FieldReference FIELD_REFERENCE = new FieldReference();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldReferenceRecord> getRecordType() {
        return FieldReferenceRecord.class;
    }

    /**
     * The column <code>public.field_reference.source_uuid</code>.
     */
    public final TableField<FieldReferenceRecord, UUID> SOURCE_UUID = createField(DSL.name("source_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.field_reference.target_uuid</code>.
     */
    public final TableField<FieldReferenceRecord, UUID> TARGET_UUID = createField(DSL.name("target_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.field_reference.field_name</code>. Name of the
     * field in which the content reference was listed.
     */
    public final TableField<FieldReferenceRecord, String> FIELD_NAME = createField(DSL.name("field_name"), SQLDataType.VARCHAR.nullable(false), this, "Name of the field in which the content reference was listed.");

    private FieldReference(Name alias, Table<FieldReferenceRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldReference(Name alias, Table<FieldReferenceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table is mainly used to lookup foreign references to contents"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.field_reference</code> table reference
     */
    public FieldReference(String alias) {
        this(DSL.name(alias), FIELD_REFERENCE);
    }

    /**
     * Create an aliased <code>public.field_reference</code> table reference
     */
    public FieldReference(Name alias) {
        this(alias, FIELD_REFERENCE);
    }

    /**
     * Create a <code>public.field_reference</code> table reference
     */
    public FieldReference() {
        this(DSL.name("field_reference"), null);
    }

    public <O extends Record> FieldReference(Table<O> child, ForeignKey<O, FieldReferenceRecord> key) {
        super(child, key, FIELD_REFERENCE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<FieldReferenceRecord> getPrimaryKey() {
        return Keys.FIELD_REFERENCE_PKEY;
    }

    @Override
    public List<ForeignKey<FieldReferenceRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FIELD_REFERENCE__FIELD_REFERENCE_SOURCE_UUID_FKEY, Keys.FIELD_REFERENCE__FIELD_REFERENCE_TARGET_UUID_FKEY);
    }

    private transient io.metaloom.loom.db.jooq.tables.Field _fieldReferenceSourceUuidFkey;
    private transient io.metaloom.loom.db.jooq.tables.Field _fieldReferenceTargetUuidFkey;

    public io.metaloom.loom.db.jooq.tables.Field fieldReferenceSourceUuidFkey() {
        if (_fieldReferenceSourceUuidFkey == null)
            _fieldReferenceSourceUuidFkey = new io.metaloom.loom.db.jooq.tables.Field(this, Keys.FIELD_REFERENCE__FIELD_REFERENCE_SOURCE_UUID_FKEY);

        return _fieldReferenceSourceUuidFkey;
    }

    public io.metaloom.loom.db.jooq.tables.Field fieldReferenceTargetUuidFkey() {
        if (_fieldReferenceTargetUuidFkey == null)
            _fieldReferenceTargetUuidFkey = new io.metaloom.loom.db.jooq.tables.Field(this, Keys.FIELD_REFERENCE__FIELD_REFERENCE_TARGET_UUID_FKEY);

        return _fieldReferenceTargetUuidFkey;
    }

    @Override
    public FieldReference as(String alias) {
        return new FieldReference(DSL.name(alias), this);
    }

    @Override
    public FieldReference as(Name alias) {
        return new FieldReference(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldReference rename(String name) {
        return new FieldReference(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldReference rename(Name name) {
        return new FieldReference(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
