/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.enums.JooqAnnotationType;
import io.metaloom.loom.db.jooq.tables.records.JooqAnnotationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function17;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This table contains asset annotation entries which can be used to create
 * chapters or sections to assign tasks to.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAnnotation extends TableImpl<JooqAnnotationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.annotation</code>
     */
    public static final JooqAnnotation ANNOTATION = new JooqAnnotation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqAnnotationRecord> getRecordType() {
        return JooqAnnotationRecord.class;
    }

    /**
     * The column <code>public.annotation.uuid</code>.
     */
    public final TableField<JooqAnnotationRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.annotation.type</code>.
     */
    public final TableField<JooqAnnotationRecord, JooqAnnotationType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(io.metaloom.loom.db.jooq.enums.JooqAnnotationType.class), this, "");

    /**
     * The column <code>public.annotation.asset_uuid</code>.
     */
    public final TableField<JooqAnnotationRecord, java.util.UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.annotation.created</code>. Creation timestamp
     */
    public final TableField<JooqAnnotationRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "Creation timestamp");

    /**
     * The column <code>public.annotation.creator_uuid</code>.
     */
    public final TableField<JooqAnnotationRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.annotation.edited</code>.
     */
    public final TableField<JooqAnnotationRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.annotation.editor_uuid</code>.
     */
    public final TableField<JooqAnnotationRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.annotation.title</code>.
     */
    public final TableField<JooqAnnotationRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.annotation.description</code>.
     */
    public final TableField<JooqAnnotationRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.annotation.time_from</code>.
     */
    public final TableField<JooqAnnotationRecord, Integer> TIME_FROM = createField(DSL.name("time_from"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotation.time_to</code>.
     */
    public final TableField<JooqAnnotationRecord, Integer> TIME_TO = createField(DSL.name("time_to"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotation.areaStartX</code>.
     */
    public final TableField<JooqAnnotationRecord, Integer> AREASTARTX = createField(DSL.name("areaStartX"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotation.areaStartY</code>.
     */
    public final TableField<JooqAnnotationRecord, Integer> AREASTARTY = createField(DSL.name("areaStartY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotation.areaWidth</code>.
     */
    public final TableField<JooqAnnotationRecord, Integer> AREAWIDTH = createField(DSL.name("areaWidth"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotation.areaHeight</code>.
     */
    public final TableField<JooqAnnotationRecord, Integer> AREAHEIGHT = createField(DSL.name("areaHeight"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.annotation.meta</code>. Custom meta properties
     */
    public final TableField<JooqAnnotationRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties");

    /**
     * The column <code>public.annotation.thumbnail</code>. Reference to the
     * thumbnail that depics the annotated element/area
     */
    public final TableField<JooqAnnotationRecord, String> THUMBNAIL = createField(DSL.name("thumbnail"), SQLDataType.VARCHAR, this, "Reference to the thumbnail that depics the annotated element/area");

    private JooqAnnotation(Name alias, Table<JooqAnnotationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqAnnotation(Name alias, Table<JooqAnnotationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table contains asset annotation entries which can be used to create chapters or sections to assign tasks to."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.annotation</code> table reference
     */
    public JooqAnnotation(String alias) {
        this(DSL.name(alias), ANNOTATION);
    }

    /**
     * Create an aliased <code>public.annotation</code> table reference
     */
    public JooqAnnotation(Name alias) {
        this(alias, ANNOTATION);
    }

    /**
     * Create a <code>public.annotation</code> table reference
     */
    public JooqAnnotation() {
        this(DSL.name("annotation"), null);
    }

    public <O extends Record> JooqAnnotation(Table<O> child, ForeignKey<O, JooqAnnotationRecord> key) {
        super(child, key, ANNOTATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqAnnotationRecord> getPrimaryKey() {
        return Keys.ANNOTATION_PKEY;
    }

    @Override
    public List<ForeignKey<JooqAnnotationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ANNOTATION__ANNOTATION_CREATOR_UUID_FKEY, Keys.ANNOTATION__ANNOTATION_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _annotationCreatorUuidFkey;
    private transient JooqUser _annotationEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>annotation_creator_uuid_fkey</code> key.
     */
    public JooqUser annotationCreatorUuidFkey() {
        if (_annotationCreatorUuidFkey == null)
            _annotationCreatorUuidFkey = new JooqUser(this, Keys.ANNOTATION__ANNOTATION_CREATOR_UUID_FKEY);

        return _annotationCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>annotation_editor_uuid_fkey</code> key.
     */
    public JooqUser annotationEditorUuidFkey() {
        if (_annotationEditorUuidFkey == null)
            _annotationEditorUuidFkey = new JooqUser(this, Keys.ANNOTATION__ANNOTATION_EDITOR_UUID_FKEY);

        return _annotationEditorUuidFkey;
    }

    @Override
    public JooqAnnotation as(String alias) {
        return new JooqAnnotation(DSL.name(alias), this);
    }

    @Override
    public JooqAnnotation as(Name alias) {
        return new JooqAnnotation(alias, this);
    }

    @Override
    public JooqAnnotation as(Table<?> alias) {
        return new JooqAnnotation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAnnotation rename(String name) {
        return new JooqAnnotation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAnnotation rename(Name name) {
        return new JooqAnnotation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAnnotation rename(Table<?> name) {
        return new JooqAnnotation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<java.util.UUID, JooqAnnotationType, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID, String, String, Integer, Integer, Integer, Integer, Integer, Integer, JSONB, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function17<? super java.util.UUID, ? super JooqAnnotationType, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function17<? super java.util.UUID, ? super JooqAnnotationType, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super String, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super JSONB, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
