/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqAssetLocationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function16;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Assets keep track of media that has been found by the scanner. Multiple
 * asset_locations may share the same asset thus the properties will be
 * decoupled from asset.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAssetLocation extends TableImpl<JooqAssetLocationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.asset_location</code>
     */
    public static final JooqAssetLocation ASSET_LOCATION = new JooqAssetLocation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqAssetLocationRecord> getRecordType() {
        return JooqAssetLocationRecord.class;
    }

    /**
     * The column <code>public.asset_location.uuid</code>.
     */
    public final TableField<JooqAssetLocationRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.asset_location.asset_uuid</code>. Reference to
     * the media asset for the asset_location.
     */
    public final TableField<JooqAssetLocationRecord, java.util.UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID.nullable(false), this, "Reference to the media asset for the asset_location.");

    /**
     * The column <code>public.asset_location.path</code>. Currently known path
     * to the asset_location in the filesystem
     */
    public final TableField<JooqAssetLocationRecord, String> PATH = createField(DSL.name("path"), SQLDataType.VARCHAR.nullable(false), this, "Currently known path to the asset_location in the filesystem");

    /**
     * The column <code>public.asset_location.filekey_inode</code>.
     */
    public final TableField<JooqAssetLocationRecord, Integer> FILEKEY_INODE = createField(DSL.name("filekey_inode"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.asset_location.filekey_stdev</code>.
     */
    public final TableField<JooqAssetLocationRecord, Integer> FILEKEY_STDEV = createField(DSL.name("filekey_stdev"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.asset_location.filekey_edate_nano</code>.
     */
    public final TableField<JooqAssetLocationRecord, Integer> FILEKEY_EDATE_NANO = createField(DSL.name("filekey_edate_nano"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.asset_location.filekey_edate</code>.
     */
    public final TableField<JooqAssetLocationRecord, Integer> FILEKEY_EDATE = createField(DSL.name("filekey_edate"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.asset_location.meta</code>. Custom meta
     * properties to the asset_location
     */
    public final TableField<JooqAssetLocationRecord, String> META = createField(DSL.name("meta"), SQLDataType.VARCHAR, this, "Custom meta properties to the asset_location");

    /**
     * The column <code>public.asset_location.mime_type</code>.
     */
    public final TableField<JooqAssetLocationRecord, String> MIME_TYPE = createField(DSL.name("mime_type"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset_location.license</code>.
     */
    public final TableField<JooqAssetLocationRecord, String> LICENSE = createField(DSL.name("license"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset_location.state</code>.
     */
    public final TableField<JooqAssetLocationRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset_location.locked_by_uuid</code>.
     */
    public final TableField<JooqAssetLocationRecord, java.util.UUID> LOCKED_BY_UUID = createField(DSL.name("locked_by_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.asset_location.created</code>.
     */
    public final TableField<JooqAssetLocationRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.asset_location.creator_uuid</code>.
     */
    public final TableField<JooqAssetLocationRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset_location.edited</code>.
     */
    public final TableField<JooqAssetLocationRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.asset_location.editor_uuid</code>.
     */
    public final TableField<JooqAssetLocationRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqAssetLocation(Name alias, Table<JooqAssetLocationRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqAssetLocation(Name alias, Table<JooqAssetLocationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Assets keep track of media that has been found by the scanner. Multiple asset_locations may share the same asset thus the properties will be decoupled from asset."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.asset_location</code> table reference
     */
    public JooqAssetLocation(String alias) {
        this(DSL.name(alias), ASSET_LOCATION);
    }

    /**
     * Create an aliased <code>public.asset_location</code> table reference
     */
    public JooqAssetLocation(Name alias) {
        this(alias, ASSET_LOCATION);
    }

    /**
     * Create a <code>public.asset_location</code> table reference
     */
    public JooqAssetLocation() {
        this(DSL.name("asset_location"), null);
    }

    public <O extends Record> JooqAssetLocation(Table<O> child, ForeignKey<O, JooqAssetLocationRecord> key) {
        super(child, key, ASSET_LOCATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ASSET_LOCATION_PATH_IDX);
    }

    @Override
    public UniqueKey<JooqAssetLocationRecord> getPrimaryKey() {
        return Keys.ASSET_LOCATION_PKEY;
    }

    @Override
    public List<ForeignKey<JooqAssetLocationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASSET_LOCATION__ASSET_LOCATION_LOCKED_BY_UUID_FKEY, Keys.ASSET_LOCATION__ASSET_LOCATION_CREATOR_UUID_FKEY, Keys.ASSET_LOCATION__ASSET_LOCATION_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _assetLocationLockedByUuidFkey;
    private transient JooqUser _assetLocationCreatorUuidFkey;
    private transient JooqUser _assetLocationEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>asset_location_locked_by_uuid_fkey</code> key.
     */
    public JooqUser assetLocationLockedByUuidFkey() {
        if (_assetLocationLockedByUuidFkey == null)
            _assetLocationLockedByUuidFkey = new JooqUser(this, Keys.ASSET_LOCATION__ASSET_LOCATION_LOCKED_BY_UUID_FKEY);

        return _assetLocationLockedByUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>asset_location_creator_uuid_fkey</code> key.
     */
    public JooqUser assetLocationCreatorUuidFkey() {
        if (_assetLocationCreatorUuidFkey == null)
            _assetLocationCreatorUuidFkey = new JooqUser(this, Keys.ASSET_LOCATION__ASSET_LOCATION_CREATOR_UUID_FKEY);

        return _assetLocationCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>asset_location_editor_uuid_fkey</code> key.
     */
    public JooqUser assetLocationEditorUuidFkey() {
        if (_assetLocationEditorUuidFkey == null)
            _assetLocationEditorUuidFkey = new JooqUser(this, Keys.ASSET_LOCATION__ASSET_LOCATION_EDITOR_UUID_FKEY);

        return _assetLocationEditorUuidFkey;
    }

    @Override
    public JooqAssetLocation as(String alias) {
        return new JooqAssetLocation(DSL.name(alias), this);
    }

    @Override
    public JooqAssetLocation as(Name alias) {
        return new JooqAssetLocation(alias, this);
    }

    @Override
    public JooqAssetLocation as(Table<?> alias) {
        return new JooqAssetLocation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetLocation rename(String name) {
        return new JooqAssetLocation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetLocation rename(Name name) {
        return new JooqAssetLocation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetLocation rename(Table<?> name) {
        return new JooqAssetLocation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<java.util.UUID, java.util.UUID, String, Integer, Integer, Integer, Integer, String, String, String, String, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function16<? super java.util.UUID, ? super java.util.UUID, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function16<? super java.util.UUID, ? super java.util.UUID, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super String, ? super String, ? super String, ? super String, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
