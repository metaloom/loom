/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqAssetReactionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAssetReaction extends TableImpl<JooqAssetReactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.asset_reaction</code>
     */
    public static final JooqAssetReaction ASSET_REACTION = new JooqAssetReaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqAssetReactionRecord> getRecordType() {
        return JooqAssetReactionRecord.class;
    }

    /**
     * The column <code>public.asset_reaction.asset_uuid</code>.
     */
    public final TableField<JooqAssetReactionRecord, UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset_reaction.reaction_uuid</code>.
     */
    public final TableField<JooqAssetReactionRecord, UUID> REACTION_UUID = createField(DSL.name("reaction_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqAssetReaction(Name alias, Table<JooqAssetReactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqAssetReaction(Name alias, Table<JooqAssetReactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.asset_reaction</code> table reference
     */
    public JooqAssetReaction(String alias) {
        this(DSL.name(alias), ASSET_REACTION);
    }

    /**
     * Create an aliased <code>public.asset_reaction</code> table reference
     */
    public JooqAssetReaction(Name alias) {
        this(alias, ASSET_REACTION);
    }

    /**
     * Create a <code>public.asset_reaction</code> table reference
     */
    public JooqAssetReaction() {
        this(DSL.name("asset_reaction"), null);
    }

    public <O extends Record> JooqAssetReaction(Table<O> child, ForeignKey<O, JooqAssetReactionRecord> key) {
        super(child, key, ASSET_REACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqAssetReactionRecord> getPrimaryKey() {
        return Keys.ASSET_REACTION_PKEY;
    }

    @Override
    public List<ForeignKey<JooqAssetReactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASSET_REACTION__ASSET_REACTION_REACTION_UUID_FKEY);
    }

    private transient JooqReaction _reaction;

    /**
     * Get the implicit join path to the <code>public.reaction</code> table.
     */
    public JooqReaction reaction() {
        if (_reaction == null)
            _reaction = new JooqReaction(this, Keys.ASSET_REACTION__ASSET_REACTION_REACTION_UUID_FKEY);

        return _reaction;
    }

    @Override
    public JooqAssetReaction as(String alias) {
        return new JooqAssetReaction(DSL.name(alias), this);
    }

    @Override
    public JooqAssetReaction as(Name alias) {
        return new JooqAssetReaction(alias, this);
    }

    @Override
    public JooqAssetReaction as(Table<?> alias) {
        return new JooqAssetReaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetReaction rename(String name) {
        return new JooqAssetReaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetReaction rename(Name name) {
        return new JooqAssetReaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetReaction rename(Table<?> name) {
        return new JooqAssetReaction(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
