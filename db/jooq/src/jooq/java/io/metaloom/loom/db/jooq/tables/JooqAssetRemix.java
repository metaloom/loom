/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqAssetRemixRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Store information on remixes of binaries.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAssetRemix extends TableImpl<JooqAssetRemixRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.asset_remix</code>
     */
    public static final JooqAssetRemix ASSET_REMIX = new JooqAssetRemix();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqAssetRemixRecord> getRecordType() {
        return JooqAssetRemixRecord.class;
    }

    /**
     * The column <code>public.asset_remix.asset_a_uuid</code>.
     */
    public final TableField<JooqAssetRemixRecord, UUID> ASSET_A_UUID = createField(DSL.name("asset_a_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset_remix.asset_b_uuid</code>.
     */
    public final TableField<JooqAssetRemixRecord, UUID> ASSET_B_UUID = createField(DSL.name("asset_b_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset_remix.meta</code>. Custom meta properties
     * to the element
     */
    public final TableField<JooqAssetRemixRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    /**
     * The column <code>public.asset_remix.created</code>.
     */
    public final TableField<JooqAssetRemixRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.asset_remix.creator_uuid</code>.
     */
    public final TableField<JooqAssetRemixRecord, UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqAssetRemix(Name alias, Table<JooqAssetRemixRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqAssetRemix(Name alias, Table<JooqAssetRemixRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Store information on remixes of binaries."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.asset_remix</code> table reference
     */
    public JooqAssetRemix(String alias) {
        this(DSL.name(alias), ASSET_REMIX);
    }

    /**
     * Create an aliased <code>public.asset_remix</code> table reference
     */
    public JooqAssetRemix(Name alias) {
        this(alias, ASSET_REMIX);
    }

    /**
     * Create a <code>public.asset_remix</code> table reference
     */
    public JooqAssetRemix() {
        this(DSL.name("asset_remix"), null);
    }

    public <O extends Record> JooqAssetRemix(Table<O> child, ForeignKey<O, JooqAssetRemixRecord> key) {
        super(child, key, ASSET_REMIX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ASSET_REMIX_ASSET_A_UUID_IDX, Indexes.ASSET_REMIX_ASSET_B_UUID_IDX);
    }

    @Override
    public List<ForeignKey<JooqAssetRemixRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ASSET_REMIX__ASSET_REMIX_CREATOR_UUID_FKEY);
    }

    private transient JooqUser _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public JooqUser user() {
        if (_user == null)
            _user = new JooqUser(this, Keys.ASSET_REMIX__ASSET_REMIX_CREATOR_UUID_FKEY);

        return _user;
    }

    @Override
    public JooqAssetRemix as(String alias) {
        return new JooqAssetRemix(DSL.name(alias), this);
    }

    @Override
    public JooqAssetRemix as(Name alias) {
        return new JooqAssetRemix(alias, this);
    }

    @Override
    public JooqAssetRemix as(Table<?> alias) {
        return new JooqAssetRemix(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetRemix rename(String name) {
        return new JooqAssetRemix(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetRemix rename(Name name) {
        return new JooqAssetRemix(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAssetRemix rename(Table<?> name) {
        return new JooqAssetRemix(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, JSONB, LocalDateTime, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super JSONB, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super JSONB, ? super LocalDateTime, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
