/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.converter.JsonObjectConverter;
import io.metaloom.loom.db.jooq.enums.JooqAttachmentType;
import io.metaloom.loom.db.jooq.tables.records.JooqAttachmentRecord;
import io.vertx.core.json.JsonObject;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function12;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAttachment extends TableImpl<JooqAttachmentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.attachment</code>
     */
    public static final JooqAttachment ATTACHMENT = new JooqAttachment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqAttachmentRecord> getRecordType() {
        return JooqAttachmentRecord.class;
    }

    /**
     * The column <code>public.attachment.uuid</code>.
     */
    public final TableField<JooqAttachmentRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.attachment.binary_sha512sum</code>.
     */
    public final TableField<JooqAttachmentRecord, String> BINARY_SHA512SUM = createField(DSL.name("binary_sha512sum"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.attachment.embedding_uuid</code>.
     */
    public final TableField<JooqAttachmentRecord, java.util.UUID> EMBEDDING_UUID = createField(DSL.name("embedding_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.attachment.asset_uuid</code>.
     */
    public final TableField<JooqAttachmentRecord, java.util.UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.attachment.mime_type</code>.
     */
    public final TableField<JooqAttachmentRecord, String> MIME_TYPE = createField(DSL.name("mime_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.attachment.type</code>.
     */
    public final TableField<JooqAttachmentRecord, JooqAttachmentType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(io.metaloom.loom.db.jooq.enums.JooqAttachmentType.class), this, "");

    /**
     * The column <code>public.attachment.filename</code>.
     */
    public final TableField<JooqAttachmentRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.attachment.meta</code>.
     */
    public final TableField<JooqAttachmentRecord, JsonObject> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "", new JsonObjectConverter());

    /**
     * The column <code>public.attachment.created</code>.
     */
    public final TableField<JooqAttachmentRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.attachment.creator_uuid</code>.
     */
    public final TableField<JooqAttachmentRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.attachment.edited</code>.
     */
    public final TableField<JooqAttachmentRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.attachment.editor_uuid</code>.
     */
    public final TableField<JooqAttachmentRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqAttachment(Name alias, Table<JooqAttachmentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqAttachment(Name alias, Table<JooqAttachmentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.attachment</code> table reference
     */
    public JooqAttachment(String alias) {
        this(DSL.name(alias), ATTACHMENT);
    }

    /**
     * Create an aliased <code>public.attachment</code> table reference
     */
    public JooqAttachment(Name alias) {
        this(alias, ATTACHMENT);
    }

    /**
     * Create a <code>public.attachment</code> table reference
     */
    public JooqAttachment() {
        this(DSL.name("attachment"), null);
    }

    public <O extends Record> JooqAttachment(Table<O> child, ForeignKey<O, JooqAttachmentRecord> key) {
        super(child, key, ATTACHMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ATTACHMENT_UUID_IDX);
    }

    @Override
    public UniqueKey<JooqAttachmentRecord> getPrimaryKey() {
        return Keys.ATTACHMENT_PKEY;
    }

    @Override
    public List<ForeignKey<JooqAttachmentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ATTACHMENT__ATTACHMENT_BINARY_SHA512SUM_FKEY, Keys.ATTACHMENT__ATTACHMENT_EMBEDDING_UUID_FKEY, Keys.ATTACHMENT__ATTACHMENT_CREATOR_UUID_FKEY, Keys.ATTACHMENT__ATTACHMENT_EDITOR_UUID_FKEY);
    }

    private transient JooqAttachmentBinary _attachmentBinary;
    private transient JooqEmbedding _embedding;
    private transient JooqUser _attachmentCreatorUuidFkey;
    private transient JooqUser _attachmentEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.attachment_binary</code>
     * table.
     */
    public JooqAttachmentBinary attachmentBinary() {
        if (_attachmentBinary == null)
            _attachmentBinary = new JooqAttachmentBinary(this, Keys.ATTACHMENT__ATTACHMENT_BINARY_SHA512SUM_FKEY);

        return _attachmentBinary;
    }

    /**
     * Get the implicit join path to the <code>public.embedding</code> table.
     */
    public JooqEmbedding embedding() {
        if (_embedding == null)
            _embedding = new JooqEmbedding(this, Keys.ATTACHMENT__ATTACHMENT_EMBEDDING_UUID_FKEY);

        return _embedding;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>attachment_creator_uuid_fkey</code> key.
     */
    public JooqUser attachmentCreatorUuidFkey() {
        if (_attachmentCreatorUuidFkey == null)
            _attachmentCreatorUuidFkey = new JooqUser(this, Keys.ATTACHMENT__ATTACHMENT_CREATOR_UUID_FKEY);

        return _attachmentCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>attachment_editor_uuid_fkey</code> key.
     */
    public JooqUser attachmentEditorUuidFkey() {
        if (_attachmentEditorUuidFkey == null)
            _attachmentEditorUuidFkey = new JooqUser(this, Keys.ATTACHMENT__ATTACHMENT_EDITOR_UUID_FKEY);

        return _attachmentEditorUuidFkey;
    }

    @Override
    public JooqAttachment as(String alias) {
        return new JooqAttachment(DSL.name(alias), this);
    }

    @Override
    public JooqAttachment as(Name alias) {
        return new JooqAttachment(alias, this);
    }

    @Override
    public JooqAttachment as(Table<?> alias) {
        return new JooqAttachment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAttachment rename(String name) {
        return new JooqAttachment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAttachment rename(Name name) {
        return new JooqAttachment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAttachment rename(Table<?> name) {
        return new JooqAttachment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<java.util.UUID, String, java.util.UUID, java.util.UUID, String, JooqAttachmentType, String, JsonObject, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function12<? super java.util.UUID, ? super String, ? super java.util.UUID, ? super java.util.UUID, ? super String, ? super JooqAttachmentType, ? super String, ? super JsonObject, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function12<? super java.util.UUID, ? super String, ? super java.util.UUID, ? super java.util.UUID, ? super String, ? super JooqAttachmentType, ? super String, ? super JsonObject, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
