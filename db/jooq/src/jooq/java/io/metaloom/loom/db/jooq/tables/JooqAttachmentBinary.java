/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqAttachmentBinaryRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAttachmentBinary extends TableImpl<JooqAttachmentBinaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.attachment_binary</code>
     */
    public static final JooqAttachmentBinary ATTACHMENT_BINARY = new JooqAttachmentBinary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqAttachmentBinaryRecord> getRecordType() {
        return JooqAttachmentBinaryRecord.class;
    }

    /**
     * The column <code>public.attachment_binary.sha512sum</code>.
     */
    public final TableField<JooqAttachmentBinaryRecord, String> SHA512SUM = createField(DSL.name("sha512sum"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.attachment_binary.size</code>.
     */
    public final TableField<JooqAttachmentBinaryRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT.nullable(false), this, "");

    private JooqAttachmentBinary(Name alias, Table<JooqAttachmentBinaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqAttachmentBinary(Name alias, Table<JooqAttachmentBinaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.attachment_binary</code> table reference
     */
    public JooqAttachmentBinary(String alias) {
        this(DSL.name(alias), ATTACHMENT_BINARY);
    }

    /**
     * Create an aliased <code>public.attachment_binary</code> table reference
     */
    public JooqAttachmentBinary(Name alias) {
        this(alias, ATTACHMENT_BINARY);
    }

    /**
     * Create a <code>public.attachment_binary</code> table reference
     */
    public JooqAttachmentBinary() {
        this(DSL.name("attachment_binary"), null);
    }

    public <O extends Record> JooqAttachmentBinary(Table<O> child, ForeignKey<O, JooqAttachmentBinaryRecord> key) {
        super(child, key, ATTACHMENT_BINARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ATTACHMENT_BINARY_SHA512SUM_IDX);
    }

    @Override
    public UniqueKey<JooqAttachmentBinaryRecord> getPrimaryKey() {
        return Keys.ATTACHMENT_BINARY_PKEY;
    }

    @Override
    public JooqAttachmentBinary as(String alias) {
        return new JooqAttachmentBinary(DSL.name(alias), this);
    }

    @Override
    public JooqAttachmentBinary as(Name alias) {
        return new JooqAttachmentBinary(alias, this);
    }

    @Override
    public JooqAttachmentBinary as(Table<?> alias) {
        return new JooqAttachmentBinary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAttachmentBinary rename(String name) {
        return new JooqAttachmentBinary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAttachmentBinary rename(Name name) {
        return new JooqAttachmentBinary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqAttachmentBinary rename(Table<?> name) {
        return new JooqAttachmentBinary(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
