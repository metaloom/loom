/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqBinaryRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This table stores information on the binary component of the asset
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqBinary extends TableImpl<JooqBinaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.binary</code>
     */
    public static final JooqBinary BINARY = new JooqBinary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqBinaryRecord> getRecordType() {
        return JooqBinaryRecord.class;
    }

    /**
     * The column <code>public.binary.uuid</code>.
     */
    public final TableField<JooqBinaryRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.binary.sha512sum</code>.
     */
    public final TableField<JooqBinaryRecord, String> SHA512SUM = createField(DSL.name("sha512sum"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.binary.size</code>.
     */
    public final TableField<JooqBinaryRecord, Long> SIZE = createField(DSL.name("size"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.binary.sha256sum</code>.
     */
    public final TableField<JooqBinaryRecord, String> SHA256SUM = createField(DSL.name("sha256sum"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.binary.md5sum</code>.
     */
    public final TableField<JooqBinaryRecord, String> MD5SUM = createField(DSL.name("md5sum"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.binary.chunk_hash</code>.
     */
    public final TableField<JooqBinaryRecord, String> CHUNK_HASH = createField(DSL.name("chunk_hash"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.binary.zero_chunk_count</code>.
     */
    public final TableField<JooqBinaryRecord, Long> ZERO_CHUNK_COUNT = createField(DSL.name("zero_chunk_count"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.binary.mime_type</code>.
     */
    public final TableField<JooqBinaryRecord, String> MIME_TYPE = createField(DSL.name("mime_type"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.binary.meta</code>. Custom meta properties to the
     * asset
     */
    public final TableField<JooqBinaryRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the asset");

    /**
     * The column <code>public.binary.author</code>.
     */
    public final TableField<JooqBinaryRecord, String> AUTHOR = createField(DSL.name("author"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.binary.geo_lon</code>.
     */
    public final TableField<JooqBinaryRecord, BigDecimal> GEO_LON = createField(DSL.name("geo_lon"), SQLDataType.NUMERIC(9, 6), this, "");

    /**
     * The column <code>public.binary.geo_lat</code>.
     */
    public final TableField<JooqBinaryRecord, BigDecimal> GEO_LAT = createField(DSL.name("geo_lat"), SQLDataType.NUMERIC(8, 6), this, "");

    /**
     * The column <code>public.binary.initial_origin</code>. Document the
     * initial origin of the binary (e.g. first filepath encountered, first s3
     * path, url, hash)
     */
    public final TableField<JooqBinaryRecord, String> INITIAL_ORIGIN = createField(DSL.name("initial_origin"), SQLDataType.VARCHAR.nullable(false), this, "Document the initial origin of the binary (e.g. first filepath encountered, first s3 path, url, hash)");

    /**
     * The column <code>public.binary.created</code>.
     */
    public final TableField<JooqBinaryRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.binary.creator_uuid</code>.
     */
    public final TableField<JooqBinaryRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.binary.edited</code>.
     */
    public final TableField<JooqBinaryRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.binary.editor_uuid</code>.
     */
    public final TableField<JooqBinaryRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.binary.s3_bucket_name</code>.
     */
    public final TableField<JooqBinaryRecord, String> S3_BUCKET_NAME = createField(DSL.name("s3_bucket_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.binary.s3_object_path</code>.
     */
    public final TableField<JooqBinaryRecord, String> S3_OBJECT_PATH = createField(DSL.name("s3_object_path"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.binary.media_width</code>. Only set for images,
     * video
     */
    public final TableField<JooqBinaryRecord, Integer> MEDIA_WIDTH = createField(DSL.name("media_width"), SQLDataType.INTEGER, this, "Only set for images, video");

    /**
     * The column <code>public.binary.media_height</code>. Only set for images,
     * video
     */
    public final TableField<JooqBinaryRecord, Integer> MEDIA_HEIGHT = createField(DSL.name("media_height"), SQLDataType.INTEGER, this, "Only set for images, video");

    /**
     * The column <code>public.binary.duration</code>. Duration of the video,
     * audio
     */
    public final TableField<JooqBinaryRecord, Integer> DURATION = createField(DSL.name("duration"), SQLDataType.INTEGER, this, "Duration of the video, audio");

    /**
     * The column <code>public.binary.video_fingerprint</code>. Video
     * fingerprint information
     */
    public final TableField<JooqBinaryRecord, String> VIDEO_FINGERPRINT = createField(DSL.name("video_fingerprint"), SQLDataType.VARCHAR, this, "Video fingerprint information");

    /**
     * The column <code>public.binary.image_fingerprint</code>. Image
     * fingerprint information
     */
    public final TableField<JooqBinaryRecord, String> IMAGE_FINGERPRINT = createField(DSL.name("image_fingerprint"), SQLDataType.VARCHAR, this, "Image fingerprint information");

    /**
     * The column <code>public.binary.image_dominant_color</code>.
     */
    public final TableField<JooqBinaryRecord, String> IMAGE_DOMINANT_COLOR = createField(DSL.name("image_dominant_color"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.binary.audio_bpm</code>.
     */
    public final TableField<JooqBinaryRecord, Integer> AUDIO_BPM = createField(DSL.name("audio_bpm"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.binary.audio_sampling_rate</code>.
     */
    public final TableField<JooqBinaryRecord, Integer> AUDIO_SAMPLING_RATE = createField(DSL.name("audio_sampling_rate"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.binary.audio_channels</code>.
     */
    public final TableField<JooqBinaryRecord, Integer> AUDIO_CHANNELS = createField(DSL.name("audio_channels"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.binary.audio_encoding</code>. Store the audio
     * encoding used for the binary (e.g. mp3, flac)
     */
    public final TableField<JooqBinaryRecord, String> AUDIO_ENCODING = createField(DSL.name("audio_encoding"), SQLDataType.VARCHAR, this, "Store the audio encoding used for the binary (e.g. mp3, flac)");

    /**
     * The column <code>public.binary.audio_fingerprint</code>. Audio
     * fingerprint information
     */
    public final TableField<JooqBinaryRecord, String> AUDIO_FINGERPRINT = createField(DSL.name("audio_fingerprint"), SQLDataType.VARCHAR, this, "Audio fingerprint information");

    /**
     * The column <code>public.binary.doc_plain_text</code>. Extracted text of
     * the document
     */
    public final TableField<JooqBinaryRecord, String> DOC_PLAIN_TEXT = createField(DSL.name("doc_plain_text"), SQLDataType.VARCHAR, this, "Extracted text of the document");

    /**
     * The column <code>public.binary.doc_word_count</code>.
     */
    public final TableField<JooqBinaryRecord, Integer> DOC_WORD_COUNT = createField(DSL.name("doc_word_count"), SQLDataType.INTEGER, this, "");

    private JooqBinary(Name alias, Table<JooqBinaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqBinary(Name alias, Table<JooqBinaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("This table stores information on the binary component of the asset"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.binary</code> table reference
     */
    public JooqBinary(String alias) {
        this(DSL.name(alias), BINARY);
    }

    /**
     * Create an aliased <code>public.binary</code> table reference
     */
    public JooqBinary(Name alias) {
        this(alias, BINARY);
    }

    /**
     * Create a <code>public.binary</code> table reference
     */
    public JooqBinary() {
        this(DSL.name("binary"), null);
    }

    public <O extends Record> JooqBinary(Table<O> child, ForeignKey<O, JooqBinaryRecord> key) {
        super(child, key, BINARY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BINARY_GEO_LON_GEO_LAT_IDX, Indexes.BINARY_UUID_IDX);
    }

    @Override
    public UniqueKey<JooqBinaryRecord> getPrimaryKey() {
        return Keys.BINARY_PKEY;
    }

    @Override
    public List<ForeignKey<JooqBinaryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BINARY__BINARY_CREATOR_UUID_FKEY, Keys.BINARY__BINARY_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _binaryCreatorUuidFkey;
    private transient JooqUser _binaryEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>binary_creator_uuid_fkey</code> key.
     */
    public JooqUser binaryCreatorUuidFkey() {
        if (_binaryCreatorUuidFkey == null)
            _binaryCreatorUuidFkey = new JooqUser(this, Keys.BINARY__BINARY_CREATOR_UUID_FKEY);

        return _binaryCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>binary_editor_uuid_fkey</code> key.
     */
    public JooqUser binaryEditorUuidFkey() {
        if (_binaryEditorUuidFkey == null)
            _binaryEditorUuidFkey = new JooqUser(this, Keys.BINARY__BINARY_EDITOR_UUID_FKEY);

        return _binaryEditorUuidFkey;
    }

    @Override
    public JooqBinary as(String alias) {
        return new JooqBinary(DSL.name(alias), this);
    }

    @Override
    public JooqBinary as(Name alias) {
        return new JooqBinary(alias, this);
    }

    @Override
    public JooqBinary as(Table<?> alias) {
        return new JooqBinary(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBinary rename(String name) {
        return new JooqBinary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBinary rename(Name name) {
        return new JooqBinary(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBinary rename(Table<?> name) {
        return new JooqBinary(name.getQualifiedName(), null);
    }
}
