/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.converter.JsonObjectConverter;
import io.metaloom.loom.db.jooq.tables.records.JooqBlacklistRecord;
import io.vertx.core.json.JsonObject;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Stores information on blocked binaries.
 * A asset can be blocked due to copyright claim issues or because the virus
 * scanner marked it.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqBlacklist extends TableImpl<JooqBlacklistRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.blacklist</code>
     */
    public static final JooqBlacklist BLACKLIST = new JooqBlacklist();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqBlacklistRecord> getRecordType() {
        return JooqBlacklistRecord.class;
    }

    /**
     * The column <code>public.blacklist.uuid</code>.
     */
    public final TableField<JooqBlacklistRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.blacklist.asset_uuid</code>. Blacklisted asset
     */
    public final TableField<JooqBlacklistRecord, java.util.UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID.nullable(false), this, "Blacklisted asset");

    /**
     * The column <code>public.blacklist.created</code>. Creation timestamp
     */
    public final TableField<JooqBlacklistRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "Creation timestamp");

    /**
     * The column <code>public.blacklist.creator_uuid</code>. Creator of the
     * blacklist entry
     */
    public final TableField<JooqBlacklistRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "Creator of the blacklist entry");

    /**
     * The column <code>public.blacklist.edited</code>.
     */
    public final TableField<JooqBlacklistRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.blacklist.editor_uuid</code>.
     */
    public final TableField<JooqBlacklistRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.blacklist.type</code>. Type of the blacklist
     * entry (e.g. copyright claim)
     */
    public final TableField<JooqBlacklistRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR, this, "Type of the blacklist entry (e.g. copyright claim)");

    /**
     * The column <code>public.blacklist.review_count</code>. Amount of times
     * this blacklist entry has been reviewed.
     */
    public final TableField<JooqBlacklistRecord, Integer> REVIEW_COUNT = createField(DSL.name("review_count"), SQLDataType.INTEGER.defaultValue(DSL.field("1", SQLDataType.INTEGER)), this, "Amount of times this blacklist entry has been reviewed.");

    /**
     * The column <code>public.blacklist.meta</code>. Custom meta properties of
     * the block entry. May contain additional information on the reason.
     */
    public final TableField<JooqBlacklistRecord, JsonObject> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties of the block entry. May contain additional information on the reason.", new JsonObjectConverter());

    private JooqBlacklist(Name alias, Table<JooqBlacklistRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqBlacklist(Name alias, Table<JooqBlacklistRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Stores information on blocked binaries.\nA asset can be blocked due to copyright claim issues or because the virus scanner marked it."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.blacklist</code> table reference
     */
    public JooqBlacklist(String alias) {
        this(DSL.name(alias), BLACKLIST);
    }

    /**
     * Create an aliased <code>public.blacklist</code> table reference
     */
    public JooqBlacklist(Name alias) {
        this(alias, BLACKLIST);
    }

    /**
     * Create a <code>public.blacklist</code> table reference
     */
    public JooqBlacklist() {
        this(DSL.name("blacklist"), null);
    }

    public <O extends Record> JooqBlacklist(Table<O> child, ForeignKey<O, JooqBlacklistRecord> key) {
        super(child, key, BLACKLIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.BLACKLIST_ASSET_UUID_CREATOR_UUID_IDX);
    }

    @Override
    public UniqueKey<JooqBlacklistRecord> getPrimaryKey() {
        return Keys.BLACKLIST_PKEY;
    }

    @Override
    public List<ForeignKey<JooqBlacklistRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BLACKLIST__BLACKLIST_CREATOR_UUID_FKEY, Keys.BLACKLIST__BLACKLIST_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _blacklistCreatorUuidFkey;
    private transient JooqUser _blacklistEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>blacklist_creator_uuid_fkey</code> key.
     */
    public JooqUser blacklistCreatorUuidFkey() {
        if (_blacklistCreatorUuidFkey == null)
            _blacklistCreatorUuidFkey = new JooqUser(this, Keys.BLACKLIST__BLACKLIST_CREATOR_UUID_FKEY);

        return _blacklistCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>blacklist_editor_uuid_fkey</code> key.
     */
    public JooqUser blacklistEditorUuidFkey() {
        if (_blacklistEditorUuidFkey == null)
            _blacklistEditorUuidFkey = new JooqUser(this, Keys.BLACKLIST__BLACKLIST_EDITOR_UUID_FKEY);

        return _blacklistEditorUuidFkey;
    }

    @Override
    public JooqBlacklist as(String alias) {
        return new JooqBlacklist(DSL.name(alias), this);
    }

    @Override
    public JooqBlacklist as(Name alias) {
        return new JooqBlacklist(alias, this);
    }

    @Override
    public JooqBlacklist as(Table<?> alias) {
        return new JooqBlacklist(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBlacklist rename(String name) {
        return new JooqBlacklist(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBlacklist rename(Name name) {
        return new JooqBlacklist(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqBlacklist rename(Table<?> name) {
        return new JooqBlacklist(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<java.util.UUID, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID, String, Integer, JsonObject> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super java.util.UUID, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super String, ? super Integer, ? super JsonObject, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super java.util.UUID, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super String, ? super Integer, ? super JsonObject, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
