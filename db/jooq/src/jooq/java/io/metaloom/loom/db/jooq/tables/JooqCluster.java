/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqClusterRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Generic cluster that aggregates multiple embeddings. 
 * A cluster could for example represent a person which can have multiple face
 * embeddings.
 * Alternatively media fingerprint embeddings can be used to group media
 * together by visual similarity.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqCluster extends TableImpl<JooqClusterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cluster</code>
     */
    public static final JooqCluster CLUSTER = new JooqCluster();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqClusterRecord> getRecordType() {
        return JooqClusterRecord.class;
    }

    /**
     * The column <code>public.cluster.uuid</code>.
     */
    public final TableField<JooqClusterRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.cluster.name</code>. Name of the cluster. (e.g.
     * name of a person)
     */
    public final TableField<JooqClusterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "Name of the cluster. (e.g. name of a person)");

    /**
     * The column <code>public.cluster.meta</code>. Custom meta properties to
     * the embedding.
     */
    public final TableField<JooqClusterRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the embedding.");

    /**
     * The column <code>public.cluster.type</code>. Type of the cluster (e.g.
     * person)
     */
    public final TableField<JooqClusterRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false), this, "Type of the cluster (e.g. person)");

    /**
     * The column <code>public.cluster.created</code>.
     */
    public final TableField<JooqClusterRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.cluster.creator_uuid</code>.
     */
    public final TableField<JooqClusterRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.cluster.edited</code>.
     */
    public final TableField<JooqClusterRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.cluster.editor_uuid</code>.
     */
    public final TableField<JooqClusterRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private JooqCluster(Name alias, Table<JooqClusterRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqCluster(Name alias, Table<JooqClusterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Generic cluster that aggregates multiple embeddings. \nA cluster could for example represent a person which can have multiple face embeddings.\nAlternatively media fingerprint embeddings can be used to group media together by visual similarity."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cluster</code> table reference
     */
    public JooqCluster(String alias) {
        this(DSL.name(alias), CLUSTER);
    }

    /**
     * Create an aliased <code>public.cluster</code> table reference
     */
    public JooqCluster(Name alias) {
        this(alias, CLUSTER);
    }

    /**
     * Create a <code>public.cluster</code> table reference
     */
    public JooqCluster() {
        this(DSL.name("cluster"), null);
    }

    public <O extends Record> JooqCluster(Table<O> child, ForeignKey<O, JooqClusterRecord> key) {
        super(child, key, CLUSTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.CLUSTER_NAME_IDX);
    }

    @Override
    public UniqueKey<JooqClusterRecord> getPrimaryKey() {
        return Keys.CLUSTER_PKEY;
    }

    @Override
    public List<ForeignKey<JooqClusterRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CLUSTER__CLUSTER_CREATOR_UUID_FKEY, Keys.CLUSTER__CLUSTER_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _clusterCreatorUuidFkey;
    private transient JooqUser _clusterEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>cluster_creator_uuid_fkey</code> key.
     */
    public JooqUser clusterCreatorUuidFkey() {
        if (_clusterCreatorUuidFkey == null)
            _clusterCreatorUuidFkey = new JooqUser(this, Keys.CLUSTER__CLUSTER_CREATOR_UUID_FKEY);

        return _clusterCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>cluster_editor_uuid_fkey</code> key.
     */
    public JooqUser clusterEditorUuidFkey() {
        if (_clusterEditorUuidFkey == null)
            _clusterEditorUuidFkey = new JooqUser(this, Keys.CLUSTER__CLUSTER_EDITOR_UUID_FKEY);

        return _clusterEditorUuidFkey;
    }

    @Override
    public JooqCluster as(String alias) {
        return new JooqCluster(DSL.name(alias), this);
    }

    @Override
    public JooqCluster as(Name alias) {
        return new JooqCluster(alias, this);
    }

    @Override
    public JooqCluster as(Table<?> alias) {
        return new JooqCluster(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqCluster rename(String name) {
        return new JooqCluster(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqCluster rename(Name name) {
        return new JooqCluster(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqCluster rename(Table<?> name) {
        return new JooqCluster(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<java.util.UUID, String, JSONB, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super java.util.UUID, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super java.util.UUID, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
