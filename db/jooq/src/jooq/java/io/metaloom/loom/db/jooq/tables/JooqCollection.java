/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqCollectionRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Collections are used to group assets together.
 *           A collection may be a folder which groups together assets for a
 * project.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqCollection extends TableImpl<JooqCollectionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.collection</code>
     */
    public static final JooqCollection COLLECTION = new JooqCollection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqCollectionRecord> getRecordType() {
        return JooqCollectionRecord.class;
    }

    /**
     * The column <code>public.collection.uuid</code>.
     */
    public final TableField<JooqCollectionRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.collection.name</code>.
     */
    public final TableField<JooqCollectionRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.collection.meta</code>. Custom meta properties
     */
    public final TableField<JooqCollectionRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties");

    /**
     * The column <code>public.collection.description</code>.
     */
    public final TableField<JooqCollectionRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.collection.created</code>.
     */
    public final TableField<JooqCollectionRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.collection.creator_uuid</code>.
     */
    public final TableField<JooqCollectionRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.collection.edited</code>.
     */
    public final TableField<JooqCollectionRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.collection.editor_uuid</code>.
     */
    public final TableField<JooqCollectionRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.collection.parent_collection_uuid</code>.
     */
    public final TableField<JooqCollectionRecord, java.util.UUID> PARENT_COLLECTION_UUID = createField(DSL.name("parent_collection_uuid"), SQLDataType.UUID, this, "");

    private JooqCollection(Name alias, Table<JooqCollectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqCollection(Name alias, Table<JooqCollectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Collections are used to group assets together.\n          A collection may be a folder which groups together assets for a project."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.collection</code> table reference
     */
    public JooqCollection(String alias) {
        this(DSL.name(alias), COLLECTION);
    }

    /**
     * Create an aliased <code>public.collection</code> table reference
     */
    public JooqCollection(Name alias) {
        this(alias, COLLECTION);
    }

    /**
     * Create a <code>public.collection</code> table reference
     */
    public JooqCollection() {
        this(DSL.name("collection"), null);
    }

    public <O extends Record> JooqCollection(Table<O> child, ForeignKey<O, JooqCollectionRecord> key) {
        super(child, key, COLLECTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqCollectionRecord> getPrimaryKey() {
        return Keys.COLLECTION_PKEY;
    }

    @Override
    public List<UniqueKey<JooqCollectionRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.COLLECTION_NAME_KEY);
    }

    @Override
    public List<ForeignKey<JooqCollectionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COLLECTION__COLLECTION_CREATOR_UUID_FKEY, Keys.COLLECTION__COLLECTION_EDITOR_UUID_FKEY, Keys.COLLECTION__COLLECTION_PARENT_COLLECTION_UUID_FKEY, Keys.COLLECTION__COLLECTION_PARENT_COLLECTION_UUID_FKEY1);
    }

    private transient JooqUser _collectionCreatorUuidFkey;
    private transient JooqUser _collectionEditorUuidFkey;
    private transient JooqCollection _collectionParentCollectionUuidFkey;
    private transient JooqCollection _collectionParentCollectionUuidFkey1;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>collection_creator_uuid_fkey</code> key.
     */
    public JooqUser collectionCreatorUuidFkey() {
        if (_collectionCreatorUuidFkey == null)
            _collectionCreatorUuidFkey = new JooqUser(this, Keys.COLLECTION__COLLECTION_CREATOR_UUID_FKEY);

        return _collectionCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>collection_editor_uuid_fkey</code> key.
     */
    public JooqUser collectionEditorUuidFkey() {
        if (_collectionEditorUuidFkey == null)
            _collectionEditorUuidFkey = new JooqUser(this, Keys.COLLECTION__COLLECTION_EDITOR_UUID_FKEY);

        return _collectionEditorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.collection</code> table,
     * via the <code>collection_parent_collection_uuid_fkey</code> key.
     */
    public JooqCollection collectionParentCollectionUuidFkey() {
        if (_collectionParentCollectionUuidFkey == null)
            _collectionParentCollectionUuidFkey = new JooqCollection(this, Keys.COLLECTION__COLLECTION_PARENT_COLLECTION_UUID_FKEY);

        return _collectionParentCollectionUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.collection</code> table,
     * via the <code>collection_parent_collection_uuid_fkey1</code> key.
     */
    public JooqCollection collectionParentCollectionUuidFkey1() {
        if (_collectionParentCollectionUuidFkey1 == null)
            _collectionParentCollectionUuidFkey1 = new JooqCollection(this, Keys.COLLECTION__COLLECTION_PARENT_COLLECTION_UUID_FKEY1);

        return _collectionParentCollectionUuidFkey1;
    }

    @Override
    public JooqCollection as(String alias) {
        return new JooqCollection(DSL.name(alias), this);
    }

    @Override
    public JooqCollection as(Name alias) {
        return new JooqCollection(alias, this);
    }

    @Override
    public JooqCollection as(Table<?> alias) {
        return new JooqCollection(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqCollection rename(String name) {
        return new JooqCollection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqCollection rename(Name name) {
        return new JooqCollection(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqCollection rename(Table<?> name) {
        return new JooqCollection(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<java.util.UUID, String, JSONB, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID, java.util.UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super java.util.UUID, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super java.util.UUID, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
