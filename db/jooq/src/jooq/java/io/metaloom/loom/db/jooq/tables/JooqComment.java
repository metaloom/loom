/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqCommentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function11;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Stores comments on tasks, annotations..
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqComment extends TableImpl<JooqCommentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.comment</code>
     */
    public static final JooqComment COMMENT = new JooqComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqCommentRecord> getRecordType() {
        return JooqCommentRecord.class;
    }

    /**
     * The column <code>public.comment.uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.comment.title</code>. Comment title
     */
    public final TableField<JooqCommentRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR, this, "Comment title");

    /**
     * The column <code>public.comment.text</code>. Comment text
     */
    public final TableField<JooqCommentRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.VARCHAR.nullable(false), this, "Comment text");

    /**
     * The column <code>public.comment.parent_uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> PARENT_UUID = createField(DSL.name("parent_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.comment.created</code>. Creation timestamp
     */
    public final TableField<JooqCommentRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "Creation timestamp");

    /**
     * The column <code>public.comment.creator_uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.comment.edited</code>. Edit timestamp
     */
    public final TableField<JooqCommentRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "Edit timestamp");

    /**
     * The column <code>public.comment.editor_uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.comment.task_uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> TASK_UUID = createField(DSL.name("task_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.comment.asset_uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.comment.annotation_uuid</code>.
     */
    public final TableField<JooqCommentRecord, java.util.UUID> ANNOTATION_UUID = createField(DSL.name("annotation_uuid"), SQLDataType.UUID, this, "");

    private JooqComment(Name alias, Table<JooqCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqComment(Name alias, Table<JooqCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Stores comments on tasks, annotations.."), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public JooqComment(String alias) {
        this(DSL.name(alias), COMMENT);
    }

    /**
     * Create an aliased <code>public.comment</code> table reference
     */
    public JooqComment(Name alias) {
        this(alias, COMMENT);
    }

    /**
     * Create a <code>public.comment</code> table reference
     */
    public JooqComment() {
        this(DSL.name("comment"), null);
    }

    public <O extends Record> JooqComment(Table<O> child, ForeignKey<O, JooqCommentRecord> key) {
        super(child, key, COMMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqCommentRecord> getPrimaryKey() {
        return Keys.COMMENT_PKEY;
    }

    @Override
    public List<ForeignKey<JooqCommentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.COMMENT__COMMENT_PARENT_UUID_FKEY, Keys.COMMENT__COMMENT_CREATOR_UUID_FKEY, Keys.COMMENT__COMMENT_EDITOR_UUID_FKEY, Keys.COMMENT__COMMENT_TASK_UUID_FKEY, Keys.COMMENT__COMMENT_ANNOTATION_UUID_FKEY);
    }

    private transient JooqComment _comment;
    private transient JooqUser _commentCreatorUuidFkey;
    private transient JooqUser _commentEditorUuidFkey;
    private transient JooqTask _task;
    private transient JooqAnnotation _annotation;

    /**
     * Get the implicit join path to the <code>public.comment</code> table.
     */
    public JooqComment comment() {
        if (_comment == null)
            _comment = new JooqComment(this, Keys.COMMENT__COMMENT_PARENT_UUID_FKEY);

        return _comment;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>comment_creator_uuid_fkey</code> key.
     */
    public JooqUser commentCreatorUuidFkey() {
        if (_commentCreatorUuidFkey == null)
            _commentCreatorUuidFkey = new JooqUser(this, Keys.COMMENT__COMMENT_CREATOR_UUID_FKEY);

        return _commentCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>comment_editor_uuid_fkey</code> key.
     */
    public JooqUser commentEditorUuidFkey() {
        if (_commentEditorUuidFkey == null)
            _commentEditorUuidFkey = new JooqUser(this, Keys.COMMENT__COMMENT_EDITOR_UUID_FKEY);

        return _commentEditorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.task</code> table.
     */
    public JooqTask task() {
        if (_task == null)
            _task = new JooqTask(this, Keys.COMMENT__COMMENT_TASK_UUID_FKEY);

        return _task;
    }

    /**
     * Get the implicit join path to the <code>public.annotation</code> table.
     */
    public JooqAnnotation annotation() {
        if (_annotation == null)
            _annotation = new JooqAnnotation(this, Keys.COMMENT__COMMENT_ANNOTATION_UUID_FKEY);

        return _annotation;
    }

    @Override
    public JooqComment as(String alias) {
        return new JooqComment(DSL.name(alias), this);
    }

    @Override
    public JooqComment as(Name alias) {
        return new JooqComment(alias, this);
    }

    @Override
    public JooqComment as(Table<?> alias) {
        return new JooqComment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqComment rename(String name) {
        return new JooqComment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqComment rename(Name name) {
        return new JooqComment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqComment rename(Table<?> name) {
        return new JooqComment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<java.util.UUID, String, String, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID, java.util.UUID, java.util.UUID, java.util.UUID> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function11<? super java.util.UUID, ? super String, ? super String, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super java.util.UUID, ? super java.util.UUID, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function11<? super java.util.UUID, ? super String, ? super String, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super java.util.UUID, ? super java.util.UUID, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
