/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqContentRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqContent extends TableImpl<JooqContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.content</code>
     */
    public static final JooqContent CONTENT = new JooqContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqContentRecord> getRecordType() {
        return JooqContentRecord.class;
    }

    /**
     * The column <code>public.content.uuid</code>.
     */
    public final TableField<JooqContentRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.content.namespace_uuid</code>.
     */
    public final TableField<JooqContentRecord, java.util.UUID> NAMESPACE_UUID = createField(DSL.name("namespace_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.content.parent</code>. Reference to the parent
     * content.
     */
    public final TableField<JooqContentRecord, java.util.UUID> PARENT = createField(DSL.name("parent"), SQLDataType.UUID, this, "Reference to the parent content.");

    /**
     * The column <code>public.content.created</code>.
     */
    public final TableField<JooqContentRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.content.creator_uuid</code>.
     */
    public final TableField<JooqContentRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.content.edited</code>.
     */
    public final TableField<JooqContentRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.content.editor_uuid</code>.
     */
    public final TableField<JooqContentRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.content.meta</code>.
     */
    public final TableField<JooqContentRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.content.model_uuid</code>.
     */
    public final TableField<JooqContentRecord, java.util.UUID> MODEL_UUID = createField(DSL.name("model_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqContent(Name alias, Table<JooqContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqContent(Name alias, Table<JooqContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.content</code> table reference
     */
    public JooqContent(String alias) {
        this(DSL.name(alias), CONTENT);
    }

    /**
     * Create an aliased <code>public.content</code> table reference
     */
    public JooqContent(Name alias) {
        this(alias, CONTENT);
    }

    /**
     * Create a <code>public.content</code> table reference
     */
    public JooqContent() {
        this(DSL.name("content"), null);
    }

    public <O extends Record> JooqContent(Table<O> child, ForeignKey<O, JooqContentRecord> key) {
        super(child, key, CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqContentRecord> getPrimaryKey() {
        return Keys.CONTENT_PKEY;
    }

    @Override
    public List<ForeignKey<JooqContentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CONTENT__CONTENT_NAMESPACE_UUID_FKEY, Keys.CONTENT__CONTENT_PARENT_FKEY, Keys.CONTENT__CONTENT_CREATOR_UUID_FKEY, Keys.CONTENT__CONTENT_MODEL_UUID_FKEY);
    }

    private transient JooqNamespace _namespace;
    private transient JooqContent _content;
    private transient JooqUser _user;
    private transient JooqModel _model;

    /**
     * Get the implicit join path to the <code>public.namespace</code> table.
     */
    public JooqNamespace namespace() {
        if (_namespace == null)
            _namespace = new JooqNamespace(this, Keys.CONTENT__CONTENT_NAMESPACE_UUID_FKEY);

        return _namespace;
    }

    /**
     * Get the implicit join path to the <code>public.content</code> table.
     */
    public JooqContent content() {
        if (_content == null)
            _content = new JooqContent(this, Keys.CONTENT__CONTENT_PARENT_FKEY);

        return _content;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public JooqUser user() {
        if (_user == null)
            _user = new JooqUser(this, Keys.CONTENT__CONTENT_CREATOR_UUID_FKEY);

        return _user;
    }

    /**
     * Get the implicit join path to the <code>public.model</code> table.
     */
    public JooqModel model() {
        if (_model == null)
            _model = new JooqModel(this, Keys.CONTENT__CONTENT_MODEL_UUID_FKEY);

        return _model;
    }

    @Override
    public JooqContent as(String alias) {
        return new JooqContent(DSL.name(alias), this);
    }

    @Override
    public JooqContent as(Name alias) {
        return new JooqContent(alias, this);
    }

    @Override
    public JooqContent as(Table<?> alias) {
        return new JooqContent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqContent rename(String name) {
        return new JooqContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqContent rename(Name name) {
        return new JooqContent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqContent rename(Table<?> name) {
        return new JooqContent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<java.util.UUID, java.util.UUID, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID, JSONB, java.util.UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super java.util.UUID, ? super java.util.UUID, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super JSONB, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super java.util.UUID, ? super java.util.UUID, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? super JSONB, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
