/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.enums.JooqEmbeddingTypes;
import io.metaloom.loom.db.jooq.tables.records.JooqFaceRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Stores embeddings
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqFace extends TableImpl<JooqFaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.face</code>
     */
    public static final JooqFace FACE = new JooqFace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqFaceRecord> getRecordType() {
        return JooqFaceRecord.class;
    }

    /**
     * The column <code>public.face.uuid</code>.
     */
    public final TableField<JooqFaceRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.face.source</code>. Identification of the source
     * media
     */
    public final TableField<JooqFaceRecord, String> SOURCE = createField(DSL.name("source"), SQLDataType.VARCHAR.nullable(false), this, "Identification of the source media");

    /**
     * The column <code>public.face.face_nr</code>. When the source contains
     * more than one face the id can be used to identify them.
     */
    public final TableField<JooqFaceRecord, Integer> FACE_NR = createField(DSL.name("face_nr"), SQLDataType.INTEGER.nullable(false), this, "When the source contains more than one face the id can be used to identify them.");

    /**
     * The column <code>public.face.blob</code>. The actual embedding data
     */
    public final TableField<JooqFaceRecord, byte[]> BLOB = createField(DSL.name("blob"), SQLDataType.BLOB.nullable(false), this, "The actual embedding data");

    /**
     * The column <code>public.face.meta</code>. Custom meta properties to the
     * face
     */
    public final TableField<JooqFaceRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the face");

    /**
     * The column <code>public.face.type</code>.
     */
    public final TableField<JooqFaceRecord, JooqEmbeddingTypes> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.asEnumDataType(io.metaloom.loom.db.jooq.enums.JooqEmbeddingTypes.class), this, "");

    private JooqFace(Name alias, Table<JooqFaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqFace(Name alias, Table<JooqFaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Stores embeddings"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.face</code> table reference
     */
    public JooqFace(String alias) {
        this(DSL.name(alias), FACE);
    }

    /**
     * Create an aliased <code>public.face</code> table reference
     */
    public JooqFace(Name alias) {
        this(alias, FACE);
    }

    /**
     * Create a <code>public.face</code> table reference
     */
    public JooqFace() {
        this(DSL.name("face"), null);
    }

    public <O extends Record> JooqFace(Table<O> child, ForeignKey<O, JooqFaceRecord> key) {
        super(child, key, FACE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqFaceRecord> getPrimaryKey() {
        return Keys.FACE_PKEY;
    }

    @Override
    public List<UniqueKey<JooqFaceRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FACE_SOURCE_KEY);
    }

    @Override
    public JooqFace as(String alias) {
        return new JooqFace(DSL.name(alias), this);
    }

    @Override
    public JooqFace as(Name alias) {
        return new JooqFace(alias, this);
    }

    @Override
    public JooqFace as(Table<?> alias) {
        return new JooqFace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFace rename(String name) {
        return new JooqFace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFace rename(Name name) {
        return new JooqFace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFace rename(Table<?> name) {
        return new JooqFace(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<java.util.UUID, String, Integer, byte[], JSONB, JooqEmbeddingTypes> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super java.util.UUID, ? super String, ? super Integer, ? super byte[], ? super JSONB, ? super JooqEmbeddingTypes, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super java.util.UUID, ? super String, ? super Integer, ? super byte[], ? super JSONB, ? super JooqEmbeddingTypes, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
