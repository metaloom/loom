/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.enums.JooqLoomContentType;
import io.metaloom.loom.db.jooq.tables.records.JooqFieldContentRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Crosstable that tracks all fields for a content
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqFieldContent extends TableImpl<JooqFieldContentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.field_content</code>
     */
    public static final JooqFieldContent FIELD_CONTENT = new JooqFieldContent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqFieldContentRecord> getRecordType() {
        return JooqFieldContentRecord.class;
    }

    /**
     * The column <code>public.field_content.fields_uuid</code>.
     */
    public final TableField<JooqFieldContentRecord, UUID> FIELDS_UUID = createField(DSL.name("fields_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.field_content.content_uuid</code>.
     */
    public final TableField<JooqFieldContentRecord, UUID> CONTENT_UUID = createField(DSL.name("content_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.field_content.webroot_path_info</code>. prefixed
     * with branch
     */
    public final TableField<JooqFieldContentRecord, String> WEBROOT_PATH_INFO = createField(DSL.name("webroot_path_info"), SQLDataType.VARCHAR, this, "prefixed with branch");

    /**
     * The column <code>public.field_content.content_type</code>. D or P for
     * draft and published
     */
    public final TableField<JooqFieldContentRecord, JooqLoomContentType> CONTENT_TYPE = createField(DSL.name("content_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(io.metaloom.loom.db.jooq.enums.JooqLoomContentType.class), this, "D or P for draft and published");

    private JooqFieldContent(Name alias, Table<JooqFieldContentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqFieldContent(Name alias, Table<JooqFieldContentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Crosstable that tracks all fields for a content"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.field_content</code> table reference
     */
    public JooqFieldContent(String alias) {
        this(DSL.name(alias), FIELD_CONTENT);
    }

    /**
     * Create an aliased <code>public.field_content</code> table reference
     */
    public JooqFieldContent(Name alias) {
        this(alias, FIELD_CONTENT);
    }

    /**
     * Create a <code>public.field_content</code> table reference
     */
    public JooqFieldContent() {
        this(DSL.name("field_content"), null);
    }

    public <O extends Record> JooqFieldContent(Table<O> child, ForeignKey<O, JooqFieldContentRecord> key) {
        super(child, key, FIELD_CONTENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FIELD_CONTENT_CONTENT_TYPE_WEBROOT_PATH_INFO_IDX, Indexes.FIELD_CONTENT_CONTENT_UUID_CONTENT_TYPE_IDX);
    }

    @Override
    public List<UniqueKey<JooqFieldContentRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FIELD_CONTENT_WEBROOT_PATH_INFO_KEY);
    }

    @Override
    public List<ForeignKey<JooqFieldContentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FIELD_CONTENT__FIELD_CONTENT_FIELDS_UUID_FKEY, Keys.FIELD_CONTENT__FIELD_CONTENT_CONTENT_UUID_FKEY);
    }

    private transient JooqField _field;
    private transient JooqContent _content;

    /**
     * Get the implicit join path to the <code>public.field</code> table.
     */
    public JooqField field() {
        if (_field == null)
            _field = new JooqField(this, Keys.FIELD_CONTENT__FIELD_CONTENT_FIELDS_UUID_FKEY);

        return _field;
    }

    /**
     * Get the implicit join path to the <code>public.content</code> table.
     */
    public JooqContent content() {
        if (_content == null)
            _content = new JooqContent(this, Keys.FIELD_CONTENT__FIELD_CONTENT_CONTENT_UUID_FKEY);

        return _content;
    }

    @Override
    public JooqFieldContent as(String alias) {
        return new JooqFieldContent(DSL.name(alias), this);
    }

    @Override
    public JooqFieldContent as(Name alias) {
        return new JooqFieldContent(alias, this);
    }

    @Override
    public JooqFieldContent as(Table<?> alias) {
        return new JooqFieldContent(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFieldContent rename(String name) {
        return new JooqFieldContent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFieldContent rename(Name name) {
        return new JooqFieldContent(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFieldContent rename(Table<?> name) {
        return new JooqFieldContent(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, JooqLoomContentType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super UUID, ? super String, ? super JooqLoomContentType, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super UUID, ? super String, ? super JooqLoomContentType, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
