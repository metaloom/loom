/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqFlywaySchemaHistoryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqFlywaySchemaHistory extends TableImpl<JooqFlywaySchemaHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.flyway_schema_history</code>
     */
    public static final JooqFlywaySchemaHistory FLYWAY_SCHEMA_HISTORY = new JooqFlywaySchemaHistory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqFlywaySchemaHistoryRecord> getRecordType() {
        return JooqFlywaySchemaHistoryRecord.class;
    }

    /**
     * The column <code>public.flyway_schema_history.installed_rank</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, Integer> INSTALLED_RANK = createField(DSL.name("installed_rank"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.version</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.flyway_schema_history.description</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.type</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.script</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, String> SCRIPT = createField(DSL.name("script"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.checksum</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, Integer> CHECKSUM = createField(DSL.name("checksum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.flyway_schema_history.installed_by</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, String> INSTALLED_BY = createField(DSL.name("installed_by"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.installed_on</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, LocalDateTime> INSTALLED_ON = createField(DSL.name("installed_on"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.flyway_schema_history.execution_time</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, Integer> EXECUTION_TIME = createField(DSL.name("execution_time"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.flyway_schema_history.success</code>.
     */
    public final TableField<JooqFlywaySchemaHistoryRecord, Boolean> SUCCESS = createField(DSL.name("success"), SQLDataType.BOOLEAN.nullable(false), this, "");

    private JooqFlywaySchemaHistory(Name alias, Table<JooqFlywaySchemaHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqFlywaySchemaHistory(Name alias, Table<JooqFlywaySchemaHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.flyway_schema_history</code> table
     * reference
     */
    public JooqFlywaySchemaHistory(String alias) {
        this(DSL.name(alias), FLYWAY_SCHEMA_HISTORY);
    }

    /**
     * Create an aliased <code>public.flyway_schema_history</code> table
     * reference
     */
    public JooqFlywaySchemaHistory(Name alias) {
        this(alias, FLYWAY_SCHEMA_HISTORY);
    }

    /**
     * Create a <code>public.flyway_schema_history</code> table reference
     */
    public JooqFlywaySchemaHistory() {
        this(DSL.name("flyway_schema_history"), null);
    }

    public <O extends Record> JooqFlywaySchemaHistory(Table<O> child, ForeignKey<O, JooqFlywaySchemaHistoryRecord> key) {
        super(child, key, FLYWAY_SCHEMA_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FLYWAY_SCHEMA_HISTORY_S_IDX);
    }

    @Override
    public UniqueKey<JooqFlywaySchemaHistoryRecord> getPrimaryKey() {
        return Keys.FLYWAY_SCHEMA_HISTORY_PK;
    }

    @Override
    public JooqFlywaySchemaHistory as(String alias) {
        return new JooqFlywaySchemaHistory(DSL.name(alias), this);
    }

    @Override
    public JooqFlywaySchemaHistory as(Name alias) {
        return new JooqFlywaySchemaHistory(alias, this);
    }

    @Override
    public JooqFlywaySchemaHistory as(Table<?> alias) {
        return new JooqFlywaySchemaHistory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFlywaySchemaHistory rename(String name) {
        return new JooqFlywaySchemaHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFlywaySchemaHistory rename(Name name) {
        return new JooqFlywaySchemaHistory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqFlywaySchemaHistory rename(Table<?> name) {
        return new JooqFlywaySchemaHistory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, Integer, String, LocalDateTime, Integer, Boolean> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
