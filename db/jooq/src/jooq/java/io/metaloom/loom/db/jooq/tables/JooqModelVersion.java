/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqModelVersionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqModelVersion extends TableImpl<JooqModelVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.model_version</code>
     */
    public static final JooqModelVersion MODEL_VERSION = new JooqModelVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqModelVersionRecord> getRecordType() {
        return JooqModelVersionRecord.class;
    }

    /**
     * The column <code>public.model_version.uuid</code>.
     */
    public final TableField<JooqModelVersionRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.model_version.model_uuid</code>.
     */
    public final TableField<JooqModelVersionRecord, java.util.UUID> MODEL_UUID = createField(DSL.name("model_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.model_version.json</code>.
     */
    public final TableField<JooqModelVersionRecord, String> JSON = createField(DSL.name("json"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.model_version.next_version_uuid</code>.
     */
    public final TableField<JooqModelVersionRecord, java.util.UUID> NEXT_VERSION_UUID = createField(DSL.name("next_version_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.model_version.prev_version_uuid</code>.
     */
    public final TableField<JooqModelVersionRecord, java.util.UUID> PREV_VERSION_UUID = createField(DSL.name("prev_version_uuid"), SQLDataType.UUID, this, "");

    private JooqModelVersion(Name alias, Table<JooqModelVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqModelVersion(Name alias, Table<JooqModelVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.model_version</code> table reference
     */
    public JooqModelVersion(String alias) {
        this(DSL.name(alias), MODEL_VERSION);
    }

    /**
     * Create an aliased <code>public.model_version</code> table reference
     */
    public JooqModelVersion(Name alias) {
        this(alias, MODEL_VERSION);
    }

    /**
     * Create a <code>public.model_version</code> table reference
     */
    public JooqModelVersion() {
        this(DSL.name("model_version"), null);
    }

    public <O extends Record> JooqModelVersion(Table<O> child, ForeignKey<O, JooqModelVersionRecord> key) {
        super(child, key, MODEL_VERSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqModelVersionRecord> getPrimaryKey() {
        return Keys.MODEL_VERSION_PKEY;
    }

    @Override
    public List<ForeignKey<JooqModelVersionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODEL_VERSION__MODEL_VERSION_MODEL_UUID_FKEY, Keys.MODEL_VERSION__MODEL_VERSION_NEXT_VERSION_UUID_FKEY, Keys.MODEL_VERSION__MODEL_VERSION_PREV_VERSION_UUID_FKEY);
    }

    private transient JooqModel _model;
    private transient JooqModelVersion _modelVersionNextVersionUuidFkey;
    private transient JooqModelVersion _modelVersionPrevVersionUuidFkey;

    /**
     * Get the implicit join path to the <code>public.model</code> table.
     */
    public JooqModel model() {
        if (_model == null)
            _model = new JooqModel(this, Keys.MODEL_VERSION__MODEL_VERSION_MODEL_UUID_FKEY);

        return _model;
    }

    /**
     * Get the implicit join path to the <code>public.model_version</code>
     * table, via the <code>model_version_next_version_uuid_fkey</code> key.
     */
    public JooqModelVersion modelVersionNextVersionUuidFkey() {
        if (_modelVersionNextVersionUuidFkey == null)
            _modelVersionNextVersionUuidFkey = new JooqModelVersion(this, Keys.MODEL_VERSION__MODEL_VERSION_NEXT_VERSION_UUID_FKEY);

        return _modelVersionNextVersionUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.model_version</code>
     * table, via the <code>model_version_prev_version_uuid_fkey</code> key.
     */
    public JooqModelVersion modelVersionPrevVersionUuidFkey() {
        if (_modelVersionPrevVersionUuidFkey == null)
            _modelVersionPrevVersionUuidFkey = new JooqModelVersion(this, Keys.MODEL_VERSION__MODEL_VERSION_PREV_VERSION_UUID_FKEY);

        return _modelVersionPrevVersionUuidFkey;
    }

    @Override
    public JooqModelVersion as(String alias) {
        return new JooqModelVersion(DSL.name(alias), this);
    }

    @Override
    public JooqModelVersion as(Name alias) {
        return new JooqModelVersion(alias, this);
    }

    @Override
    public JooqModelVersion as(Table<?> alias) {
        return new JooqModelVersion(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqModelVersion rename(String name) {
        return new JooqModelVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqModelVersion rename(Name name) {
        return new JooqModelVersion(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqModelVersion rename(Table<?> name) {
        return new JooqModelVersion(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<java.util.UUID, java.util.UUID, String, java.util.UUID, java.util.UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super java.util.UUID, ? super java.util.UUID, ? super String, ? super java.util.UUID, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super java.util.UUID, ? super java.util.UUID, ? super String, ? super java.util.UUID, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
