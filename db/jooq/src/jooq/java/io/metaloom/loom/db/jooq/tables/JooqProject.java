/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqProjectRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqProject extends TableImpl<JooqProjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.project</code>
     */
    public static final JooqProject PROJECT = new JooqProject();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqProjectRecord> getRecordType() {
        return JooqProjectRecord.class;
    }

    /**
     * The column <code>public.project.uuid</code>.
     */
    public final TableField<JooqProjectRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.project.name</code>.
     */
    public final TableField<JooqProjectRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.project.meta</code>. Custom meta properties to
     * the element
     */
    public final TableField<JooqProjectRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    /**
     * The column <code>public.project.description</code>.
     */
    public final TableField<JooqProjectRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.project.created</code>.
     */
    public final TableField<JooqProjectRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.project.creator_uuid</code>.
     */
    public final TableField<JooqProjectRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.project.edited</code>.
     */
    public final TableField<JooqProjectRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.project.editor_uuid</code>.
     */
    public final TableField<JooqProjectRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private JooqProject(Name alias, Table<JooqProjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqProject(Name alias, Table<JooqProjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.project</code> table reference
     */
    public JooqProject(String alias) {
        this(DSL.name(alias), PROJECT);
    }

    /**
     * Create an aliased <code>public.project</code> table reference
     */
    public JooqProject(Name alias) {
        this(alias, PROJECT);
    }

    /**
     * Create a <code>public.project</code> table reference
     */
    public JooqProject() {
        this(DSL.name("project"), null);
    }

    public <O extends Record> JooqProject(Table<O> child, ForeignKey<O, JooqProjectRecord> key) {
        super(child, key, PROJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqProjectRecord> getPrimaryKey() {
        return Keys.PROJECT_PKEY;
    }

    @Override
    public List<ForeignKey<JooqProjectRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PROJECT__PROJECT_CREATOR_UUID_FKEY, Keys.PROJECT__PROJECT_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _projectCreatorUuidFkey;
    private transient JooqUser _projectEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>project_creator_uuid_fkey</code> key.
     */
    public JooqUser projectCreatorUuidFkey() {
        if (_projectCreatorUuidFkey == null)
            _projectCreatorUuidFkey = new JooqUser(this, Keys.PROJECT__PROJECT_CREATOR_UUID_FKEY);

        return _projectCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>project_editor_uuid_fkey</code> key.
     */
    public JooqUser projectEditorUuidFkey() {
        if (_projectEditorUuidFkey == null)
            _projectEditorUuidFkey = new JooqUser(this, Keys.PROJECT__PROJECT_EDITOR_UUID_FKEY);

        return _projectEditorUuidFkey;
    }

    @Override
    public JooqProject as(String alias) {
        return new JooqProject(DSL.name(alias), this);
    }

    @Override
    public JooqProject as(Name alias) {
        return new JooqProject(alias, this);
    }

    @Override
    public JooqProject as(Table<?> alias) {
        return new JooqProject(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqProject rename(String name) {
        return new JooqProject(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqProject rename(Name name) {
        return new JooqProject(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqProject rename(Table<?> name) {
        return new JooqProject(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<java.util.UUID, String, JSONB, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super java.util.UUID, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super java.util.UUID, ? super String, ? super JSONB, ? super String, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
