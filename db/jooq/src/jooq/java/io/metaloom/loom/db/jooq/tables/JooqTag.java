/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.converter.JsonObjectConverter;
import io.metaloom.loom.db.jooq.tables.records.JooqTagRecord;
import io.vertx.core.json.JsonObject;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Tag on various elements. Tags are not user specifc
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTag extends TableImpl<JooqTagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag</code>
     */
    public static final JooqTag TAG = new JooqTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqTagRecord> getRecordType() {
        return JooqTagRecord.class;
    }

    /**
     * The column <code>public.tag.uuid</code>.
     */
    public final TableField<JooqTagRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tag.name</code>.
     */
    public final TableField<JooqTagRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tag.collection</code>.
     */
    public final TableField<JooqTagRecord, String> COLLECTION = createField(DSL.name("collection"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tag.meta</code>. Custom meta properties to the
     * element
     */
    public final TableField<JooqTagRecord, JsonObject> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element", new JsonObjectConverter());

    /**
     * The column <code>public.tag.rating</code>. Absolute or
     * buffered/precomputed rating information
     */
    public final TableField<JooqTagRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER, this, "Absolute or buffered/precomputed rating information");

    /**
     * The column <code>public.tag.created</code>.
     */
    public final TableField<JooqTagRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tag.creator_uuid</code>.
     */
    public final TableField<JooqTagRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tag.edited</code>.
     */
    public final TableField<JooqTagRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tag.editor_uuid</code>.
     */
    public final TableField<JooqTagRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private JooqTag(Name alias, Table<JooqTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqTag(Name alias, Table<JooqTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Tag on various elements. Tags are not user specifc"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag</code> table reference
     */
    public JooqTag(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>public.tag</code> table reference
     */
    public JooqTag(Name alias) {
        this(alias, TAG);
    }

    /**
     * Create a <code>public.tag</code> table reference
     */
    public JooqTag() {
        this(DSL.name("tag"), null);
    }

    public <O extends Record> JooqTag(Table<O> child, ForeignKey<O, JooqTagRecord> key) {
        super(child, key, TAG);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TAG_NAME_COLLECTION_IDX);
    }

    @Override
    public UniqueKey<JooqTagRecord> getPrimaryKey() {
        return Keys.TAG_PKEY;
    }

    @Override
    public List<ForeignKey<JooqTagRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG__TAG_CREATOR_UUID_FKEY, Keys.TAG__TAG_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _tagCreatorUuidFkey;
    private transient JooqUser _tagEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>tag_creator_uuid_fkey</code> key.
     */
    public JooqUser tagCreatorUuidFkey() {
        if (_tagCreatorUuidFkey == null)
            _tagCreatorUuidFkey = new JooqUser(this, Keys.TAG__TAG_CREATOR_UUID_FKEY);

        return _tagCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>tag_editor_uuid_fkey</code> key.
     */
    public JooqUser tagEditorUuidFkey() {
        if (_tagEditorUuidFkey == null)
            _tagEditorUuidFkey = new JooqUser(this, Keys.TAG__TAG_EDITOR_UUID_FKEY);

        return _tagEditorUuidFkey;
    }

    @Override
    public JooqTag as(String alias) {
        return new JooqTag(DSL.name(alias), this);
    }

    @Override
    public JooqTag as(Name alias) {
        return new JooqTag(alias, this);
    }

    @Override
    public JooqTag as(Table<?> alias) {
        return new JooqTag(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTag rename(String name) {
        return new JooqTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTag rename(Name name) {
        return new JooqTag(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTag rename(Table<?> name) {
        return new JooqTag(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<java.util.UUID, String, String, JsonObject, Integer, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super java.util.UUID, ? super String, ? super String, ? super JsonObject, ? super Integer, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super java.util.UUID, ? super String, ? super String, ? super JsonObject, ? super Integer, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
