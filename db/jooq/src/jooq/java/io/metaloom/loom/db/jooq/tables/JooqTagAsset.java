/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqTagAssetRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Store tag &lt;-&gt; asset reference
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTagAsset extends TableImpl<JooqTagAssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag_asset</code>
     */
    public static final JooqTagAsset TAG_ASSET = new JooqTagAsset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqTagAssetRecord> getRecordType() {
        return JooqTagAssetRecord.class;
    }

    /**
     * The column <code>public.tag_asset.tag_uuid</code>.
     */
    public final TableField<JooqTagAssetRecord, UUID> TAG_UUID = createField(DSL.name("tag_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tag_asset.asset_uuid</code>.
     */
    public final TableField<JooqTagAssetRecord, UUID> ASSET_UUID = createField(DSL.name("asset_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tag_asset.time_from</code>.
     */
    public final TableField<JooqTagAssetRecord, Integer> TIME_FROM = createField(DSL.name("time_from"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tag_asset.time_to</code>.
     */
    public final TableField<JooqTagAssetRecord, Integer> TIME_TO = createField(DSL.name("time_to"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tag_asset.areaStartX</code>.
     */
    public final TableField<JooqTagAssetRecord, Integer> AREASTARTX = createField(DSL.name("areaStartX"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tag_asset.areaStartY</code>.
     */
    public final TableField<JooqTagAssetRecord, Integer> AREASTARTY = createField(DSL.name("areaStartY"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tag_asset.areaWidth</code>.
     */
    public final TableField<JooqTagAssetRecord, Integer> AREAWIDTH = createField(DSL.name("areaWidth"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.tag_asset.areaHeight</code>.
     */
    public final TableField<JooqTagAssetRecord, Integer> AREAHEIGHT = createField(DSL.name("areaHeight"), SQLDataType.INTEGER, this, "");

    private JooqTagAsset(Name alias, Table<JooqTagAssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqTagAsset(Name alias, Table<JooqTagAssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Store tag <-> asset reference"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag_asset</code> table reference
     */
    public JooqTagAsset(String alias) {
        this(DSL.name(alias), TAG_ASSET);
    }

    /**
     * Create an aliased <code>public.tag_asset</code> table reference
     */
    public JooqTagAsset(Name alias) {
        this(alias, TAG_ASSET);
    }

    /**
     * Create a <code>public.tag_asset</code> table reference
     */
    public JooqTagAsset() {
        this(DSL.name("tag_asset"), null);
    }

    public <O extends Record> JooqTagAsset(Table<O> child, ForeignKey<O, JooqTagAssetRecord> key) {
        super(child, key, TAG_ASSET);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqTagAssetRecord> getPrimaryKey() {
        return Keys.TAG_ASSET_PKEY;
    }

    @Override
    public List<ForeignKey<JooqTagAssetRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAG_ASSET__TAG_ASSET_TAG_UUID_FKEY);
    }

    private transient JooqTag _tag;

    /**
     * Get the implicit join path to the <code>public.tag</code> table.
     */
    public JooqTag tag() {
        if (_tag == null)
            _tag = new JooqTag(this, Keys.TAG_ASSET__TAG_ASSET_TAG_UUID_FKEY);

        return _tag;
    }

    @Override
    public JooqTagAsset as(String alias) {
        return new JooqTagAsset(DSL.name(alias), this);
    }

    @Override
    public JooqTagAsset as(Name alias) {
        return new JooqTagAsset(alias, this);
    }

    @Override
    public JooqTagAsset as(Table<?> alias) {
        return new JooqTagAsset(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTagAsset rename(String name) {
        return new JooqTagAsset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTagAsset rename(Name name) {
        return new JooqTagAsset(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTagAsset rename(Table<?> name) {
        return new JooqTagAsset(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super UUID, ? super UUID, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super UUID, ? super UUID, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
