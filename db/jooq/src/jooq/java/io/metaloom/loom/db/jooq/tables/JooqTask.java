/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.enums.JooqTaskStatus;
import io.metaloom.loom.db.jooq.tables.records.JooqTaskRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function10;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTask extends TableImpl<JooqTaskRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.task</code>
     */
    public static final JooqTask TASK = new JooqTask();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqTaskRecord> getRecordType() {
        return JooqTaskRecord.class;
    }

    /**
     * The column <code>public.task.uuid</code>.
     */
    public final TableField<JooqTaskRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.task.title</code>. Title of the task
     */
    public final TableField<JooqTaskRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR.nullable(false), this, "Title of the task");

    /**
     * The column <code>public.task.content</code>. Description of the task
     */
    public final TableField<JooqTaskRecord, String> CONTENT = createField(DSL.name("content"), SQLDataType.VARCHAR, this, "Description of the task");

    /**
     * The column <code>public.task.due_date</code>.
     */
    public final TableField<JooqTaskRecord, LocalDateTime> DUE_DATE = createField(DSL.name("due_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.task.status</code>. Current status of the task
     * (e.g. PENDING, REJECTED)
     */
    public final TableField<JooqTaskRecord, JooqTaskStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR.defaultValue(DSL.field("'PENDING'::task_status", SQLDataType.VARCHAR)).asEnumDataType(io.metaloom.loom.db.jooq.enums.JooqTaskStatus.class), this, "Current status of the task (e.g. PENDING, REJECTED)");

    /**
     * The column <code>public.task.priority</code>.
     */
    public final TableField<JooqTaskRecord, Integer> PRIORITY = createField(DSL.name("priority"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.task.created</code>.
     */
    public final TableField<JooqTaskRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.task.creator_uuid</code>.
     */
    public final TableField<JooqTaskRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.task.edited</code>.
     */
    public final TableField<JooqTaskRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.task.editor_uuid</code>.
     */
    public final TableField<JooqTaskRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private JooqTask(Name alias, Table<JooqTaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqTask(Name alias, Table<JooqTaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.task</code> table reference
     */
    public JooqTask(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>public.task</code> table reference
     */
    public JooqTask(Name alias) {
        this(alias, TASK);
    }

    /**
     * Create a <code>public.task</code> table reference
     */
    public JooqTask() {
        this(DSL.name("task"), null);
    }

    public <O extends Record> JooqTask(Table<O> child, ForeignKey<O, JooqTaskRecord> key) {
        super(child, key, TASK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public UniqueKey<JooqTaskRecord> getPrimaryKey() {
        return Keys.TASK_PKEY;
    }

    @Override
    public List<ForeignKey<JooqTaskRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TASK__TASK_CREATOR_UUID_FKEY, Keys.TASK__TASK_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _taskCreatorUuidFkey;
    private transient JooqUser _taskEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>task_creator_uuid_fkey</code> key.
     */
    public JooqUser taskCreatorUuidFkey() {
        if (_taskCreatorUuidFkey == null)
            _taskCreatorUuidFkey = new JooqUser(this, Keys.TASK__TASK_CREATOR_UUID_FKEY);

        return _taskCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>task_editor_uuid_fkey</code> key.
     */
    public JooqUser taskEditorUuidFkey() {
        if (_taskEditorUuidFkey == null)
            _taskEditorUuidFkey = new JooqUser(this, Keys.TASK__TASK_EDITOR_UUID_FKEY);

        return _taskEditorUuidFkey;
    }

    @Override
    public JooqTask as(String alias) {
        return new JooqTask(DSL.name(alias), this);
    }

    @Override
    public JooqTask as(Name alias) {
        return new JooqTask(alias, this);
    }

    @Override
    public JooqTask as(Table<?> alias) {
        return new JooqTask(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTask rename(String name) {
        return new JooqTask(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTask rename(Name name) {
        return new JooqTask(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqTask rename(Table<?> name) {
        return new JooqTask(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<java.util.UUID, String, String, LocalDateTime, JooqTaskStatus, Integer, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function10<? super java.util.UUID, ? super String, ? super String, ? super LocalDateTime, ? super JooqTaskStatus, ? super Integer, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function10<? super java.util.UUID, ? super String, ? super String, ? super LocalDateTime, ? super JooqTaskStatus, ? super Integer, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
