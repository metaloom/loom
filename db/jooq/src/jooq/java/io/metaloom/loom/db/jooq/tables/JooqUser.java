/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.JooqPublic;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.tables.records.JooqUserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqUser extends TableImpl<JooqUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user</code>
     */
    public static final JooqUser USER = new JooqUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JooqUserRecord> getRecordType() {
        return JooqUserRecord.class;
    }

    /**
     * The column <code>public.user.uuid</code>.
     */
    public final TableField<JooqUserRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user.username</code>.
     */
    public final TableField<JooqUserRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.user.firstname</code>.
     */
    public final TableField<JooqUserRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.lastname</code>.
     */
    public final TableField<JooqUserRecord, String> LASTNAME = createField(DSL.name("lastname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.email</code>.
     */
    public final TableField<JooqUserRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.enabled</code>. Flag to enable or disable
     * the user.
     */
    public final TableField<JooqUserRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "Flag to enable or disable the user.");

    /**
     * The column <code>public.user.sso</code>. Flag that indicates that the
     * user was created via SSO mappings
     */
    public final TableField<JooqUserRecord, Boolean> SSO = createField(DSL.name("sso"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "Flag that indicates that the user was created via SSO mappings");

    /**
     * The column <code>public.user.password_hash</code>.
     */
    public final TableField<JooqUserRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user.meta</code>. Custom meta properties to the
     * element
     */
    public final TableField<JooqUserRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    /**
     * The column <code>public.user.created</code>.
     */
    public final TableField<JooqUserRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user.creator_uuid</code>.
     */
    public final TableField<JooqUserRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user.edited</code>.
     */
    public final TableField<JooqUserRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.user.editor_uuid</code>.
     */
    public final TableField<JooqUserRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private JooqUser(Name alias, Table<JooqUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private JooqUser(Name alias, Table<JooqUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public JooqUser(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>public.user</code> table reference
     */
    public JooqUser(Name alias) {
        this(alias, USER);
    }

    /**
     * Create a <code>public.user</code> table reference
     */
    public JooqUser() {
        this(DSL.name("user"), null);
    }

    public <O extends Record> JooqUser(Table<O> child, ForeignKey<O, JooqUserRecord> key) {
        super(child, key, USER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JooqPublic.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_USERNAME_IDX);
    }

    @Override
    public UniqueKey<JooqUserRecord> getPrimaryKey() {
        return Keys.USER_PKEY;
    }

    @Override
    public List<UniqueKey<JooqUserRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_USERNAME_KEY);
    }

    @Override
    public List<ForeignKey<JooqUserRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER__USER_CREATOR_UUID_FKEY, Keys.USER__USER_EDITOR_UUID_FKEY);
    }

    private transient JooqUser _userCreatorUuidFkey;
    private transient JooqUser _userEditorUuidFkey;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>user_creator_uuid_fkey</code> key.
     */
    public JooqUser userCreatorUuidFkey() {
        if (_userCreatorUuidFkey == null)
            _userCreatorUuidFkey = new JooqUser(this, Keys.USER__USER_CREATOR_UUID_FKEY);

        return _userCreatorUuidFkey;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>user_editor_uuid_fkey</code> key.
     */
    public JooqUser userEditorUuidFkey() {
        if (_userEditorUuidFkey == null)
            _userEditorUuidFkey = new JooqUser(this, Keys.USER__USER_EDITOR_UUID_FKEY);

        return _userEditorUuidFkey;
    }

    @Override
    public JooqUser as(String alias) {
        return new JooqUser(DSL.name(alias), this);
    }

    @Override
    public JooqUser as(Name alias) {
        return new JooqUser(alias, this);
    }

    @Override
    public JooqUser as(Table<?> alias) {
        return new JooqUser(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqUser rename(String name) {
        return new JooqUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqUser rename(Name name) {
        return new JooqUser(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JooqUser rename(Table<?> name) {
        return new JooqUser(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<java.util.UUID, String, String, String, String, Boolean, Boolean, String, JSONB, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super java.util.UUID, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super JSONB, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super java.util.UUID, ? super String, ? super String, ? super String, ? super String, ? super Boolean, ? super Boolean, ? super String, ? super JSONB, ? super LocalDateTime, ? super java.util.UUID, ? super LocalDateTime, ? super java.util.UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
