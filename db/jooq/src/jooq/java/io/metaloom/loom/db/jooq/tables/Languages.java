/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.LanguagesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Table which stores the languages for loom
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Languages extends TableImpl<LanguagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.languages</code>
     */
    public static final Languages LANGUAGES = new Languages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LanguagesRecord> getRecordType() {
        return LanguagesRecord.class;
    }

    /**
     * The column <code>public.languages.uuid</code>.
     */
    public final TableField<LanguagesRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.languages.native_name</code>.
     */
    public final TableField<LanguagesRecord, String> NATIVE_NAME = createField(DSL.name("native_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.languages.tags</code>.
     */
    public final TableField<LanguagesRecord, String> TAGS = createField(DSL.name("tags"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.languages.meta</code>. Custom meta properties to
     * the element
     */
    public final TableField<LanguagesRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    private Languages(Name alias, Table<LanguagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Languages(Name alias, Table<LanguagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Table which stores the languages for loom"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.languages</code> table reference
     */
    public Languages(String alias) {
        this(DSL.name(alias), LANGUAGES);
    }

    /**
     * Create an aliased <code>public.languages</code> table reference
     */
    public Languages(Name alias) {
        this(alias, LANGUAGES);
    }

    /**
     * Create a <code>public.languages</code> table reference
     */
    public Languages() {
        this(DSL.name("languages"), null);
    }

    public <O extends Record> Languages(Table<O> child, ForeignKey<O, LanguagesRecord> key) {
        super(child, key, LANGUAGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.LANGUAGES_TAGS_IDX);
    }

    @Override
    public UniqueKey<LanguagesRecord> getPrimaryKey() {
        return Keys.LANGUAGES_PKEY;
    }

    @Override
    public List<UniqueKey<LanguagesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LANGUAGES_TAGS_KEY);
    }

    @Override
    public Languages as(String alias) {
        return new Languages(DSL.name(alias), this);
    }

    @Override
    public Languages as(Name alias) {
        return new Languages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(String name) {
        return new Languages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Languages rename(Name name) {
        return new Languages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<java.util.UUID, String, String, JSONB> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
