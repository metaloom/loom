/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.ModelVersionRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelVersion extends TableImpl<ModelVersionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.model_version</code>
     */
    public static final ModelVersion MODEL_VERSION = new ModelVersion();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelVersionRecord> getRecordType() {
        return ModelVersionRecord.class;
    }

    /**
     * The column <code>public.model_version.uuid</code>.
     */
    public final TableField<ModelVersionRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.model_version.model_uuid</code>.
     */
    public final TableField<ModelVersionRecord, java.util.UUID> MODEL_UUID = createField(DSL.name("model_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.model_version.json</code>.
     */
    public final TableField<ModelVersionRecord, String> JSON = createField(DSL.name("json"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.model_version.next_version_uuid</code>.
     */
    public final TableField<ModelVersionRecord, java.util.UUID> NEXT_VERSION_UUID = createField(DSL.name("next_version_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.model_version.prev_version_uuid</code>.
     */
    public final TableField<ModelVersionRecord, java.util.UUID> PREV_VERSION_UUID = createField(DSL.name("prev_version_uuid"), SQLDataType.UUID, this, "");

    private ModelVersion(Name alias, Table<ModelVersionRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelVersion(Name alias, Table<ModelVersionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.model_version</code> table reference
     */
    public ModelVersion(String alias) {
        this(DSL.name(alias), MODEL_VERSION);
    }

    /**
     * Create an aliased <code>public.model_version</code> table reference
     */
    public ModelVersion(Name alias) {
        this(alias, MODEL_VERSION);
    }

    /**
     * Create a <code>public.model_version</code> table reference
     */
    public ModelVersion() {
        this(DSL.name("model_version"), null);
    }

    public <O extends Record> ModelVersion(Table<O> child, ForeignKey<O, ModelVersionRecord> key) {
        super(child, key, MODEL_VERSION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ModelVersionRecord> getPrimaryKey() {
        return Keys.MODEL_VERSION_PKEY;
    }

    @Override
    public List<UniqueKey<ModelVersionRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelVersionRecord>>asList(Keys.MODEL_VERSION_PKEY);
    }

    @Override
    public List<ForeignKey<ModelVersionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelVersionRecord, ?>>asList(Keys.MODEL_VERSION__MODEL_VERSION_MODEL_UUID_FKEY, Keys.MODEL_VERSION__MODEL_VERSION_NEXT_VERSION_UUID_FKEY, Keys.MODEL_VERSION__MODEL_VERSION_PREV_VERSION_UUID_FKEY);
    }

    private transient Model _model;
    private transient ModelVersion _modelVersionNextVersionUuidFkey;
    private transient ModelVersion _modelVersionPrevVersionUuidFkey;

    public Model model() {
        if (_model == null)
            _model = new Model(this, Keys.MODEL_VERSION__MODEL_VERSION_MODEL_UUID_FKEY);

        return _model;
    }

    public ModelVersion modelVersionNextVersionUuidFkey() {
        if (_modelVersionNextVersionUuidFkey == null)
            _modelVersionNextVersionUuidFkey = new ModelVersion(this, Keys.MODEL_VERSION__MODEL_VERSION_NEXT_VERSION_UUID_FKEY);

        return _modelVersionNextVersionUuidFkey;
    }

    public ModelVersion modelVersionPrevVersionUuidFkey() {
        if (_modelVersionPrevVersionUuidFkey == null)
            _modelVersionPrevVersionUuidFkey = new ModelVersion(this, Keys.MODEL_VERSION__MODEL_VERSION_PREV_VERSION_UUID_FKEY);

        return _modelVersionPrevVersionUuidFkey;
    }

    @Override
    public ModelVersion as(String alias) {
        return new ModelVersion(DSL.name(alias), this);
    }

    @Override
    public ModelVersion as(Name alias) {
        return new ModelVersion(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelVersion rename(String name) {
        return new ModelVersion(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelVersion rename(Name name) {
        return new ModelVersion(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<java.util.UUID, java.util.UUID, String, java.util.UUID, java.util.UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
