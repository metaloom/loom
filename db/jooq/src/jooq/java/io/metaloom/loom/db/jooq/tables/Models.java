/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.ModelsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Models extends TableImpl<ModelsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.models</code>
     */
    public static final Models MODELS = new Models();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelsRecord> getRecordType() {
        return ModelsRecord.class;
    }

    /**
     * The column <code>public.models.uuid</code>.
     */
    public final TableField<ModelsRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.models.name</code>. Human readable name of the
     * content model
     */
    public final TableField<ModelsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "Human readable name of the content model");

    /**
     * The column <code>public.models.latest_version_uuid</code>.
     */
    public final TableField<ModelsRecord, java.util.UUID> LATEST_VERSION_UUID = createField(DSL.name("latest_version_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.models.created</code>.
     */
    public final TableField<ModelsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.models.creator_uuid</code>.
     */
    public final TableField<ModelsRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.models.edited</code>.
     */
    public final TableField<ModelsRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.models.editor_uuid</code>.
     */
    public final TableField<ModelsRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Models(Name alias, Table<ModelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Models(Name alias, Table<ModelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.models</code> table reference
     */
    public Models(String alias) {
        this(DSL.name(alias), MODELS);
    }

    /**
     * Create an aliased <code>public.models</code> table reference
     */
    public Models(Name alias) {
        this(alias, MODELS);
    }

    /**
     * Create a <code>public.models</code> table reference
     */
    public Models() {
        this(DSL.name("models"), null);
    }

    public <O extends Record> Models(Table<O> child, ForeignKey<O, ModelsRecord> key) {
        super(child, key, MODELS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.MODELS_NAME_IDX);
    }

    @Override
    public UniqueKey<ModelsRecord> getPrimaryKey() {
        return Keys.MODELS_PKEY;
    }

    @Override
    public List<UniqueKey<ModelsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.MODELS_NAME_KEY);
    }

    @Override
    public List<ForeignKey<ModelsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MODELS__MODELS_LATEST_VERSION_UUID_FKEY, Keys.MODELS__MODELS_CREATOR_UUID_FKEY, Keys.MODELS__MODELS_EDITOR_UUID_FKEY);
    }

    private transient ModelVersion _modelVersion;
    private transient Users _modelsCreatorUuidFkey;
    private transient Users _modelsEditorUuidFkey;

    public ModelVersion modelVersion() {
        if (_modelVersion == null)
            _modelVersion = new ModelVersion(this, Keys.MODELS__MODELS_LATEST_VERSION_UUID_FKEY);

        return _modelVersion;
    }

    public Users modelsCreatorUuidFkey() {
        if (_modelsCreatorUuidFkey == null)
            _modelsCreatorUuidFkey = new Users(this, Keys.MODELS__MODELS_CREATOR_UUID_FKEY);

        return _modelsCreatorUuidFkey;
    }

    public Users modelsEditorUuidFkey() {
        if (_modelsEditorUuidFkey == null)
            _modelsEditorUuidFkey = new Users(this, Keys.MODELS__MODELS_EDITOR_UUID_FKEY);

        return _modelsEditorUuidFkey;
    }

    @Override
    public Models as(String alias) {
        return new Models(DSL.name(alias), this);
    }

    @Override
    public Models as(Name alias) {
        return new Models(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Models rename(String name) {
        return new Models(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Models rename(Name name) {
        return new Models(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<java.util.UUID, String, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
