/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.NamespacesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Namespaces extends TableImpl<NamespacesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.namespaces</code>
     */
    public static final Namespaces NAMESPACES = new Namespaces();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NamespacesRecord> getRecordType() {
        return NamespacesRecord.class;
    }

    /**
     * The column <code>public.namespaces.uuid</code>.
     */
    public final TableField<NamespacesRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.namespaces.name</code>.
     */
    public final TableField<NamespacesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.namespaces.root_content_uuid</code>.
     */
    public final TableField<NamespacesRecord, java.util.UUID> ROOT_CONTENT_UUID = createField(DSL.name("root_content_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.namespaces.meta</code>. Custom meta properties to
     * the element
     */
    public final TableField<NamespacesRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    /**
     * The column <code>public.namespaces.path_prefix</code>. Prefix for webroot
     * paths
     */
    public final TableField<NamespacesRecord, String> PATH_PREFIX = createField(DSL.name("path_prefix"), SQLDataType.VARCHAR, this, "Prefix for webroot paths");

    /**
     * The column <code>public.namespaces.model_filters</code>. filter for
     * models that can be used in the namespace
     */
    public final TableField<NamespacesRecord, String> MODEL_FILTERS = createField(DSL.name("model_filters"), SQLDataType.VARCHAR, this, "filter for models that can be used in the namespace");

    /**
     * The column <code>public.namespaces.created</code>.
     */
    public final TableField<NamespacesRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.namespaces.creator_uuid</code>.
     */
    public final TableField<NamespacesRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.namespaces.edited</code>.
     */
    public final TableField<NamespacesRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.namespaces.editor_uuid</code>.
     */
    public final TableField<NamespacesRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Namespaces(Name alias, Table<NamespacesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Namespaces(Name alias, Table<NamespacesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.namespaces</code> table reference
     */
    public Namespaces(String alias) {
        this(DSL.name(alias), NAMESPACES);
    }

    /**
     * Create an aliased <code>public.namespaces</code> table reference
     */
    public Namespaces(Name alias) {
        this(alias, NAMESPACES);
    }

    /**
     * Create a <code>public.namespaces</code> table reference
     */
    public Namespaces() {
        this(DSL.name("namespaces"), null);
    }

    public <O extends Record> Namespaces(Table<O> child, ForeignKey<O, NamespacesRecord> key) {
        super(child, key, NAMESPACES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.NAMESPACES_NAME_IDX);
    }

    @Override
    public UniqueKey<NamespacesRecord> getPrimaryKey() {
        return Keys.NAMESPACES_PKEY;
    }

    @Override
    public List<UniqueKey<NamespacesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.NAMESPACES_NAME_KEY);
    }

    @Override
    public List<ForeignKey<NamespacesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NAMESPACES__NAMESPACES_ROOT_CONTENT_UUID_FKEY, Keys.NAMESPACES__NAMESPACES_CREATOR_UUID_FKEY, Keys.NAMESPACES__NAMESPACES_EDITOR_UUID_FKEY);
    }

    private transient Contents _contents;
    private transient Users _namespacesCreatorUuidFkey;
    private transient Users _namespacesEditorUuidFkey;

    public Contents contents() {
        if (_contents == null)
            _contents = new Contents(this, Keys.NAMESPACES__NAMESPACES_ROOT_CONTENT_UUID_FKEY);

        return _contents;
    }

    public Users namespacesCreatorUuidFkey() {
        if (_namespacesCreatorUuidFkey == null)
            _namespacesCreatorUuidFkey = new Users(this, Keys.NAMESPACES__NAMESPACES_CREATOR_UUID_FKEY);

        return _namespacesCreatorUuidFkey;
    }

    public Users namespacesEditorUuidFkey() {
        if (_namespacesEditorUuidFkey == null)
            _namespacesEditorUuidFkey = new Users(this, Keys.NAMESPACES__NAMESPACES_EDITOR_UUID_FKEY);

        return _namespacesEditorUuidFkey;
    }

    @Override
    public Namespaces as(String alias) {
        return new Namespaces(DSL.name(alias), this);
    }

    @Override
    public Namespaces as(Name alias) {
        return new Namespaces(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Namespaces rename(String name) {
        return new Namespaces(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Namespaces rename(Name name) {
        return new Namespaces(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<java.util.UUID, String, java.util.UUID, JSONB, String, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
