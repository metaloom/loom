/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.RolePermissionRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePermission extends TableImpl<RolePermissionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.role_permission</code>
     */
    public static final RolePermission ROLE_PERMISSION = new RolePermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RolePermissionRecord> getRecordType() {
        return RolePermissionRecord.class;
    }

    /**
     * The column <code>public.role_permission.role_uuid</code>.
     */
    public final TableField<RolePermissionRecord, UUID> ROLE_UUID = createField(DSL.name("role_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.role_permission.element_uuid</code>.
     */
    public final TableField<RolePermissionRecord, UUID> ELEMENT_UUID = createField(DSL.name("element_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.role_permission.create_perm</code>.
     */
    public final TableField<RolePermissionRecord, Boolean> CREATE_PERM = createField(DSL.name("create_perm"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.role_permission.read_perm</code>.
     */
    public final TableField<RolePermissionRecord, Boolean> READ_PERM = createField(DSL.name("read_perm"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.role_permission.delete_perm</code>.
     */
    public final TableField<RolePermissionRecord, Boolean> DELETE_PERM = createField(DSL.name("delete_perm"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.role_permission.update_perm</code>.
     */
    public final TableField<RolePermissionRecord, Boolean> UPDATE_PERM = createField(DSL.name("update_perm"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.role_permission.read_publish_perm</code>.
     */
    public final TableField<RolePermissionRecord, Boolean> READ_PUBLISH_PERM = createField(DSL.name("read_publish_perm"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.role_permission.publish_perm</code>.
     */
    public final TableField<RolePermissionRecord, Boolean> PUBLISH_PERM = createField(DSL.name("publish_perm"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private RolePermission(Name alias, Table<RolePermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RolePermission(Name alias, Table<RolePermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.role_permission</code> table reference
     */
    public RolePermission(String alias) {
        this(DSL.name(alias), ROLE_PERMISSION);
    }

    /**
     * Create an aliased <code>public.role_permission</code> table reference
     */
    public RolePermission(Name alias) {
        this(alias, ROLE_PERMISSION);
    }

    /**
     * Create a <code>public.role_permission</code> table reference
     */
    public RolePermission() {
        this(DSL.name("role_permission"), null);
    }

    public <O extends Record> RolePermission(Table<O> child, ForeignKey<O, RolePermissionRecord> key) {
        super(child, key, ROLE_PERMISSION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RolePermissionRecord> getPrimaryKey() {
        return Keys.ROLE_PERMISSION_PKEY;
    }

    @Override
    public List<ForeignKey<RolePermissionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROLE_PERMISSION__ROLE_PERMISSION_ROLE_UUID_FKEY);
    }

    private transient Role _role;

    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.ROLE_PERMISSION__ROLE_PERMISSION_ROLE_UUID_FKEY);

        return _role;
    }

    @Override
    public RolePermission as(String alias) {
        return new RolePermission(DSL.name(alias), this);
    }

    @Override
    public RolePermission as(Name alias) {
        return new RolePermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermission rename(String name) {
        return new RolePermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RolePermission rename(Name name) {
        return new RolePermission(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
