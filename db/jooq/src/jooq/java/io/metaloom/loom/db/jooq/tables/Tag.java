/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.TagRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tag extends TableImpl<TagRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tag</code>
     */
    public static final Tag TAG = new Tag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagRecord> getRecordType() {
        return TagRecord.class;
    }

    /**
     * The column <code>public.tag.uuid</code>.
     */
    public final TableField<TagRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tag.name</code>.
     */
    public final TableField<TagRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tag.collection</code>.
     */
    public final TableField<TagRecord, String> COLLECTION = createField(DSL.name("collection"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tag.namespace_uuid</code>.
     */
    public final TableField<TagRecord, java.util.UUID> NAMESPACE_UUID = createField(DSL.name("namespace_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tag.meta</code>. Custom meta properties to the element
     */
    public final TableField<TagRecord, String> META = createField(DSL.name("meta"), SQLDataType.VARCHAR, this, "Custom meta properties to the element");

    /**
     * The column <code>public.tag.rating</code>. Absolute or buffered/precomputed rating information
     */
    public final TableField<TagRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER, this, "Absolute or buffered/precomputed rating information");

    /**
     * The column <code>public.tag.created</code>.
     */
    public final TableField<TagRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tag.creator_uuid</code>.
     */
    public final TableField<TagRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tag.edited</code>.
     */
    public final TableField<TagRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tag.editor_uuid</code>.
     */
    public final TableField<TagRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Tag(Name alias, Table<TagRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tag(Name alias, Table<TagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tag</code> table reference
     */
    public Tag(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>public.tag</code> table reference
     */
    public Tag(Name alias) {
        this(alias, TAG);
    }

    /**
     * Create a <code>public.tag</code> table reference
     */
    public Tag() {
        this(DSL.name("tag"), null);
    }

    public <O extends Record> Tag(Table<O> child, ForeignKey<O, TagRecord> key) {
        super(child, key, TAG);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAG_NAME_COLLECTION_NAMESPACE_UUID_IDX);
    }

    @Override
    public UniqueKey<TagRecord> getPrimaryKey() {
        return Keys.TAG_PKEY;
    }

    @Override
    public List<UniqueKey<TagRecord>> getKeys() {
        return Arrays.<UniqueKey<TagRecord>>asList(Keys.TAG_PKEY);
    }

    @Override
    public List<ForeignKey<TagRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TagRecord, ?>>asList(Keys.TAG__TAG_NAMESPACE_UUID_FKEY, Keys.TAG__TAG_CREATOR_UUID_FKEY, Keys.TAG__TAG_EDITOR_UUID_FKEY);
    }

    private transient Namespace _namespace;
    private transient User _tagCreatorUuidFkey;
    private transient User _tagEditorUuidFkey;

    public Namespace namespace() {
        if (_namespace == null)
            _namespace = new Namespace(this, Keys.TAG__TAG_NAMESPACE_UUID_FKEY);

        return _namespace;
    }

    public User tagCreatorUuidFkey() {
        if (_tagCreatorUuidFkey == null)
            _tagCreatorUuidFkey = new User(this, Keys.TAG__TAG_CREATOR_UUID_FKEY);

        return _tagCreatorUuidFkey;
    }

    public User tagEditorUuidFkey() {
        if (_tagEditorUuidFkey == null)
            _tagEditorUuidFkey = new User(this, Keys.TAG__TAG_EDITOR_UUID_FKEY);

        return _tagEditorUuidFkey;
    }

    @Override
    public Tag as(String alias) {
        return new Tag(DSL.name(alias), this);
    }

    @Override
    public Tag as(Name alias) {
        return new Tag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(String name) {
        return new Tag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Name name) {
        return new Tag(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<java.util.UUID, String, String, java.util.UUID, String, Integer, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
