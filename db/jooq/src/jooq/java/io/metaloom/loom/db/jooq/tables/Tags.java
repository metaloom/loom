/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.TagsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tags extends TableImpl<TagsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.tags</code>
     */
    public static final Tags TAGS = new Tags();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagsRecord> getRecordType() {
        return TagsRecord.class;
    }

    /**
     * The column <code>public.tags.uuid</code>.
     */
    public final TableField<TagsRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.tags.name</code>.
     */
    public final TableField<TagsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tags.collection</code>.
     */
    public final TableField<TagsRecord, String> COLLECTION = createField(DSL.name("collection"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.tags.namespace_uuid</code>.
     */
    public final TableField<TagsRecord, java.util.UUID> NAMESPACE_UUID = createField(DSL.name("namespace_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tags.meta</code>. Custom meta properties to the
     * element
     */
    public final TableField<TagsRecord, JSONB> META = createField(DSL.name("meta"), SQLDataType.JSONB, this, "Custom meta properties to the element");

    /**
     * The column <code>public.tags.rating</code>. Absolute or
     * buffered/precomputed rating information
     */
    public final TableField<TagsRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER, this, "Absolute or buffered/precomputed rating information");

    /**
     * The column <code>public.tags.created</code>.
     */
    public final TableField<TagsRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tags.creator_uuid</code>.
     */
    public final TableField<TagsRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.tags.edited</code>.
     */
    public final TableField<TagsRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.tags.editor_uuid</code>.
     */
    public final TableField<TagsRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Tags(Name alias, Table<TagsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tags(Name alias, Table<TagsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.tags</code> table reference
     */
    public Tags(String alias) {
        this(DSL.name(alias), TAGS);
    }

    /**
     * Create an aliased <code>public.tags</code> table reference
     */
    public Tags(Name alias) {
        this(alias, TAGS);
    }

    /**
     * Create a <code>public.tags</code> table reference
     */
    public Tags() {
        this(DSL.name("tags"), null);
    }

    public <O extends Record> Tags(Table<O> child, ForeignKey<O, TagsRecord> key) {
        super(child, key, TAGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TAGS_NAME_COLLECTION_NAMESPACE_UUID_IDX);
    }

    @Override
    public UniqueKey<TagsRecord> getPrimaryKey() {
        return Keys.TAGS_PKEY;
    }

    @Override
    public List<ForeignKey<TagsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TAGS__TAGS_NAMESPACE_UUID_FKEY, Keys.TAGS__TAGS_CREATOR_UUID_FKEY, Keys.TAGS__TAGS_EDITOR_UUID_FKEY);
    }

    private transient Namespaces _namespaces;
    private transient Users _tagsCreatorUuidFkey;
    private transient Users _tagsEditorUuidFkey;

    public Namespaces namespaces() {
        if (_namespaces == null)
            _namespaces = new Namespaces(this, Keys.TAGS__TAGS_NAMESPACE_UUID_FKEY);

        return _namespaces;
    }

    public Users tagsCreatorUuidFkey() {
        if (_tagsCreatorUuidFkey == null)
            _tagsCreatorUuidFkey = new Users(this, Keys.TAGS__TAGS_CREATOR_UUID_FKEY);

        return _tagsCreatorUuidFkey;
    }

    public Users tagsEditorUuidFkey() {
        if (_tagsEditorUuidFkey == null)
            _tagsEditorUuidFkey = new Users(this, Keys.TAGS__TAGS_EDITOR_UUID_FKEY);

        return _tagsEditorUuidFkey;
    }

    @Override
    public Tags as(String alias) {
        return new Tags(DSL.name(alias), this);
    }

    @Override
    public Tags as(Name alias) {
        return new Tags(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tags rename(String name) {
        return new Tags(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tags rename(Name name) {
        return new Tags(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<java.util.UUID, String, String, java.util.UUID, JSONB, Integer, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
