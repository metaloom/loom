/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.enums.LoomPermissionFlag;
import io.metaloom.loom.db.jooq.tables.records.UserTokenRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserToken extends TableImpl<UserTokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_token</code>
     */
    public static final UserToken USER_TOKEN = new UserToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTokenRecord> getRecordType() {
        return UserTokenRecord.class;
    }

    /**
     * The column <code>public.user_token.uuid</code>.
     */
    public final TableField<UserTokenRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.user_token.user_uuid</code>.
     */
    public final TableField<UserTokenRecord, java.util.UUID> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user_token.note</code>.
     */
    public final TableField<UserTokenRecord, String> NOTE = createField(DSL.name("note"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user_token.token</code>.
     */
    public final TableField<UserTokenRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.user_token.permissions</code>.
     */
    public final TableField<UserTokenRecord, LoomPermissionFlag> PERMISSIONS = createField(DSL.name("permissions"), SQLDataType.VARCHAR.asEnumDataType(io.metaloom.loom.db.jooq.enums.LoomPermissionFlag.class), this, "");

    private UserToken(Name alias, Table<UserTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserToken(Name alias, Table<UserTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_token</code> table reference
     */
    public UserToken(String alias) {
        this(DSL.name(alias), USER_TOKEN);
    }

    /**
     * Create an aliased <code>public.user_token</code> table reference
     */
    public UserToken(Name alias) {
        this(alias, USER_TOKEN);
    }

    /**
     * Create a <code>public.user_token</code> table reference
     */
    public UserToken() {
        this(DSL.name("user_token"), null);
    }

    public <O extends Record> UserToken(Table<O> child, ForeignKey<O, UserTokenRecord> key) {
        super(child, key, USER_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_TOKEN_USER_UUID_IDX);
    }

    @Override
    public UniqueKey<UserTokenRecord> getPrimaryKey() {
        return Keys.USER_TOKEN_PKEY;
    }

    @Override
    public List<ForeignKey<UserTokenRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_TOKEN__USER_TOKEN_USER_UUID_FKEY);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.USER_TOKEN__USER_TOKEN_USER_UUID_FKEY);

        return _user;
    }

    @Override
    public UserToken as(String alias) {
        return new UserToken(DSL.name(alias), this);
    }

    @Override
    public UserToken as(Name alias) {
        return new UserToken(alias, this);
    }

    @Override
    public UserToken as(Table<?> alias) {
        return new UserToken(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToken rename(String name) {
        return new UserToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToken rename(Name name) {
        return new UserToken(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToken rename(Table<?> name) {
        return new UserToken(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<java.util.UUID, java.util.UUID, String, String, LoomPermissionFlag> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super java.util.UUID, ? super java.util.UUID, ? super String, ? super String, ? super LoomPermissionFlag, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super java.util.UUID, ? super java.util.UUID, ? super String, ? super String, ? super LoomPermissionFlag, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
