/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.UsersGroupsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersGroups extends TableImpl<UsersGroupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_groups</code>
     */
    public static final UsersGroups USERS_GROUPS = new UsersGroups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersGroupsRecord> getRecordType() {
        return UsersGroupsRecord.class;
    }

    /**
     * The column <code>public.users_groups.user_uuid</code>.
     */
    public final TableField<UsersGroupsRecord, UUID> USER_UUID = createField(DSL.name("user_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.users_groups.group_uuid</code>.
     */
    public final TableField<UsersGroupsRecord, UUID> GROUP_UUID = createField(DSL.name("group_uuid"), SQLDataType.UUID.nullable(false), this, "");

    private UsersGroups(Name alias, Table<UsersGroupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersGroups(Name alias, Table<UsersGroupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_groups</code> table reference
     */
    public UsersGroups(String alias) {
        this(DSL.name(alias), USERS_GROUPS);
    }

    /**
     * Create an aliased <code>public.users_groups</code> table reference
     */
    public UsersGroups(Name alias) {
        this(alias, USERS_GROUPS);
    }

    /**
     * Create a <code>public.users_groups</code> table reference
     */
    public UsersGroups() {
        this(DSL.name("users_groups"), null);
    }

    public <O extends Record> UsersGroups(Table<O> child, ForeignKey<O, UsersGroupsRecord> key) {
        super(child, key, USERS_GROUPS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UsersGroupsRecord> getPrimaryKey() {
        return Keys.USERS_GROUPS_PKEY;
    }

    @Override
    public List<ForeignKey<UsersGroupsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS_GROUPS__USERS_GROUPS_USER_UUID_FKEY, Keys.USERS_GROUPS__USERS_GROUPS_GROUP_UUID_FKEY);
    }

    private transient Users _users;
    private transient Groups _groups;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USERS_GROUPS__USERS_GROUPS_USER_UUID_FKEY);

        return _users;
    }

    public Groups groups() {
        if (_groups == null)
            _groups = new Groups(this, Keys.USERS_GROUPS__USERS_GROUPS_GROUP_UUID_FKEY);

        return _groups;
    }

    @Override
    public UsersGroups as(String alias) {
        return new UsersGroups(DSL.name(alias), this);
    }

    @Override
    public UsersGroups as(Name alias) {
        return new UsersGroups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersGroups rename(String name) {
        return new UsersGroups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersGroups rename(Name name) {
        return new UsersGroups(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
