/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.AssetBinary;
import io.metaloom.loom.db.jooq.tables.records.AssetBinaryRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This table stores the immutable asset information
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetBinaryDao extends AbstractReactiveVertxDAO<AssetBinaryRecord, io.metaloom.loom.db.jooq.tables.pojos.AssetBinary, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<AssetBinaryRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetBinary,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public AssetBinaryDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(AssetBinary.ASSET_BINARY, io.metaloom.loom.db.jooq.tables.pojos.AssetBinary.class, new ReactiveRXQueryExecutor<AssetBinaryRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetBinary,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getAssetBinaryMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.AssetBinary object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>sha512sum IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyBySha512sum(Collection<String> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.SHA512SUM.in(values));
        }

        /**
     * Find records that have <code>sha512sum IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyBySha512sum(Collection<String> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.SHA512SUM.in(values),limit);
        }

        /**
     * Find records that have <code>size IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyBySize(Collection<Integer> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.SIZE.in(values));
        }

        /**
     * Find records that have <code>size IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyBySize(Collection<Integer> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.SIZE.in(values),limit);
        }

        /**
     * Find records that have <code>sha256sum IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyBySha256sum(Collection<String> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.SHA256SUM.in(values));
        }

        /**
     * Find records that have <code>sha256sum IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyBySha256sum(Collection<String> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.SHA256SUM.in(values),limit);
        }

        /**
     * Find records that have <code>md5sum IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByMd5sum(Collection<String> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.MD5SUM.in(values));
        }

        /**
     * Find records that have <code>md5sum IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByMd5sum(Collection<String> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.MD5SUM.in(values),limit);
        }

        /**
     * Find records that have <code>media_width IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByMediaWidth(Collection<Integer> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.MEDIA_WIDTH.in(values));
        }

        /**
     * Find records that have <code>media_width IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByMediaWidth(Collection<Integer> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.MEDIA_WIDTH.in(values),limit);
        }

        /**
     * Find records that have <code>media_height IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByMediaHeight(Collection<Integer> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.MEDIA_HEIGHT.in(values));
        }

        /**
     * Find records that have <code>media_height IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByMediaHeight(Collection<Integer> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.MEDIA_HEIGHT.in(values),limit);
        }

        /**
     * Find records that have <code>fingerprint IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByFingerprint(Collection<String> values) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.FINGERPRINT.in(values));
        }

        /**
     * Find records that have <code>fingerprint IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetBinary>> findManyByFingerprint(Collection<String> values, int limit) {
                return findManyByCondition(AssetBinary.ASSET_BINARY.FINGERPRINT.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<AssetBinaryRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetBinary,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<AssetBinaryRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetBinary,UUID>) super.queryExecutor();
        }
}
