/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.AssetTimeline;
import io.metaloom.loom.db.jooq.tables.records.AssetTimelineRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This table contains asset timeline entries
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetTimelineDao extends DAOImpl<AssetTimelineRecord, io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline, UUID> {

    /**
     * Create a new AssetTimelineDao without any configuration
     */
    public AssetTimelineDao() {
        super(AssetTimeline.ASSET_TIMELINE, io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline.class);
    }

    /**
     * Create a new AssetTimelineDao with an attached configuration
     */
    public AssetTimelineDao(Configuration configuration) {
        super(AssetTimeline.ASSET_TIMELINE, io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByUuid(UUID... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline fetchOneByUuid(UUID value) {
        return fetchOne(AssetTimeline.ASSET_TIMELINE.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchOptionalByUuid(UUID value) {
        return fetchOptional(AssetTimeline.ASSET_TIMELINE.UUID, value);
    }

    /**
     * Fetch records that have <code>asset_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfAssetUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.ASSET_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>asset_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByAssetUuid(UUID... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.ASSET_UUID, values);
    }

    /**
     * Fetch records that have <code>from BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfFrom(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.FROM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>from IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByFrom(Integer... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.FROM, values);
    }

    /**
     * Fetch records that have <code>to BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfTo(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.TO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>to IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByTo(Integer... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.TO, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByDescription(String... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>tags BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfTags(String lowerInclusive, String upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.TAGS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tags IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByTags(String... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.TAGS, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByMeta(JSONB... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.META, values);
    }

    /**
     * Fetch records that have <code>thumbail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchRangeOfThumbail(String lowerInclusive, String upperInclusive) {
        return fetchRange(AssetTimeline.ASSET_TIMELINE.THUMBAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>thumbail IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline> fetchByThumbail(String... values) {
        return fetch(AssetTimeline.ASSET_TIMELINE.THUMBAIL, values);
    }
}
