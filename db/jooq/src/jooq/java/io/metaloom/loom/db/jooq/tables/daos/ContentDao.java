/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.Content;
import io.metaloom.loom.db.jooq.tables.records.ContentRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContentDao extends AbstractReactiveVertxDAO<ContentRecord, io.metaloom.loom.db.jooq.tables.pojos.Content, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Content>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<ContentRecord,io.metaloom.loom.db.jooq.tables.pojos.Content,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public ContentDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Content.CONTENT, io.metaloom.loom.db.jooq.tables.pojos.Content.class, new ReactiveRXQueryExecutor<ContentRecord,io.metaloom.loom.db.jooq.tables.pojos.Content,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getContentMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Content object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>namespace_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByNamespaceUuid(Collection<UUID> values) {
                return findManyByCondition(Content.CONTENT.NAMESPACE_UUID.in(values));
        }

        /**
     * Find records that have <code>namespace_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByNamespaceUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Content.CONTENT.NAMESPACE_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>parent IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByParent(Collection<UUID> values) {
                return findManyByCondition(Content.CONTENT.PARENT.in(values));
        }

        /**
     * Find records that have <code>parent IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByParent(Collection<UUID> values, int limit) {
                return findManyByCondition(Content.CONTENT.PARENT.in(values),limit);
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByCreated(Collection<LocalDateTime> values) {
                return findManyByCondition(Content.CONTENT.CREATED.in(values));
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByCreated(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Content.CONTENT.CREATED.in(values),limit);
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByCreatorUuid(Collection<UUID> values) {
                return findManyByCondition(Content.CONTENT.CREATOR_UUID.in(values));
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByCreatorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Content.CONTENT.CREATOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>model_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByModelUuid(Collection<UUID> values) {
                return findManyByCondition(Content.CONTENT.MODEL_UUID.in(values));
        }

        /**
     * Find records that have <code>model_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Content>> findManyByModelUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Content.CONTENT.MODEL_UUID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<ContentRecord,io.metaloom.loom.db.jooq.tables.pojos.Content,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<ContentRecord,io.metaloom.loom.db.jooq.tables.pojos.Content,UUID>) super.queryExecutor();
        }
}
