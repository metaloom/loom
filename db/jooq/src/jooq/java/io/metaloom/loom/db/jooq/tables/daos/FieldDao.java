/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.Field;
import io.metaloom.loom.db.jooq.tables.records.FieldRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * Table which stores the actual fields content as JSON
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldDao extends AbstractReactiveVertxDAO<FieldRecord, io.metaloom.loom.db.jooq.tables.pojos.Field, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Field>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<FieldRecord,io.metaloom.loom.db.jooq.tables.pojos.Field,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public FieldDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Field.FIELD, io.metaloom.loom.db.jooq.tables.pojos.Field.class, new ReactiveRXQueryExecutor<FieldRecord,io.metaloom.loom.db.jooq.tables.pojos.Field,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getFieldMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Field object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>content_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByContentUuid(Collection<UUID> values) {
                return findManyByCondition(Field.FIELD.CONTENT_UUID.in(values));
        }

        /**
     * Find records that have <code>content_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByContentUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Field.FIELD.CONTENT_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>fields_json IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByFieldsJson(Collection<String> values) {
                return findManyByCondition(Field.FIELD.FIELDS_JSON.in(values));
        }

        /**
     * Find records that have <code>fields_json IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByFieldsJson(Collection<String> values, int limit) {
                return findManyByCondition(Field.FIELD.FIELDS_JSON.in(values),limit);
        }

        /**
     * Find records that have <code>language_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByLanguageUuid(Collection<UUID> values) {
                return findManyByCondition(Field.FIELD.LANGUAGE_UUID.in(values));
        }

        /**
     * Find records that have <code>language_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByLanguageUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Field.FIELD.LANGUAGE_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByEdited(Collection<LocalDateTime> values) {
                return findManyByCondition(Field.FIELD.EDITED.in(values));
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByEdited(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Field.FIELD.EDITED.in(values),limit);
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByEditorUuid(Collection<UUID> values) {
                return findManyByCondition(Field.FIELD.EDITOR_UUID.in(values));
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByEditorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Field.FIELD.EDITOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>modelversion_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByModelversionUuid(Collection<UUID> values) {
                return findManyByCondition(Field.FIELD.MODELVERSION_UUID.in(values));
        }

        /**
     * Find records that have <code>modelversion_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByModelversionUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Field.FIELD.MODELVERSION_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>version IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByVersion(Collection<Integer> values) {
                return findManyByCondition(Field.FIELD.VERSION.in(values));
        }

        /**
     * Find records that have <code>version IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Field>> findManyByVersion(Collection<Integer> values, int limit) {
                return findManyByCondition(Field.FIELD.VERSION.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<FieldRecord,io.metaloom.loom.db.jooq.tables.pojos.Field,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<FieldRecord,io.metaloom.loom.db.jooq.tables.pojos.Field,UUID>) super.queryExecutor();
        }
}
