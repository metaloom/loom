/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.Field;
import io.metaloom.loom.db.jooq.tables.records.FieldRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * Table which stores the actual fields content as JSON
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldDao extends DAOImpl<FieldRecord, io.metaloom.loom.db.jooq.tables.pojos.Field, UUID> {

    /**
     * Create a new FieldDao without any configuration
     */
    public FieldDao() {
        super(Field.FIELD, io.metaloom.loom.db.jooq.tables.pojos.Field.class);
    }

    /**
     * Create a new FieldDao with an attached configuration
     */
    public FieldDao(Configuration configuration) {
        super(Field.FIELD, io.metaloom.loom.db.jooq.tables.pojos.Field.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Field object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Field.FIELD.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByUuid(UUID... values) {
        return fetch(Field.FIELD.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.Field fetchOneByUuid(UUID value) {
        return fetchOne(Field.FIELD.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchOptionalByUuid(UUID value) {
        return fetchOptional(Field.FIELD.UUID, value);
    }

    /**
     * Fetch records that have <code>content_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfContentUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Field.FIELD.CONTENT_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByContentUuid(UUID... values) {
        return fetch(Field.FIELD.CONTENT_UUID, values);
    }

    /**
     * Fetch records that have <code>fields_json BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfFieldsJson(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Field.FIELD.FIELDS_JSON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fields_json IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByFieldsJson(JSONB... values) {
        return fetch(Field.FIELD.FIELDS_JSON, values);
    }

    /**
     * Fetch records that have <code>language_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfLanguageUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Field.FIELD.LANGUAGE_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>language_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByLanguageUuid(UUID... values) {
        return fetch(Field.FIELD.LANGUAGE_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Field.FIELD.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByEdited(LocalDateTime... values) {
        return fetch(Field.FIELD.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Field.FIELD.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByEditorUuid(UUID... values) {
        return fetch(Field.FIELD.EDITOR_UUID, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Field.FIELD.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByCreated(LocalDateTime... values) {
        return fetch(Field.FIELD.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Field.FIELD.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByCreatorUuid(UUID... values) {
        return fetch(Field.FIELD.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>modelversion_uuid BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfModelversionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Field.FIELD.MODELVERSION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modelversion_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByModelversionUuid(UUID... values) {
        return fetch(Field.FIELD.MODELVERSION_UUID, values);
    }

    /**
     * Fetch records that have <code>version BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchRangeOfVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Field.FIELD.VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Field> fetchByVersion(Integer... values) {
        return fetch(Field.FIELD.VERSION, values);
    }
}
