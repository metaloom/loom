/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.FieldReference;
import io.metaloom.loom.db.jooq.tables.records.FieldReferenceRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This table is mainly used to lookup foreign references to contents
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldReferenceDao extends DAOImpl<FieldReferenceRecord, io.metaloom.loom.db.jooq.tables.pojos.FieldReference, Record2<UUID, UUID>> {

    /**
     * Create a new FieldReferenceDao without any configuration
     */
    public FieldReferenceDao() {
        super(FieldReference.FIELD_REFERENCE, io.metaloom.loom.db.jooq.tables.pojos.FieldReference.class);
    }

    /**
     * Create a new FieldReferenceDao with an attached configuration
     */
    public FieldReferenceDao(Configuration configuration) {
        super(FieldReference.FIELD_REFERENCE, io.metaloom.loom.db.jooq.tables.pojos.FieldReference.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(io.metaloom.loom.db.jooq.tables.pojos.FieldReference object) {
        return compositeKeyRecord(object.getSourceUuid(), object.getTargetUuid());
    }

    /**
     * Fetch records that have <code>source_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.FieldReference> fetchRangeOfSourceUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(FieldReference.FIELD_REFERENCE.SOURCE_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.FieldReference> fetchBySourceUuid(UUID... values) {
        return fetch(FieldReference.FIELD_REFERENCE.SOURCE_UUID, values);
    }

    /**
     * Fetch records that have <code>target_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.FieldReference> fetchRangeOfTargetUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(FieldReference.FIELD_REFERENCE.TARGET_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>target_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.FieldReference> fetchByTargetUuid(UUID... values) {
        return fetch(FieldReference.FIELD_REFERENCE.TARGET_UUID, values);
    }

    /**
     * Fetch records that have <code>field_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.FieldReference> fetchRangeOfFieldName(String lowerInclusive, String upperInclusive) {
        return fetchRange(FieldReference.FIELD_REFERENCE.FIELD_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>field_name IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.FieldReference> fetchByFieldName(String... values) {
        return fetch(FieldReference.FIELD_REFERENCE.FIELD_NAME, values);
    }
}
