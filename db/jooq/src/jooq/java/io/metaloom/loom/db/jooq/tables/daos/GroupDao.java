/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.Group;
import io.metaloom.loom.db.jooq.tables.records.GroupRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GroupDao extends DAOImpl<GroupRecord, io.metaloom.loom.db.jooq.tables.pojos.Group, UUID> {

    /**
     * Create a new GroupDao without any configuration
     */
    public GroupDao() {
        super(Group.GROUP, io.metaloom.loom.db.jooq.tables.pojos.Group.class);
    }

    /**
     * Create a new GroupDao with an attached configuration
     */
    public GroupDao(Configuration configuration) {
        super(Group.GROUP, io.metaloom.loom.db.jooq.tables.pojos.Group.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Group object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Group.GROUP.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByUuid(UUID... values) {
        return fetch(Group.GROUP.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.Group fetchOneByUuid(UUID value) {
        return fetchOne(Group.GROUP.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchOptionalByUuid(UUID value) {
        return fetchOptional(Group.GROUP.UUID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Group.GROUP.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByName(String... values) {
        return fetch(Group.GROUP.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.Group fetchOneByName(String value) {
        return fetchOne(Group.GROUP.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchOptionalByName(String value) {
        return fetchOptional(Group.GROUP.NAME, value);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Group.GROUP.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByMeta(JSONB... values) {
        return fetch(Group.GROUP.META, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Group.GROUP.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByCreated(LocalDateTime... values) {
        return fetch(Group.GROUP.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Group.GROUP.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByCreatorUuid(UUID... values) {
        return fetch(Group.GROUP.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Group.GROUP.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByEdited(LocalDateTime... values) {
        return fetch(Group.GROUP.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchRangeOfEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Group.GROUP.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.Group> fetchByEditorUuid(UUID... values) {
        return fetch(Group.GROUP.EDITOR_UUID, values);
    }
}
