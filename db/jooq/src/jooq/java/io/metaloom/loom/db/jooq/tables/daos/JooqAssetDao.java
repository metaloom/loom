/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.Asset;
import io.metaloom.loom.db.jooq.tables.pojos.JooqAsset;
import io.metaloom.loom.db.jooq.tables.records.AssetRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAssetDao extends DAOImpl<AssetRecord, JooqAsset, UUID> {

    /**
     * Create a new JooqAssetDao without any configuration
     */
    public JooqAssetDao() {
        super(Asset.ASSET, JooqAsset.class);
    }

    /**
     * Create a new JooqAssetDao with an attached configuration
     */
    public JooqAssetDao(Configuration configuration) {
        super(Asset.ASSET, JooqAsset.class, configuration);
    }

    @Override
    public UUID getId(JooqAsset object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Asset.ASSET.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<JooqAsset> fetchByUuid(UUID... values) {
        return fetch(Asset.ASSET.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public JooqAsset fetchOneByUuid(UUID value) {
        return fetchOne(Asset.ASSET.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<JooqAsset> fetchOptionalByUuid(UUID value) {
        return fetchOptional(Asset.ASSET.UUID, value);
    }

    /**
     * Fetch records that have <code>asset_binaries_uuid BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfAssetBinariesUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Asset.ASSET.ASSET_BINARIES_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>asset_binaries_uuid IN (values)</code>
     */
    public List<JooqAsset> fetchByAssetBinariesUuid(UUID... values) {
        return fetch(Asset.ASSET.ASSET_BINARIES_UUID, values);
    }

    /**
     * Fetch records that have <code>namespace_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfNamespaceUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Asset.ASSET.NAMESPACE_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>namespace_uuid IN (values)</code>
     */
    public List<JooqAsset> fetchByNamespaceUuid(UUID... values) {
        return fetch(Asset.ASSET.NAMESPACE_UUID, values);
    }

    /**
     * Fetch records that have <code>filename BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfFilename(String lowerInclusive, String upperInclusive) {
        return fetchRange(Asset.ASSET.FILENAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>filename IN (values)</code>
     */
    public List<JooqAsset> fetchByFilename(String... values) {
        return fetch(Asset.ASSET.FILENAME, values);
    }

    /**
     * Fetch records that have <code>localPath BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfLocalpath(String lowerInclusive, String upperInclusive) {
        return fetchRange(Asset.ASSET.LOCALPATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>localPath IN (values)</code>
     */
    public List<JooqAsset> fetchByLocalpath(String... values) {
        return fetch(Asset.ASSET.LOCALPATH, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Asset.ASSET.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqAsset> fetchByMeta(JSONB... values) {
        return fetch(Asset.ASSET.META, values);
    }

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfRating(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Asset.ASSET.RATING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    public List<JooqAsset> fetchByRating(Integer... values) {
        return fetch(Asset.ASSET.RATING, values);
    }

    /**
     * Fetch records that have <code>dominantColor BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfDominantcolor(String lowerInclusive, String upperInclusive) {
        return fetchRange(Asset.ASSET.DOMINANTCOLOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dominantColor IN (values)</code>
     */
    public List<JooqAsset> fetchByDominantcolor(String... values) {
        return fetch(Asset.ASSET.DOMINANTCOLOR, values);
    }

    /**
     * Fetch records that have <code>mimeType BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfMimetype(String lowerInclusive, String upperInclusive) {
        return fetchRange(Asset.ASSET.MIMETYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>mimeType IN (values)</code>
     */
    public List<JooqAsset> fetchByMimetype(String... values) {
        return fetch(Asset.ASSET.MIMETYPE, values);
    }

    /**
     * Fetch records that have <code>gps_lon BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfGpsLon(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Asset.ASSET.GPS_LON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gps_lon IN (values)</code>
     */
    public List<JooqAsset> fetchByGpsLon(BigDecimal... values) {
        return fetch(Asset.ASSET.GPS_LON, values);
    }

    /**
     * Fetch records that have <code>gps_lat BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfGpsLat(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Asset.ASSET.GPS_LAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>gps_lat IN (values)</code>
     */
    public List<JooqAsset> fetchByGpsLat(BigDecimal... values) {
        return fetch(Asset.ASSET.GPS_LAT, values);
    }

    /**
     * Fetch records that have <code>s3_bucket_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfS3BucketName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Asset.ASSET.S3_BUCKET_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>s3_bucket_name IN (values)</code>
     */
    public List<JooqAsset> fetchByS3BucketName(String... values) {
        return fetch(Asset.ASSET.S3_BUCKET_NAME, values);
    }

    /**
     * Fetch records that have <code>s3_object_path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfS3ObjectPath(String lowerInclusive, String upperInclusive) {
        return fetchRange(Asset.ASSET.S3_OBJECT_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>s3_object_path IN (values)</code>
     */
    public List<JooqAsset> fetchByS3ObjectPath(String... values) {
        return fetch(Asset.ASSET.S3_OBJECT_PATH, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Asset.ASSET.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<JooqAsset> fetchByCreated(LocalDateTime... values) {
        return fetch(Asset.ASSET.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Asset.ASSET.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<JooqAsset> fetchByCreatorUuid(UUID... values) {
        return fetch(Asset.ASSET.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Asset.ASSET.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<JooqAsset> fetchByEdited(LocalDateTime... values) {
        return fetch(Asset.ASSET.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAsset> fetchRangeOfEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Asset.ASSET.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<JooqAsset> fetchByEditorUuid(UUID... values) {
        return fetch(Asset.ASSET.EDITOR_UUID, values);
    }
}
