/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.AssetUserMeta;
import io.metaloom.loom.db.jooq.tables.pojos.JooqAssetUserMeta;
import io.metaloom.loom.db.jooq.tables.records.AssetUserMetaRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqAssetUserMetaDao extends DAOImpl<AssetUserMetaRecord, JooqAssetUserMeta, Record2<UUID, UUID>> {

    /**
     * Create a new JooqAssetUserMetaDao without any configuration
     */
    public JooqAssetUserMetaDao() {
        super(AssetUserMeta.ASSET_USER_META, JooqAssetUserMeta.class);
    }

    /**
     * Create a new JooqAssetUserMetaDao with an attached configuration
     */
    public JooqAssetUserMetaDao(Configuration configuration) {
        super(AssetUserMeta.ASSET_USER_META, JooqAssetUserMeta.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(JooqAssetUserMeta object) {
        return compositeKeyRecord(object.getAssetUuid(), object.getUserUuid());
    }

    /**
     * Fetch records that have <code>asset_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAssetUserMeta> fetchRangeOfAssetUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AssetUserMeta.ASSET_USER_META.ASSET_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>asset_uuid IN (values)</code>
     */
    public List<JooqAssetUserMeta> fetchByAssetUuid(UUID... values) {
        return fetch(AssetUserMeta.ASSET_USER_META.ASSET_UUID, values);
    }

    /**
     * Fetch records that have <code>user_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAssetUserMeta> fetchRangeOfUserUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(AssetUserMeta.ASSET_USER_META.USER_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_uuid IN (values)</code>
     */
    public List<JooqAssetUserMeta> fetchByUserUuid(UUID... values) {
        return fetch(AssetUserMeta.ASSET_USER_META.USER_UUID, values);
    }

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAssetUserMeta> fetchRangeOfRating(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AssetUserMeta.ASSET_USER_META.RATING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    public List<JooqAssetUserMeta> fetchByRating(Integer... values) {
        return fetch(AssetUserMeta.ASSET_USER_META.RATING, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqAssetUserMeta> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(AssetUserMeta.ASSET_USER_META.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqAssetUserMeta> fetchByMeta(JSONB... values) {
        return fetch(AssetUserMeta.ASSET_USER_META.META, values);
    }
}
