/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqBlacklist;
import io.metaloom.loom.db.jooq.tables.records.JooqBlacklistRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * Stores information on blocked binaries.
 * A binary can be blocked due to copyright claim issues or because the virus
 * scanner marked it.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqBlacklistDao extends DAOImpl<JooqBlacklistRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist, UUID> {

    /**
     * Create a new JooqBlacklistDao without any configuration
     */
    public JooqBlacklistDao() {
        super(JooqBlacklist.BLACKLIST, io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist.class);
    }

    /**
     * Create a new JooqBlacklistDao with an attached configuration
     */
    public JooqBlacklistDao(Configuration configuration) {
        super(JooqBlacklist.BLACKLIST, io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqUuid(UUID... values) {
        return fetch(JooqBlacklist.BLACKLIST.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqBlacklist.BLACKLIST.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqBlacklist.BLACKLIST.UUID, value);
    }

    /**
     * Fetch records that have <code>binary_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqBinaryUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.BINARY_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>binary_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqBinaryUuid(UUID... values) {
        return fetch(JooqBlacklist.BLACKLIST.BINARY_UUID, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqCreated(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqCreated(String... values) {
        return fetch(JooqBlacklist.BLACKLIST.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqCreatorUuid(UUID... values) {
        return fetch(JooqBlacklist.BLACKLIST.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqEdited(LocalDateTime... values) {
        return fetch(JooqBlacklist.BLACKLIST.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqEditorUuid(UUID... values) {
        return fetch(JooqBlacklist.BLACKLIST.EDITOR_UUID, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqType(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqType(String... values) {
        return fetch(JooqBlacklist.BLACKLIST.TYPE, values);
    }

    /**
     * Fetch records that have <code>review_count BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqReviewCount(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.REVIEW_COUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>review_count IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqReviewCount(Integer... values) {
        return fetch(JooqBlacklist.BLACKLIST.REVIEW_COUNT, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchRangeOfJooqMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(JooqBlacklist.BLACKLIST.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqBlacklist> fetchByJooqMeta(JSONB... values) {
        return fetch(JooqBlacklist.BLACKLIST.META, values);
    }
}
