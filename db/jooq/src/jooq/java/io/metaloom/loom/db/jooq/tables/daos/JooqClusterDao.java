/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.enums.JooqClusterType;
import io.metaloom.loom.db.jooq.tables.JooqCluster;
import io.metaloom.loom.db.jooq.tables.records.JooqClusterRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * Generic cluster that aggregates multiple embeddings. 
 * A cluster could for example represent a person which can have multiple face
 * embeddings.
 * Alternatively media fingerprint embeddings can be used to group media
 * together by visual similarity.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqClusterDao extends DAOImpl<JooqClusterRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqCluster, UUID> {

    /**
     * Create a new JooqClusterDao without any configuration
     */
    public JooqClusterDao() {
        super(JooqCluster.CLUSTER, io.metaloom.loom.db.jooq.tables.pojos.JooqCluster.class);
    }

    /**
     * Create a new JooqClusterDao with an attached configuration
     */
    public JooqClusterDao(Configuration configuration) {
        super(JooqCluster.CLUSTER, io.metaloom.loom.db.jooq.tables.pojos.JooqCluster.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqCluster object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqUuid(UUID... values) {
        return fetch(JooqCluster.CLUSTER.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqCluster fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqCluster.CLUSTER.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqCluster.CLUSTER.UUID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqName(String... values) {
        return fetch(JooqCluster.CLUSTER.NAME, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqMeta(JSONB... values) {
        return fetch(JooqCluster.CLUSTER.META, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqType(JooqClusterType lowerInclusive, JooqClusterType upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqType(JooqClusterType... values) {
        return fetch(JooqCluster.CLUSTER.TYPE, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqCreated(LocalDateTime... values) {
        return fetch(JooqCluster.CLUSTER.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqCreatorUuid(UUID... values) {
        return fetch(JooqCluster.CLUSTER.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqEdited(LocalDateTime... values) {
        return fetch(JooqCluster.CLUSTER.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchRangeOfJooqEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqCluster.CLUSTER.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCluster> fetchByJooqEditorUuid(UUID... values) {
        return fetch(JooqCluster.CLUSTER.EDITOR_UUID, values);
    }
}
