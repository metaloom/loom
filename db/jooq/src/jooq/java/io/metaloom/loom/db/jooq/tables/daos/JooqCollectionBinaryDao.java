/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqCollectionBinary;
import io.metaloom.loom.db.jooq.tables.records.JooqCollectionBinaryRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * Track binaries that belong to a collection.
 * User facing this will result in all transitive assets being added to the
 * collection.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqCollectionBinaryDao extends DAOImpl<JooqCollectionBinaryRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary, Record2<UUID, UUID>> {

    /**
     * Create a new JooqCollectionBinaryDao without any configuration
     */
    public JooqCollectionBinaryDao() {
        super(JooqCollectionBinary.COLLECTION_BINARY, io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary.class);
    }

    /**
     * Create a new JooqCollectionBinaryDao with an attached configuration
     */
    public JooqCollectionBinaryDao(Configuration configuration) {
        super(JooqCollectionBinary.COLLECTION_BINARY, io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary object) {
        return compositeKeyRecord(object.getCollectionUuid(), object.getBinaryUuid());
    }

    /**
     * Fetch records that have <code>collection_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary> fetchRangeOfJooqCollectionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqCollectionBinary.COLLECTION_BINARY.COLLECTION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>collection_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary> fetchByJooqCollectionUuid(UUID... values) {
        return fetch(JooqCollectionBinary.COLLECTION_BINARY.COLLECTION_UUID, values);
    }

    /**
     * Fetch records that have <code>binary_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary> fetchRangeOfJooqBinaryUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqCollectionBinary.COLLECTION_BINARY.BINARY_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>binary_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqCollectionBinary> fetchByJooqBinaryUuid(UUID... values) {
        return fetch(JooqCollectionBinary.COLLECTION_BINARY.BINARY_UUID, values);
    }
}
