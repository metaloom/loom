/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqComment;
import io.metaloom.loom.db.jooq.tables.records.JooqCommentRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * Stores comments on tasks, annotations..
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqCommentDao extends DAOImpl<JooqCommentRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqComment, UUID> {

    /**
     * Create a new JooqCommentDao without any configuration
     */
    public JooqCommentDao() {
        super(JooqComment.COMMENT, io.metaloom.loom.db.jooq.tables.pojos.JooqComment.class);
    }

    /**
     * Create a new JooqCommentDao with an attached configuration
     */
    public JooqCommentDao(Configuration configuration) {
        super(JooqComment.COMMENT, io.metaloom.loom.db.jooq.tables.pojos.JooqComment.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqComment object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqComment.COMMENT.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqUuid(UUID... values) {
        return fetch(JooqComment.COMMENT.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqComment fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqComment.COMMENT.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqComment.COMMENT.UUID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqComment.COMMENT.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqTitle(String... values) {
        return fetch(JooqComment.COMMENT.TITLE, values);
    }

    /**
     * Fetch records that have <code>content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqComment.COMMENT.CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqContent(String... values) {
        return fetch(JooqComment.COMMENT.CONTENT, values);
    }

    /**
     * Fetch records that have <code>user_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqUserUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqComment.COMMENT.USER_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqUserUuid(UUID... values) {
        return fetch(JooqComment.COMMENT.USER_UUID, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqCreated(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqComment.COMMENT.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqCreated(String... values) {
        return fetch(JooqComment.COMMENT.CREATED, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqEdited(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqComment.COMMENT.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqEdited(String... values) {
        return fetch(JooqComment.COMMENT.EDITED, values);
    }

    /**
     * Fetch records that have <code>parent_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchRangeOfJooqParentUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqComment.COMMENT.PARENT_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqComment> fetchByJooqParentUuid(UUID... values) {
        return fetch(JooqComment.COMMENT.PARENT_UUID, values);
    }
}
