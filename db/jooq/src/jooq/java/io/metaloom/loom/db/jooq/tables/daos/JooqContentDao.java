/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.Content;
import io.metaloom.loom.db.jooq.tables.pojos.JooqContent;
import io.metaloom.loom.db.jooq.tables.records.ContentRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqContentDao extends DAOImpl<ContentRecord, JooqContent, UUID> {

    /**
     * Create a new JooqContentDao without any configuration
     */
    public JooqContentDao() {
        super(Content.CONTENT, JooqContent.class);
    }

    /**
     * Create a new JooqContentDao with an attached configuration
     */
    public JooqContentDao(Configuration configuration) {
        super(Content.CONTENT, JooqContent.class, configuration);
    }

    @Override
    public UUID getId(JooqContent object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Content.CONTENT.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<JooqContent> fetchByUuid(UUID... values) {
        return fetch(Content.CONTENT.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public JooqContent fetchOneByUuid(UUID value) {
        return fetchOne(Content.CONTENT.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<JooqContent> fetchOptionalByUuid(UUID value) {
        return fetchOptional(Content.CONTENT.UUID, value);
    }

    /**
     * Fetch records that have <code>namespace_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfNamespaceUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Content.CONTENT.NAMESPACE_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>namespace_uuid IN (values)</code>
     */
    public List<JooqContent> fetchByNamespaceUuid(UUID... values) {
        return fetch(Content.CONTENT.NAMESPACE_UUID, values);
    }

    /**
     * Fetch records that have <code>parent BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfParent(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Content.CONTENT.PARENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent IN (values)</code>
     */
    public List<JooqContent> fetchByParent(UUID... values) {
        return fetch(Content.CONTENT.PARENT, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Content.CONTENT.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<JooqContent> fetchByCreated(LocalDateTime... values) {
        return fetch(Content.CONTENT.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Content.CONTENT.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<JooqContent> fetchByCreatorUuid(UUID... values) {
        return fetch(Content.CONTENT.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Content.CONTENT.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<JooqContent> fetchByEdited(LocalDateTime... values) {
        return fetch(Content.CONTENT.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Content.CONTENT.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<JooqContent> fetchByEditorUuid(UUID... values) {
        return fetch(Content.CONTENT.EDITOR_UUID, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Content.CONTENT.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqContent> fetchByMeta(JSONB... values) {
        return fetch(Content.CONTENT.META, values);
    }

    /**
     * Fetch records that have <code>model_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqContent> fetchRangeOfModelUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Content.CONTENT.MODEL_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_uuid IN (values)</code>
     */
    public List<JooqContent> fetchByModelUuid(UUID... values) {
        return fetch(Content.CONTENT.MODEL_UUID, values);
    }
}
