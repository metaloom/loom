/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.enums.EmbeddingTypes;
import io.metaloom.loom.db.jooq.tables.Face;
import io.metaloom.loom.db.jooq.tables.pojos.JooqFace;
import io.metaloom.loom.db.jooq.tables.records.FaceRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * Stores embeddings
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqFaceDao extends DAOImpl<FaceRecord, JooqFace, UUID> {

    /**
     * Create a new JooqFaceDao without any configuration
     */
    public JooqFaceDao() {
        super(Face.FACE, JooqFace.class);
    }

    /**
     * Create a new JooqFaceDao with an attached configuration
     */
    public JooqFaceDao(Configuration configuration) {
        super(Face.FACE, JooqFace.class, configuration);
    }

    @Override
    public UUID getId(JooqFace object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFace> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Face.FACE.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<JooqFace> fetchByUuid(UUID... values) {
        return fetch(Face.FACE.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public JooqFace fetchOneByUuid(UUID value) {
        return fetchOne(Face.FACE.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<JooqFace> fetchOptionalByUuid(UUID value) {
        return fetchOptional(Face.FACE.UUID, value);
    }

    /**
     * Fetch records that have <code>source BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFace> fetchRangeOfSource(String lowerInclusive, String upperInclusive) {
        return fetchRange(Face.FACE.SOURCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source IN (values)</code>
     */
    public List<JooqFace> fetchBySource(String... values) {
        return fetch(Face.FACE.SOURCE, values);
    }

    /**
     * Fetch a unique record that has <code>source = value</code>
     */
    public JooqFace fetchOneBySource(String value) {
        return fetchOne(Face.FACE.SOURCE, value);
    }

    /**
     * Fetch a unique record that has <code>source = value</code>
     */
    public Optional<JooqFace> fetchOptionalBySource(String value) {
        return fetchOptional(Face.FACE.SOURCE, value);
    }

    /**
     * Fetch records that have <code>face_nr BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFace> fetchRangeOfFaceNr(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Face.FACE.FACE_NR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>face_nr IN (values)</code>
     */
    public List<JooqFace> fetchByFaceNr(Integer... values) {
        return fetch(Face.FACE.FACE_NR, values);
    }

    /**
     * Fetch records that have <code>blob BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFace> fetchRangeOfBlob(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Face.FACE.BLOB, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>blob IN (values)</code>
     */
    public List<JooqFace> fetchByBlob(byte[]... values) {
        return fetch(Face.FACE.BLOB, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFace> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Face.FACE.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqFace> fetchByMeta(JSONB... values) {
        return fetch(Face.FACE.META, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqFace> fetchRangeOfType(EmbeddingTypes lowerInclusive, EmbeddingTypes upperInclusive) {
        return fetchRange(Face.FACE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<JooqFace> fetchByType(EmbeddingTypes... values) {
        return fetch(Face.FACE.TYPE, values);
    }
}
