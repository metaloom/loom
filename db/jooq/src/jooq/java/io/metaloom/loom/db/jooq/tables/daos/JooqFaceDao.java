/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.enums.JooqEmbeddingTypes;
import io.metaloom.loom.db.jooq.tables.JooqFace;
import io.metaloom.loom.db.jooq.tables.records.JooqFaceRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * Stores embeddings
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqFaceDao extends DAOImpl<JooqFaceRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqFace, UUID> {

    /**
     * Create a new JooqFaceDao without any configuration
     */
    public JooqFaceDao() {
        super(JooqFace.FACE, io.metaloom.loom.db.jooq.tables.pojos.JooqFace.class);
    }

    /**
     * Create a new JooqFaceDao with an attached configuration
     */
    public JooqFaceDao(Configuration configuration) {
        super(JooqFace.FACE, io.metaloom.loom.db.jooq.tables.pojos.JooqFace.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqFace object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqFace.FACE.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchByJooqUuid(UUID... values) {
        return fetch(JooqFace.FACE.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqFace fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqFace.FACE.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqFace.FACE.UUID, value);
    }

    /**
     * Fetch records that have <code>source BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchRangeOfJooqSource(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqFace.FACE.SOURCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>source IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchByJooqSource(String... values) {
        return fetch(JooqFace.FACE.SOURCE, values);
    }

    /**
     * Fetch a unique record that has <code>source = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqFace fetchOneByJooqSource(String value) {
        return fetchOne(JooqFace.FACE.SOURCE, value);
    }

    /**
     * Fetch a unique record that has <code>source = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchOptionalByJooqSource(String value) {
        return fetchOptional(JooqFace.FACE.SOURCE, value);
    }

    /**
     * Fetch records that have <code>face_nr BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchRangeOfJooqFaceNr(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JooqFace.FACE.FACE_NR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>face_nr IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchByJooqFaceNr(Integer... values) {
        return fetch(JooqFace.FACE.FACE_NR, values);
    }

    /**
     * Fetch records that have <code>blob BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchRangeOfJooqBlob(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(JooqFace.FACE.BLOB, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>blob IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchByJooqBlob(byte[]... values) {
        return fetch(JooqFace.FACE.BLOB, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchRangeOfJooqMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(JooqFace.FACE.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchByJooqMeta(JSONB... values) {
        return fetch(JooqFace.FACE.META, values);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchRangeOfJooqType(JooqEmbeddingTypes lowerInclusive, JooqEmbeddingTypes upperInclusive) {
        return fetchRange(JooqFace.FACE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqFace> fetchByJooqType(JooqEmbeddingTypes... values) {
        return fetch(JooqFace.FACE.TYPE, values);
    }
}
