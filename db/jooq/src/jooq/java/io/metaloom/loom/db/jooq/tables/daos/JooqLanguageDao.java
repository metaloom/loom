/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqLanguage;
import io.metaloom.loom.db.jooq.tables.records.JooqLanguageRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * Table which stores the languages for loom
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqLanguageDao extends DAOImpl<JooqLanguageRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage, UUID> {

    /**
     * Create a new JooqLanguageDao without any configuration
     */
    public JooqLanguageDao() {
        super(JooqLanguage.LANGUAGE, io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage.class);
    }

    /**
     * Create a new JooqLanguageDao with an attached configuration
     */
    public JooqLanguageDao(Configuration configuration) {
        super(JooqLanguage.LANGUAGE, io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqLanguage.LANGUAGE.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchByJooqUuid(UUID... values) {
        return fetch(JooqLanguage.LANGUAGE.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqLanguage.LANGUAGE.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqLanguage.LANGUAGE.UUID, value);
    }

    /**
     * Fetch records that have <code>native_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchRangeOfJooqNativeName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqLanguage.LANGUAGE.NATIVE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>native_name IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchByJooqNativeName(String... values) {
        return fetch(JooqLanguage.LANGUAGE.NATIVE_NAME, values);
    }

    /**
     * Fetch records that have <code>tag BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchRangeOfJooqTag(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqLanguage.LANGUAGE.TAG, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchByJooqTag(String... values) {
        return fetch(JooqLanguage.LANGUAGE.TAG, values);
    }

    /**
     * Fetch a unique record that has <code>tag = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage fetchOneByJooqTag(String value) {
        return fetchOne(JooqLanguage.LANGUAGE.TAG, value);
    }

    /**
     * Fetch a unique record that has <code>tag = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchOptionalByJooqTag(String value) {
        return fetchOptional(JooqLanguage.LANGUAGE.TAG, value);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchRangeOfJooqMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(JooqLanguage.LANGUAGE.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqLanguage> fetchByJooqMeta(JSONB... values) {
        return fetch(JooqLanguage.LANGUAGE.META, values);
    }
}
