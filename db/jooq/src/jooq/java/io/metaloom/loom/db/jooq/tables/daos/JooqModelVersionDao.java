/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqModelVersion;
import io.metaloom.loom.db.jooq.tables.records.JooqModelVersionRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqModelVersionDao extends DAOImpl<JooqModelVersionRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion, UUID> {

    /**
     * Create a new JooqModelVersionDao without any configuration
     */
    public JooqModelVersionDao() {
        super(JooqModelVersion.MODEL_VERSION, io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion.class);
    }

    /**
     * Create a new JooqModelVersionDao with an attached configuration
     */
    public JooqModelVersionDao(Configuration configuration) {
        super(JooqModelVersion.MODEL_VERSION, io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqModelVersion.MODEL_VERSION.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchByJooqUuid(UUID... values) {
        return fetch(JooqModelVersion.MODEL_VERSION.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqModelVersion.MODEL_VERSION.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqModelVersion.MODEL_VERSION.UUID, value);
    }

    /**
     * Fetch records that have <code>model_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchRangeOfJooqModelUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqModelVersion.MODEL_VERSION.MODEL_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchByJooqModelUuid(UUID... values) {
        return fetch(JooqModelVersion.MODEL_VERSION.MODEL_UUID, values);
    }

    /**
     * Fetch records that have <code>json BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchRangeOfJooqJson(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqModelVersion.MODEL_VERSION.JSON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>json IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchByJooqJson(String... values) {
        return fetch(JooqModelVersion.MODEL_VERSION.JSON, values);
    }

    /**
     * Fetch records that have <code>next_version_uuid BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchRangeOfJooqNextVersionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqModelVersion.MODEL_VERSION.NEXT_VERSION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_version_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchByJooqNextVersionUuid(UUID... values) {
        return fetch(JooqModelVersion.MODEL_VERSION.NEXT_VERSION_UUID, values);
    }

    /**
     * Fetch records that have <code>prev_version_uuid BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchRangeOfJooqPrevVersionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqModelVersion.MODEL_VERSION.PREV_VERSION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>prev_version_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqModelVersion> fetchByJooqPrevVersionUuid(UUID... values) {
        return fetch(JooqModelVersion.MODEL_VERSION.PREV_VERSION_UUID, values);
    }
}
