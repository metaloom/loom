/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqRole;
import io.metaloom.loom.db.jooq.tables.records.JooqRoleRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqRoleDao extends DAOImpl<JooqRoleRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqRole, UUID> {

    /**
     * Create a new JooqRoleDao without any configuration
     */
    public JooqRoleDao() {
        super(JooqRole.ROLE, io.metaloom.loom.db.jooq.tables.pojos.JooqRole.class);
    }

    /**
     * Create a new JooqRoleDao with an attached configuration
     */
    public JooqRoleDao(Configuration configuration) {
        super(JooqRole.ROLE, io.metaloom.loom.db.jooq.tables.pojos.JooqRole.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqRole object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqRole.ROLE.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqUuid(UUID... values) {
        return fetch(JooqRole.ROLE.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqRole fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqRole.ROLE.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqRole.ROLE.UUID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqRole.ROLE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqName(String... values) {
        return fetch(JooqRole.ROLE.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqRole fetchOneByJooqName(String value) {
        return fetchOne(JooqRole.ROLE.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchOptionalByJooqName(String value) {
        return fetchOptional(JooqRole.ROLE.NAME, value);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(JooqRole.ROLE.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqMeta(JSONB... values) {
        return fetch(JooqRole.ROLE.META, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqRole.ROLE.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqCreated(LocalDateTime... values) {
        return fetch(JooqRole.ROLE.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqRole.ROLE.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqCreatorUuid(UUID... values) {
        return fetch(JooqRole.ROLE.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqRole.ROLE.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqEdited(LocalDateTime... values) {
        return fetch(JooqRole.ROLE.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchRangeOfJooqEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqRole.ROLE.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqRole> fetchByJooqEditorUuid(UUID... values) {
        return fetch(JooqRole.ROLE.EDITOR_UUID, values);
    }
}
