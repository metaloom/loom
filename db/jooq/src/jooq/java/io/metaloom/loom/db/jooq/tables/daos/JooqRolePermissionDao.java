/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.enums.LoomPermission;
import io.metaloom.loom.db.jooq.tables.RolePermission;
import io.metaloom.loom.db.jooq.tables.pojos.JooqRolePermission;
import io.metaloom.loom.db.jooq.tables.records.RolePermissionRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqRolePermissionDao extends DAOImpl<RolePermissionRecord, JooqRolePermission, Record2<UUID, String>> {

    /**
     * Create a new JooqRolePermissionDao without any configuration
     */
    public JooqRolePermissionDao() {
        super(RolePermission.ROLE_PERMISSION, JooqRolePermission.class);
    }

    /**
     * Create a new JooqRolePermissionDao with an attached configuration
     */
    public JooqRolePermissionDao(Configuration configuration) {
        super(RolePermission.ROLE_PERMISSION, JooqRolePermission.class, configuration);
    }

    @Override
    public Record2<UUID, String> getId(JooqRolePermission object) {
        return compositeKeyRecord(object.getRoleUuid(), object.getResource());
    }

    /**
     * Fetch records that have <code>role_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqRolePermission> fetchRangeOfRoleUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(RolePermission.ROLE_PERMISSION.ROLE_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>role_uuid IN (values)</code>
     */
    public List<JooqRolePermission> fetchByRoleUuid(UUID... values) {
        return fetch(RolePermission.ROLE_PERMISSION.ROLE_UUID, values);
    }

    /**
     * Fetch records that have <code>resource BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqRolePermission> fetchRangeOfResource(String lowerInclusive, String upperInclusive) {
        return fetchRange(RolePermission.ROLE_PERMISSION.RESOURCE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>resource IN (values)</code>
     */
    public List<JooqRolePermission> fetchByResource(String... values) {
        return fetch(RolePermission.ROLE_PERMISSION.RESOURCE, values);
    }

    /**
     * Fetch records that have <code>permission BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqRolePermission> fetchRangeOfPermission(LoomPermission lowerInclusive, LoomPermission upperInclusive) {
        return fetchRange(RolePermission.ROLE_PERMISSION.PERMISSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permission IN (values)</code>
     */
    public List<JooqRolePermission> fetchByPermission(LoomPermission... values) {
        return fetch(RolePermission.ROLE_PERMISSION.PERMISSION, values);
    }
}
