/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqTagAsset;
import io.metaloom.loom.db.jooq.tables.records.JooqTagAssetRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTagAssetDao extends DAOImpl<JooqTagAssetRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset, Record2<UUID, UUID>> {

    /**
     * Create a new JooqTagAssetDao without any configuration
     */
    public JooqTagAssetDao() {
        super(JooqTagAsset.TAG_ASSET, io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset.class);
    }

    /**
     * Create a new JooqTagAssetDao with an attached configuration
     */
    public JooqTagAssetDao(Configuration configuration) {
        super(JooqTagAsset.TAG_ASSET, io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset object) {
        return compositeKeyRecord(object.getTagUuid(), object.getAssetUuid());
    }

    /**
     * Fetch records that have <code>tag_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset> fetchRangeOfJooqTagUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqTagAsset.TAG_ASSET.TAG_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset> fetchByJooqTagUuid(UUID... values) {
        return fetch(JooqTagAsset.TAG_ASSET.TAG_UUID, values);
    }

    /**
     * Fetch records that have <code>asset_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset> fetchRangeOfJooqAssetUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqTagAsset.TAG_ASSET.ASSET_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>asset_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagAsset> fetchByJooqAssetUuid(UUID... values) {
        return fetch(JooqTagAsset.TAG_ASSET.ASSET_UUID, values);
    }
}
