/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqTagCollection;
import io.metaloom.loom.db.jooq.tables.records.JooqTagCollectionRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * Store tag &lt;-&gt; collection reference
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTagCollectionDao extends DAOImpl<JooqTagCollectionRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection, Record2<UUID, UUID>> {

    /**
     * Create a new JooqTagCollectionDao without any configuration
     */
    public JooqTagCollectionDao() {
        super(JooqTagCollection.TAG_COLLECTION, io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection.class);
    }

    /**
     * Create a new JooqTagCollectionDao with an attached configuration
     */
    public JooqTagCollectionDao(Configuration configuration) {
        super(JooqTagCollection.TAG_COLLECTION, io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection object) {
        return compositeKeyRecord(object.getTagUuid(), object.getCollectionUuid());
    }

    /**
     * Fetch records that have <code>tag_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection> fetchRangeOfJooqTagUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqTagCollection.TAG_COLLECTION.TAG_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection> fetchByJooqTagUuid(UUID... values) {
        return fetch(JooqTagCollection.TAG_COLLECTION.TAG_UUID, values);
    }

    /**
     * Fetch records that have <code>collection_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection> fetchRangeOfJooqCollectionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqTagCollection.TAG_COLLECTION.COLLECTION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>collection_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqTagCollection> fetchByJooqCollectionUuid(UUID... values) {
        return fetch(JooqTagCollection.TAG_COLLECTION.COLLECTION_UUID, values);
    }
}
