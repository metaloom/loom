/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.TagContent;
import io.metaloom.loom.db.jooq.tables.pojos.JooqTagContent;
import io.metaloom.loom.db.jooq.tables.records.TagContentRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTagContentDao extends DAOImpl<TagContentRecord, JooqTagContent, Record2<UUID, UUID>> {

    /**
     * Create a new JooqTagContentDao without any configuration
     */
    public JooqTagContentDao() {
        super(TagContent.TAG_CONTENT, JooqTagContent.class);
    }

    /**
     * Create a new JooqTagContentDao with an attached configuration
     */
    public JooqTagContentDao(Configuration configuration) {
        super(TagContent.TAG_CONTENT, JooqTagContent.class, configuration);
    }

    @Override
    public Record2<UUID, UUID> getId(JooqTagContent object) {
        return compositeKeyRecord(object.getTagUuid(), object.getContentUuid());
    }

    /**
     * Fetch records that have <code>tag_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTagContent> fetchRangeOfTagUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TagContent.TAG_CONTENT.TAG_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tag_uuid IN (values)</code>
     */
    public List<JooqTagContent> fetchByTagUuid(UUID... values) {
        return fetch(TagContent.TAG_CONTENT.TAG_UUID, values);
    }

    /**
     * Fetch records that have <code>content_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTagContent> fetchRangeOfContentUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(TagContent.TAG_CONTENT.CONTENT_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>content_uuid IN (values)</code>
     */
    public List<JooqTagContent> fetchByContentUuid(UUID... values) {
        return fetch(TagContent.TAG_CONTENT.CONTENT_UUID, values);
    }
}
