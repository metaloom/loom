/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.Tag;
import io.metaloom.loom.db.jooq.tables.pojos.JooqTag;
import io.metaloom.loom.db.jooq.tables.records.TagRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqTagDao extends DAOImpl<TagRecord, JooqTag, UUID> {

    /**
     * Create a new JooqTagDao without any configuration
     */
    public JooqTagDao() {
        super(Tag.TAG, JooqTag.class);
    }

    /**
     * Create a new JooqTagDao with an attached configuration
     */
    public JooqTagDao(Configuration configuration) {
        super(Tag.TAG, JooqTag.class, configuration);
    }

    @Override
    public UUID getId(JooqTag object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Tag.TAG.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<JooqTag> fetchByUuid(UUID... values) {
        return fetch(Tag.TAG.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public JooqTag fetchOneByUuid(UUID value) {
        return fetchOne(Tag.TAG.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<JooqTag> fetchOptionalByUuid(UUID value) {
        return fetchOptional(Tag.TAG.UUID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tag.TAG.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<JooqTag> fetchByName(String... values) {
        return fetch(Tag.TAG.NAME, values);
    }

    /**
     * Fetch records that have <code>collection BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfCollection(String lowerInclusive, String upperInclusive) {
        return fetchRange(Tag.TAG.COLLECTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>collection IN (values)</code>
     */
    public List<JooqTag> fetchByCollection(String... values) {
        return fetch(Tag.TAG.COLLECTION, values);
    }

    /**
     * Fetch records that have <code>namespace_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfNamespaceUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Tag.TAG.NAMESPACE_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>namespace_uuid IN (values)</code>
     */
    public List<JooqTag> fetchByNamespaceUuid(UUID... values) {
        return fetch(Tag.TAG.NAMESPACE_UUID, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(Tag.TAG.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqTag> fetchByMeta(JSONB... values) {
        return fetch(Tag.TAG.META, values);
    }

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfRating(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Tag.TAG.RATING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    public List<JooqTag> fetchByRating(Integer... values) {
        return fetch(Tag.TAG.RATING, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Tag.TAG.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<JooqTag> fetchByCreated(LocalDateTime... values) {
        return fetch(Tag.TAG.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Tag.TAG.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<JooqTag> fetchByCreatorUuid(UUID... values) {
        return fetch(Tag.TAG.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Tag.TAG.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<JooqTag> fetchByEdited(LocalDateTime... values) {
        return fetch(Tag.TAG.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqTag> fetchRangeOfEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Tag.TAG.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<JooqTag> fetchByEditorUuid(UUID... values) {
        return fetch(Tag.TAG.EDITOR_UUID, values);
    }
}
