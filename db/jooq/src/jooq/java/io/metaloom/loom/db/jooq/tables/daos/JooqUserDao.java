/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.JooqUser;
import io.metaloom.loom.db.jooq.tables.records.JooqUserRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqUserDao extends DAOImpl<JooqUserRecord, io.metaloom.loom.db.jooq.tables.pojos.JooqUser, UUID> {

    /**
     * Create a new JooqUserDao without any configuration
     */
    public JooqUserDao() {
        super(JooqUser.USER, io.metaloom.loom.db.jooq.tables.pojos.JooqUser.class);
    }

    /**
     * Create a new JooqUserDao with an attached configuration
     */
    public JooqUserDao(Configuration configuration) {
        super(JooqUser.USER, io.metaloom.loom.db.jooq.tables.pojos.JooqUser.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.JooqUser object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqUser.USER.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqUuid(UUID... values) {
        return fetch(JooqUser.USER.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqUser fetchOneByJooqUuid(UUID value) {
        return fetchOne(JooqUser.USER.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchOptionalByJooqUuid(UUID value) {
        return fetchOptional(JooqUser.USER.UUID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqUser.USER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqUsername(String... values) {
        return fetch(JooqUser.USER.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.JooqUser fetchOneByJooqUsername(String value) {
        return fetchOne(JooqUser.USER.USERNAME, value);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public Optional<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchOptionalByJooqUsername(String value) {
        return fetchOptional(JooqUser.USER.USERNAME, value);
    }

    /**
     * Fetch records that have <code>firstname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqUser.USER.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstname IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqFirstname(String... values) {
        return fetch(JooqUser.USER.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqUser.USER.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqLastname(String... values) {
        return fetch(JooqUser.USER.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqUser.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqEmail(String... values) {
        return fetch(JooqUser.USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(JooqUser.USER.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqEnabled(Boolean... values) {
        return fetch(JooqUser.USER.ENABLED, values);
    }

    /**
     * Fetch records that have <code>sso BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqSso(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(JooqUser.USER.SSO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sso IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqSso(Boolean... values) {
        return fetch(JooqUser.USER.SSO, values);
    }

    /**
     * Fetch records that have <code>passwordHash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqPasswordhash(String lowerInclusive, String upperInclusive) {
        return fetchRange(JooqUser.USER.PASSWORDHASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passwordHash IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqPasswordhash(String... values) {
        return fetch(JooqUser.USER.PASSWORDHASH, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(JooqUser.USER.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqMeta(JSONB... values) {
        return fetch(JooqUser.USER.META, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqUser.USER.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqCreated(LocalDateTime... values) {
        return fetch(JooqUser.USER.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqUser.USER.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqCreatorUuid(UUID... values) {
        return fetch(JooqUser.USER.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JooqUser.USER.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqEdited(LocalDateTime... values) {
        return fetch(JooqUser.USER.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchRangeOfJooqEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(JooqUser.USER.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.JooqUser> fetchByJooqEditorUuid(UUID... values) {
        return fetch(JooqUser.USER.EDITOR_UUID, values);
    }
}
