/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.enums.LoomPermissionFlag;
import io.metaloom.loom.db.jooq.tables.User;
import io.metaloom.loom.db.jooq.tables.pojos.JooqUser;
import io.metaloom.loom.db.jooq.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqUserDao extends DAOImpl<UserRecord, JooqUser, UUID> {

    /**
     * Create a new JooqUserDao without any configuration
     */
    public JooqUserDao() {
        super(User.USER, JooqUser.class);
    }

    /**
     * Create a new JooqUserDao with an attached configuration
     */
    public JooqUserDao(Configuration configuration) {
        super(User.USER, JooqUser.class, configuration);
    }

    @Override
    public UUID getId(JooqUser object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(User.USER.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<JooqUser> fetchByUuid(UUID... values) {
        return fetch(User.USER.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public JooqUser fetchOneByUuid(UUID value) {
        return fetchOne(User.USER.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<JooqUser> fetchOptionalByUuid(UUID value) {
        return fetchOptional(User.USER.UUID, value);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<JooqUser> fetchByUsername(String... values) {
        return fetch(User.USER.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public JooqUser fetchOneByUsername(String value) {
        return fetchOne(User.USER.USERNAME, value);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public Optional<JooqUser> fetchOptionalByUsername(String value) {
        return fetchOptional(User.USER.USERNAME, value);
    }

    /**
     * Fetch records that have <code>firstname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstname IN (values)</code>
     */
    public List<JooqUser> fetchByFirstname(String... values) {
        return fetch(User.USER.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    public List<JooqUser> fetchByLastname(String... values) {
        return fetch(User.USER.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>passwordhash BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfPasswordhash(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.PASSWORDHASH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>passwordhash IN (values)</code>
     */
    public List<JooqUser> fetchByPasswordhash(String... values) {
        return fetch(User.USER.PASSWORDHASH, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<JooqUser> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>enabled BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfEnabled(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(User.USER.ENABLED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>enabled IN (values)</code>
     */
    public List<JooqUser> fetchByEnabled(Boolean... values) {
        return fetch(User.USER.ENABLED, values);
    }

    /**
     * Fetch records that have <code>sso BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfSso(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(User.USER.SSO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sso IN (values)</code>
     */
    public List<JooqUser> fetchBySso(Boolean... values) {
        return fetch(User.USER.SSO, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(User.USER.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqUser> fetchByMeta(JSONB... values) {
        return fetch(User.USER.META, values);
    }

    /**
     * Fetch records that have <code>permissions BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfPermissions(LoomPermissionFlag lowerInclusive, LoomPermissionFlag upperInclusive) {
        return fetchRange(User.USER.PERMISSIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permissions IN (values)</code>
     */
    public List<JooqUser> fetchByPermissions(LoomPermissionFlag... values) {
        return fetch(User.USER.PERMISSIONS, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<JooqUser> fetchByCreated(LocalDateTime... values) {
        return fetch(User.USER.CREATED, values);
    }

    /**
     * Fetch records that have <code>creator_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfCreatorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(User.USER.CREATOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creator_uuid IN (values)</code>
     */
    public List<JooqUser> fetchByCreatorUuid(UUID... values) {
        return fetch(User.USER.CREATOR_UUID, values);
    }

    /**
     * Fetch records that have <code>edited BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfEdited(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.EDITED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>edited IN (values)</code>
     */
    public List<JooqUser> fetchByEdited(LocalDateTime... values) {
        return fetch(User.USER.EDITED, values);
    }

    /**
     * Fetch records that have <code>editor_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUser> fetchRangeOfEditorUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(User.USER.EDITOR_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>editor_uuid IN (values)</code>
     */
    public List<JooqUser> fetchByEditorUuid(UUID... values) {
        return fetch(User.USER.EDITOR_UUID, values);
    }
}
