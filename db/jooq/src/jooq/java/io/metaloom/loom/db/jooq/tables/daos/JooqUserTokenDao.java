/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.UserToken;
import io.metaloom.loom.db.jooq.tables.pojos.JooqUserToken;
import io.metaloom.loom.db.jooq.tables.records.UserTokenRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqUserTokenDao extends DAOImpl<UserTokenRecord, JooqUserToken, UUID> {

    /**
     * Create a new JooqUserTokenDao without any configuration
     */
    public JooqUserTokenDao() {
        super(UserToken.USER_TOKEN, JooqUserToken.class);
    }

    /**
     * Create a new JooqUserTokenDao with an attached configuration
     */
    public JooqUserTokenDao(Configuration configuration) {
        super(UserToken.USER_TOKEN, JooqUserToken.class, configuration);
    }

    @Override
    public UUID getId(JooqUserToken object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUserToken> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<JooqUserToken> fetchByUuid(UUID... values) {
        return fetch(UserToken.USER_TOKEN.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public JooqUserToken fetchOneByUuid(UUID value) {
        return fetchOne(UserToken.USER_TOKEN.UUID, value);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public Optional<JooqUserToken> fetchOptionalByUuid(UUID value) {
        return fetchOptional(UserToken.USER_TOKEN.UUID, value);
    }

    /**
     * Fetch records that have <code>user_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUserToken> fetchRangeOfUserUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.USER_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_uuid IN (values)</code>
     */
    public List<JooqUserToken> fetchByUserUuid(UUID... values) {
        return fetch(UserToken.USER_TOKEN.USER_UUID, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUserToken> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<JooqUserToken> fetchByDescription(String... values) {
        return fetch(UserToken.USER_TOKEN.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUserToken> fetchRangeOfToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<JooqUserToken> fetchByToken(String... values) {
        return fetch(UserToken.USER_TOKEN.TOKEN, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUserToken> fetchRangeOfCreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<JooqUserToken> fetchByCreated(LocalDateTime... values) {
        return fetch(UserToken.USER_TOKEN.CREATED, values);
    }

    /**
     * Fetch records that have <code>meta BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<JooqUserToken> fetchRangeOfMeta(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.META, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>meta IN (values)</code>
     */
    public List<JooqUserToken> fetchByMeta(JSONB... values) {
        return fetch(UserToken.USER_TOKEN.META, values);
    }
}
