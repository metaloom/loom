/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.tables.ModelVersion;
import io.metaloom.loom.db.jooq.tables.records.ModelVersionRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelVersionDao extends DAOImpl<ModelVersionRecord, io.metaloom.loom.db.jooq.tables.pojos.ModelVersion, UUID> {

    /**
     * Create a new ModelVersionDao without any configuration
     */
    public ModelVersionDao() {
        super(ModelVersion.MODEL_VERSION, io.metaloom.loom.db.jooq.tables.pojos.ModelVersion.class);
    }

    /**
     * Create a new ModelVersionDao with an attached configuration
     */
    public ModelVersionDao(Configuration configuration) {
        super(ModelVersion.MODEL_VERSION, io.metaloom.loom.db.jooq.tables.pojos.ModelVersion.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.ModelVersion object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ModelVersion.MODEL_VERSION.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchByUuid(UUID... values) {
        return fetch(ModelVersion.MODEL_VERSION.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.ModelVersion fetchOneByUuid(UUID value) {
        return fetchOne(ModelVersion.MODEL_VERSION.UUID, value);
    }

    /**
     * Fetch records that have <code>model_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchRangeOfModelUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ModelVersion.MODEL_VERSION.MODEL_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchByModelUuid(UUID... values) {
        return fetch(ModelVersion.MODEL_VERSION.MODEL_UUID, values);
    }

    /**
     * Fetch records that have <code>json BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchRangeOfJson(String lowerInclusive, String upperInclusive) {
        return fetchRange(ModelVersion.MODEL_VERSION.JSON, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>json IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchByJson(String... values) {
        return fetch(ModelVersion.MODEL_VERSION.JSON, values);
    }

    /**
     * Fetch records that have <code>next_version_uuid BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchRangeOfNextVersionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ModelVersion.MODEL_VERSION.NEXT_VERSION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>next_version_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchByNextVersionUuid(UUID... values) {
        return fetch(ModelVersion.MODEL_VERSION.NEXT_VERSION_UUID, values);
    }

    /**
     * Fetch records that have <code>prev_version_uuid BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchRangeOfPrevVersionUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ModelVersion.MODEL_VERSION.PREV_VERSION_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>prev_version_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.ModelVersion> fetchByPrevVersionUuid(UUID... values) {
        return fetch(ModelVersion.MODEL_VERSION.PREV_VERSION_UUID, values);
    }
}
