/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.metaloom.loom.db.jooq.enums.LoomPermissionFlag;
import io.metaloom.loom.db.jooq.tables.UserToken;
import io.metaloom.loom.db.jooq.tables.records.UserTokenRecord;

import java.util.List;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTokenDao extends DAOImpl<UserTokenRecord, io.metaloom.loom.db.jooq.tables.pojos.UserToken, UUID> {

    /**
     * Create a new UserTokenDao without any configuration
     */
    public UserTokenDao() {
        super(UserToken.USER_TOKEN, io.metaloom.loom.db.jooq.tables.pojos.UserToken.class);
    }

    /**
     * Create a new UserTokenDao with an attached configuration
     */
    public UserTokenDao(Configuration configuration) {
        super(UserToken.USER_TOKEN, io.metaloom.loom.db.jooq.tables.pojos.UserToken.class, configuration);
    }

    @Override
    public UUID getId(io.metaloom.loom.db.jooq.tables.pojos.UserToken object) {
        return object.getUuid();
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchByUuid(UUID... values) {
        return fetch(UserToken.USER_TOKEN.UUID, values);
    }

    /**
     * Fetch a unique record that has <code>uuid = value</code>
     */
    public io.metaloom.loom.db.jooq.tables.pojos.UserToken fetchOneByUuid(UUID value) {
        return fetchOne(UserToken.USER_TOKEN.UUID, value);
    }

    /**
     * Fetch records that have <code>user_uuid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchRangeOfUserUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.USER_UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_uuid IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchByUserUuid(UUID... values) {
        return fetch(UserToken.USER_TOKEN.USER_UUID, values);
    }

    /**
     * Fetch records that have <code>note BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchRangeOfNote(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.NOTE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>note IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchByNote(String... values) {
        return fetch(UserToken.USER_TOKEN.NOTE, values);
    }

    /**
     * Fetch records that have <code>token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchRangeOfToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchByToken(String... values) {
        return fetch(UserToken.USER_TOKEN.TOKEN, values);
    }

    /**
     * Fetch records that have <code>permissions BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchRangeOfPermissions(LoomPermissionFlag lowerInclusive, LoomPermissionFlag upperInclusive) {
        return fetchRange(UserToken.USER_TOKEN.PERMISSIONS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permissions IN (values)</code>
     */
    public List<io.metaloom.loom.db.jooq.tables.pojos.UserToken> fetchByPermissions(LoomPermissionFlag... values) {
        return fetch(UserToken.USER_TOKEN.PERMISSIONS, values);
    }
}
