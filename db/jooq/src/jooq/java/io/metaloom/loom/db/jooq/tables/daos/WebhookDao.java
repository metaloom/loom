/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.enums.LoomEvents;
import io.metaloom.loom.db.jooq.tables.Webhook;
import io.metaloom.loom.db.jooq.tables.records.WebhookRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * Table which stores the registered webhooks
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebhookDao extends AbstractReactiveVertxDAO<WebhookRecord, io.metaloom.loom.db.jooq.tables.pojos.Webhook, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Webhook>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<WebhookRecord,io.metaloom.loom.db.jooq.tables.pojos.Webhook,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public WebhookDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Webhook.WEBHOOK, io.metaloom.loom.db.jooq.tables.pojos.Webhook.class, new ReactiveRXQueryExecutor<WebhookRecord,io.metaloom.loom.db.jooq.tables.pojos.Webhook,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getWebhookMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Webhook object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>url IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByUrl(Collection<String> values) {
                return findManyByCondition(Webhook.WEBHOOK.URL.in(values));
        }

        /**
     * Find records that have <code>url IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByUrl(Collection<String> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.URL.in(values),limit);
        }

        /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(Webhook.WEBHOOK.STATUS.in(values));
        }

        /**
     * Find records that have <code>status IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>active IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByActive(Collection<Boolean> values) {
                return findManyByCondition(Webhook.WEBHOOK.ACTIVE.in(values));
        }

        /**
     * Find records that have <code>active IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByActive(Collection<Boolean> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.ACTIVE.in(values),limit);
        }

        /**
     * Find records that have <code>triggers IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByTriggers(Collection<LoomEvents> values) {
                return findManyByCondition(Webhook.WEBHOOK.TRIGGERS.in(values));
        }

        /**
     * Find records that have <code>triggers IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByTriggers(Collection<LoomEvents> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.TRIGGERS.in(values),limit);
        }

        /**
     * Find records that have <code>secretToken IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyBySecrettoken(Collection<String> values) {
                return findManyByCondition(Webhook.WEBHOOK.SECRETTOKEN.in(values));
        }

        /**
     * Find records that have <code>secretToken IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyBySecrettoken(Collection<String> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.SECRETTOKEN.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(Webhook.WEBHOOK.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.META.in(values),limit);
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByCreated(Collection<LocalDateTime> values) {
                return findManyByCondition(Webhook.WEBHOOK.CREATED.in(values));
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByCreated(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.CREATED.in(values),limit);
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByCreatorUuid(Collection<UUID> values) {
                return findManyByCondition(Webhook.WEBHOOK.CREATOR_UUID.in(values));
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByCreatorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.CREATOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByEdited(Collection<LocalDateTime> values) {
                return findManyByCondition(Webhook.WEBHOOK.EDITED.in(values));
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByEdited(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.EDITED.in(values),limit);
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByEditorUuid(Collection<UUID> values) {
                return findManyByCondition(Webhook.WEBHOOK.EDITOR_UUID.in(values));
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Webhook>> findManyByEditorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Webhook.WEBHOOK.EDITOR_UUID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<WebhookRecord,io.metaloom.loom.db.jooq.tables.pojos.Webhook,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<WebhookRecord,io.metaloom.loom.db.jooq.tables.pojos.Webhook,UUID>) super.queryExecutor();
        }
}
