/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.tables.interfaces.IAsset;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Asset implements VertxPojo, IAsset {

    private static final long serialVersionUID = 1L;

    private UUID          uuid;
    private UUID          assetBinaryUuid;
    private UUID          namespaceUuid;
    private String        filename;
    private String        localpath;
    private String        meta;
    private Integer       rating;
    private String        dominantcolor;
    private String        mimetype;
    private BigDecimal    gpsLon;
    private BigDecimal    gpsLat;
    private String        s3BucketName;
    private String        s3ObjectPath;
    private LocalDateTime created;
    private UUID          creatorUuid;
    private LocalDateTime edited;
    private UUID          editorUuid;

    public Asset() {}

    public Asset(IAsset value) {
        this.uuid = value.getUuid();
        this.assetBinaryUuid = value.getAssetBinaryUuid();
        this.namespaceUuid = value.getNamespaceUuid();
        this.filename = value.getFilename();
        this.localpath = value.getLocalpath();
        this.meta = value.getMeta();
        this.rating = value.getRating();
        this.dominantcolor = value.getDominantcolor();
        this.mimetype = value.getMimetype();
        this.gpsLon = value.getGpsLon();
        this.gpsLat = value.getGpsLat();
        this.s3BucketName = value.getS3BucketName();
        this.s3ObjectPath = value.getS3ObjectPath();
        this.created = value.getCreated();
        this.creatorUuid = value.getCreatorUuid();
        this.edited = value.getEdited();
        this.editorUuid = value.getEditorUuid();
    }

    public Asset(
        UUID          uuid,
        UUID          assetBinaryUuid,
        UUID          namespaceUuid,
        String        filename,
        String        localpath,
        String        meta,
        Integer       rating,
        String        dominantcolor,
        String        mimetype,
        BigDecimal    gpsLon,
        BigDecimal    gpsLat,
        String        s3BucketName,
        String        s3ObjectPath,
        LocalDateTime created,
        UUID          creatorUuid,
        LocalDateTime edited,
        UUID          editorUuid
    ) {
        this.uuid = uuid;
        this.assetBinaryUuid = assetBinaryUuid;
        this.namespaceUuid = namespaceUuid;
        this.filename = filename;
        this.localpath = localpath;
        this.meta = meta;
        this.rating = rating;
        this.dominantcolor = dominantcolor;
        this.mimetype = mimetype;
        this.gpsLon = gpsLon;
        this.gpsLat = gpsLat;
        this.s3BucketName = s3BucketName;
        this.s3ObjectPath = s3ObjectPath;
        this.created = created;
        this.creatorUuid = creatorUuid;
        this.edited = edited;
        this.editorUuid = editorUuid;
    }

        public Asset(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>public.asset.uuid</code>.
     */
    @Override
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.asset.uuid</code>.
     */
    @Override
    public Asset setUuid(UUID uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Getter for <code>public.asset.asset_binary_uuid</code>.
     */
    @Override
    public UUID getAssetBinaryUuid() {
        return this.assetBinaryUuid;
    }

    /**
     * Setter for <code>public.asset.asset_binary_uuid</code>.
     */
    @Override
    public Asset setAssetBinaryUuid(UUID assetBinaryUuid) {
        this.assetBinaryUuid = assetBinaryUuid;
        return this;
    }

    /**
     * Getter for <code>public.asset.namespace_uuid</code>.
     */
    @Override
    public UUID getNamespaceUuid() {
        return this.namespaceUuid;
    }

    /**
     * Setter for <code>public.asset.namespace_uuid</code>.
     */
    @Override
    public Asset setNamespaceUuid(UUID namespaceUuid) {
        this.namespaceUuid = namespaceUuid;
        return this;
    }

    /**
     * Getter for <code>public.asset.filename</code>.
     */
    @Override
    public String getFilename() {
        return this.filename;
    }

    /**
     * Setter for <code>public.asset.filename</code>.
     */
    @Override
    public Asset setFilename(String filename) {
        this.filename = filename;
        return this;
    }

    /**
     * Getter for <code>public.asset.localPath</code>. Local path to the asset (when using the local path feature)
     */
    @Override
    public String getLocalpath() {
        return this.localpath;
    }

    /**
     * Setter for <code>public.asset.localPath</code>. Local path to the asset (when using the local path feature)
     */
    @Override
    public Asset setLocalpath(String localpath) {
        this.localpath = localpath;
        return this;
    }

    /**
     * Getter for <code>public.asset.meta</code>. Custom meta properties to the element
     */
    @Override
    public String getMeta() {
        return this.meta;
    }

    /**
     * Setter for <code>public.asset.meta</code>. Custom meta properties to the element
     */
    @Override
    public Asset setMeta(String meta) {
        this.meta = meta;
        return this;
    }

    /**
     * Getter for <code>public.asset.rating</code>. Absolute or computed asset rating
     */
    @Override
    public Integer getRating() {
        return this.rating;
    }

    /**
     * Setter for <code>public.asset.rating</code>. Absolute or computed asset rating
     */
    @Override
    public Asset setRating(Integer rating) {
        this.rating = rating;
        return this;
    }

    /**
     * Getter for <code>public.asset.dominantColor</code>.
     */
    @Override
    public String getDominantcolor() {
        return this.dominantcolor;
    }

    /**
     * Setter for <code>public.asset.dominantColor</code>.
     */
    @Override
    public Asset setDominantcolor(String dominantcolor) {
        this.dominantcolor = dominantcolor;
        return this;
    }

    /**
     * Getter for <code>public.asset.mimeType</code>.
     */
    @Override
    public String getMimetype() {
        return this.mimetype;
    }

    /**
     * Setter for <code>public.asset.mimeType</code>.
     */
    @Override
    public Asset setMimetype(String mimetype) {
        this.mimetype = mimetype;
        return this;
    }

    /**
     * Getter for <code>public.asset.gps_lon</code>.
     */
    @Override
    public BigDecimal getGpsLon() {
        return this.gpsLon;
    }

    /**
     * Setter for <code>public.asset.gps_lon</code>.
     */
    @Override
    public Asset setGpsLon(BigDecimal gpsLon) {
        this.gpsLon = gpsLon;
        return this;
    }

    /**
     * Getter for <code>public.asset.gps_lat</code>.
     */
    @Override
    public BigDecimal getGpsLat() {
        return this.gpsLat;
    }

    /**
     * Setter for <code>public.asset.gps_lat</code>.
     */
    @Override
    public Asset setGpsLat(BigDecimal gpsLat) {
        this.gpsLat = gpsLat;
        return this;
    }

    /**
     * Getter for <code>public.asset.s3_bucket_name</code>.
     */
    @Override
    public String getS3BucketName() {
        return this.s3BucketName;
    }

    /**
     * Setter for <code>public.asset.s3_bucket_name</code>.
     */
    @Override
    public Asset setS3BucketName(String s3BucketName) {
        this.s3BucketName = s3BucketName;
        return this;
    }

    /**
     * Getter for <code>public.asset.s3_object_path</code>.
     */
    @Override
    public String getS3ObjectPath() {
        return this.s3ObjectPath;
    }

    /**
     * Setter for <code>public.asset.s3_object_path</code>.
     */
    @Override
    public Asset setS3ObjectPath(String s3ObjectPath) {
        this.s3ObjectPath = s3ObjectPath;
        return this;
    }

    /**
     * Getter for <code>public.asset.created</code>.
     */
    @Override
    public LocalDateTime getCreated() {
        return this.created;
    }

    /**
     * Setter for <code>public.asset.created</code>.
     */
    @Override
    public Asset setCreated(LocalDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * Getter for <code>public.asset.creator_uuid</code>.
     */
    @Override
    public UUID getCreatorUuid() {
        return this.creatorUuid;
    }

    /**
     * Setter for <code>public.asset.creator_uuid</code>.
     */
    @Override
    public Asset setCreatorUuid(UUID creatorUuid) {
        this.creatorUuid = creatorUuid;
        return this;
    }

    /**
     * Getter for <code>public.asset.edited</code>.
     */
    @Override
    public LocalDateTime getEdited() {
        return this.edited;
    }

    /**
     * Setter for <code>public.asset.edited</code>.
     */
    @Override
    public Asset setEdited(LocalDateTime edited) {
        this.edited = edited;
        return this;
    }

    /**
     * Getter for <code>public.asset.editor_uuid</code>.
     */
    @Override
    public UUID getEditorUuid() {
        return this.editorUuid;
    }

    /**
     * Setter for <code>public.asset.editor_uuid</code>.
     */
    @Override
    public Asset setEditorUuid(UUID editorUuid) {
        this.editorUuid = editorUuid;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Asset (");

        sb.append(uuid);
        sb.append(", ").append(assetBinaryUuid);
        sb.append(", ").append(namespaceUuid);
        sb.append(", ").append(filename);
        sb.append(", ").append(localpath);
        sb.append(", ").append(meta);
        sb.append(", ").append(rating);
        sb.append(", ").append(dominantcolor);
        sb.append(", ").append(mimetype);
        sb.append(", ").append(gpsLon);
        sb.append(", ").append(gpsLat);
        sb.append(", ").append(s3BucketName);
        sb.append(", ").append(s3ObjectPath);
        sb.append(", ").append(created);
        sb.append(", ").append(creatorUuid);
        sb.append(", ").append(edited);
        sb.append(", ").append(editorUuid);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IAsset from) {
        setUuid(from.getUuid());
        setAssetBinaryUuid(from.getAssetBinaryUuid());
        setNamespaceUuid(from.getNamespaceUuid());
        setFilename(from.getFilename());
        setLocalpath(from.getLocalpath());
        setMeta(from.getMeta());
        setRating(from.getRating());
        setDominantcolor(from.getDominantcolor());
        setMimetype(from.getMimetype());
        setGpsLon(from.getGpsLon());
        setGpsLat(from.getGpsLat());
        setS3BucketName(from.getS3BucketName());
        setS3ObjectPath(from.getS3ObjectPath());
        setCreated(from.getCreated());
        setCreatorUuid(from.getCreatorUuid());
        setEdited(from.getEdited());
        setEditorUuid(from.getEditorUuid());
    }

    @Override
    public <E extends IAsset> E into(E into) {
        into.from(this);
        return into;
    }
}
