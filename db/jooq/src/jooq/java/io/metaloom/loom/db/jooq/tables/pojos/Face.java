/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.metaloom.loom.db.jooq.enums.EmbeddingTypes;

import java.io.Serializable;
import java.util.Arrays;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * Stores embeddings
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Face implements Serializable {

    private static final long serialVersionUID = 1L;

    private UUID uuid;
    private String source;
    private Integer faceNr;
    private byte[] blob;
    private JSONB meta;
    private EmbeddingTypes type;

    public Face() {}

    public Face(Face value) {
        this.uuid = value.uuid;
        this.source = value.source;
        this.faceNr = value.faceNr;
        this.blob = value.blob;
        this.meta = value.meta;
        this.type = value.type;
    }

    public Face(
        UUID uuid,
        String source,
        Integer faceNr,
        byte[] blob,
        JSONB meta,
        EmbeddingTypes type
    ) {
        this.uuid = uuid;
        this.source = source;
        this.faceNr = faceNr;
        this.blob = blob;
        this.meta = meta;
        this.type = type;
    }

    /**
     * Getter for <code>public.face.uuid</code>.
     */
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.face.uuid</code>.
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    /**
     * Getter for <code>public.face.source</code>. Identification of the source
     * media
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Setter for <code>public.face.source</code>. Identification of the source
     * media
     */
    public void setSource(String source) {
        this.source = source;
    }

    /**
     * Getter for <code>public.face.face_nr</code>. When the source contains
     * more than one face the id can be used to identify them.
     */
    public Integer getFaceNr() {
        return this.faceNr;
    }

    /**
     * Setter for <code>public.face.face_nr</code>. When the source contains
     * more than one face the id can be used to identify them.
     */
    public void setFaceNr(Integer faceNr) {
        this.faceNr = faceNr;
    }

    /**
     * Getter for <code>public.face.blob</code>. The actual embedding data
     */
    public byte[] getBlob() {
        return this.blob;
    }

    /**
     * Setter for <code>public.face.blob</code>. The actual embedding data
     */
    public void setBlob(byte[] blob) {
        this.blob = blob;
    }

    /**
     * Getter for <code>public.face.meta</code>. Custom meta properties to the
     * face
     */
    public JSONB getMeta() {
        return this.meta;
    }

    /**
     * Setter for <code>public.face.meta</code>. Custom meta properties to the
     * face
     */
    public void setMeta(JSONB meta) {
        this.meta = meta;
    }

    /**
     * Getter for <code>public.face.type</code>.
     */
    public EmbeddingTypes getType() {
        return this.type;
    }

    /**
     * Setter for <code>public.face.type</code>.
     */
    public void setType(EmbeddingTypes type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Face other = (Face) obj;
        if (this.uuid == null) {
            if (other.uuid != null)
                return false;
        }
        else if (!this.uuid.equals(other.uuid))
            return false;
        if (this.source == null) {
            if (other.source != null)
                return false;
        }
        else if (!this.source.equals(other.source))
            return false;
        if (this.faceNr == null) {
            if (other.faceNr != null)
                return false;
        }
        else if (!this.faceNr.equals(other.faceNr))
            return false;
        if (this.blob == null) {
            if (other.blob != null)
                return false;
        }
        else if (!Arrays.equals(this.blob, other.blob))
            return false;
        if (this.meta == null) {
            if (other.meta != null)
                return false;
        }
        else if (!this.meta.equals(other.meta))
            return false;
        if (this.type == null) {
            if (other.type != null)
                return false;
        }
        else if (!this.type.equals(other.type))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
        result = prime * result + ((this.source == null) ? 0 : this.source.hashCode());
        result = prime * result + ((this.faceNr == null) ? 0 : this.faceNr.hashCode());
        result = prime * result + ((this.blob == null) ? 0 : Arrays.hashCode(this.blob));
        result = prime * result + ((this.meta == null) ? 0 : this.meta.hashCode());
        result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Face (");

        sb.append(uuid);
        sb.append(", ").append(source);
        sb.append(", ").append(faceNr);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(meta);
        sb.append(", ").append(type);

        sb.append(")");
        return sb.toString();
    }
}
