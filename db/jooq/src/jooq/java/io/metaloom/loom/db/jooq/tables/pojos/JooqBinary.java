/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * This table stores information on the binary component of the asset
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqBinary implements Serializable {

    private static final long serialVersionUID = 1L;

    private UUID uuid;
    private String sha512sum;
    private Long size;
    private String sha256sum;
    private String md5sum;
    private String chunkHash;
    private Long zeroChunkCount;
    private String mimeType;
    private JSONB meta;
    private String author;
    private BigDecimal geoLon;
    private BigDecimal geoLat;
    private String initialOrigin;
    private LocalDateTime created;
    private UUID creatorUuid;
    private LocalDateTime edited;
    private UUID editorUuid;
    private String s3BucketName;
    private String s3ObjectPath;
    private Integer mediaWidth;
    private Integer mediaHeight;
    private Integer duration;
    private String videoFingerprint;
    private String imageFingerprint;
    private String imageDominantColor;
    private Integer audioBpm;
    private Integer audioSamplingRate;
    private Integer audioChannels;
    private String audioEncoding;
    private String audioFingerprint;
    private String docPlainText;
    private Integer docWordCount;

    public JooqBinary() {}

    public JooqBinary(JooqBinary value) {
        this.uuid = value.uuid;
        this.sha512sum = value.sha512sum;
        this.size = value.size;
        this.sha256sum = value.sha256sum;
        this.md5sum = value.md5sum;
        this.chunkHash = value.chunkHash;
        this.zeroChunkCount = value.zeroChunkCount;
        this.mimeType = value.mimeType;
        this.meta = value.meta;
        this.author = value.author;
        this.geoLon = value.geoLon;
        this.geoLat = value.geoLat;
        this.initialOrigin = value.initialOrigin;
        this.created = value.created;
        this.creatorUuid = value.creatorUuid;
        this.edited = value.edited;
        this.editorUuid = value.editorUuid;
        this.s3BucketName = value.s3BucketName;
        this.s3ObjectPath = value.s3ObjectPath;
        this.mediaWidth = value.mediaWidth;
        this.mediaHeight = value.mediaHeight;
        this.duration = value.duration;
        this.videoFingerprint = value.videoFingerprint;
        this.imageFingerprint = value.imageFingerprint;
        this.imageDominantColor = value.imageDominantColor;
        this.audioBpm = value.audioBpm;
        this.audioSamplingRate = value.audioSamplingRate;
        this.audioChannels = value.audioChannels;
        this.audioEncoding = value.audioEncoding;
        this.audioFingerprint = value.audioFingerprint;
        this.docPlainText = value.docPlainText;
        this.docWordCount = value.docWordCount;
    }

    public JooqBinary(
        UUID uuid,
        String sha512sum,
        Long size,
        String sha256sum,
        String md5sum,
        String chunkHash,
        Long zeroChunkCount,
        String mimeType,
        JSONB meta,
        String author,
        BigDecimal geoLon,
        BigDecimal geoLat,
        String initialOrigin,
        LocalDateTime created,
        UUID creatorUuid,
        LocalDateTime edited,
        UUID editorUuid,
        String s3BucketName,
        String s3ObjectPath,
        Integer mediaWidth,
        Integer mediaHeight,
        Integer duration,
        String videoFingerprint,
        String imageFingerprint,
        String imageDominantColor,
        Integer audioBpm,
        Integer audioSamplingRate,
        Integer audioChannels,
        String audioEncoding,
        String audioFingerprint,
        String docPlainText,
        Integer docWordCount
    ) {
        this.uuid = uuid;
        this.sha512sum = sha512sum;
        this.size = size;
        this.sha256sum = sha256sum;
        this.md5sum = md5sum;
        this.chunkHash = chunkHash;
        this.zeroChunkCount = zeroChunkCount;
        this.mimeType = mimeType;
        this.meta = meta;
        this.author = author;
        this.geoLon = geoLon;
        this.geoLat = geoLat;
        this.initialOrigin = initialOrigin;
        this.created = created;
        this.creatorUuid = creatorUuid;
        this.edited = edited;
        this.editorUuid = editorUuid;
        this.s3BucketName = s3BucketName;
        this.s3ObjectPath = s3ObjectPath;
        this.mediaWidth = mediaWidth;
        this.mediaHeight = mediaHeight;
        this.duration = duration;
        this.videoFingerprint = videoFingerprint;
        this.imageFingerprint = imageFingerprint;
        this.imageDominantColor = imageDominantColor;
        this.audioBpm = audioBpm;
        this.audioSamplingRate = audioSamplingRate;
        this.audioChannels = audioChannels;
        this.audioEncoding = audioEncoding;
        this.audioFingerprint = audioFingerprint;
        this.docPlainText = docPlainText;
        this.docWordCount = docWordCount;
    }

    /**
     * Getter for <code>public.binary.uuid</code>.
     */
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.binary.uuid</code>.
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    /**
     * Getter for <code>public.binary.sha512sum</code>.
     */
    public String getSha512sum() {
        return this.sha512sum;
    }

    /**
     * Setter for <code>public.binary.sha512sum</code>.
     */
    public void setSha512sum(String sha512sum) {
        this.sha512sum = sha512sum;
    }

    /**
     * Getter for <code>public.binary.size</code>.
     */
    public Long getSize() {
        return this.size;
    }

    /**
     * Setter for <code>public.binary.size</code>.
     */
    public void setSize(Long size) {
        this.size = size;
    }

    /**
     * Getter for <code>public.binary.sha256sum</code>.
     */
    public String getSha256sum() {
        return this.sha256sum;
    }

    /**
     * Setter for <code>public.binary.sha256sum</code>.
     */
    public void setSha256sum(String sha256sum) {
        this.sha256sum = sha256sum;
    }

    /**
     * Getter for <code>public.binary.md5sum</code>.
     */
    public String getMd5sum() {
        return this.md5sum;
    }

    /**
     * Setter for <code>public.binary.md5sum</code>.
     */
    public void setMd5sum(String md5sum) {
        this.md5sum = md5sum;
    }

    /**
     * Getter for <code>public.binary.chunk_hash</code>.
     */
    public String getChunkHash() {
        return this.chunkHash;
    }

    /**
     * Setter for <code>public.binary.chunk_hash</code>.
     */
    public void setChunkHash(String chunkHash) {
        this.chunkHash = chunkHash;
    }

    /**
     * Getter for <code>public.binary.zero_chunk_count</code>.
     */
    public Long getZeroChunkCount() {
        return this.zeroChunkCount;
    }

    /**
     * Setter for <code>public.binary.zero_chunk_count</code>.
     */
    public void setZeroChunkCount(Long zeroChunkCount) {
        this.zeroChunkCount = zeroChunkCount;
    }

    /**
     * Getter for <code>public.binary.mime_type</code>.
     */
    public String getMimeType() {
        return this.mimeType;
    }

    /**
     * Setter for <code>public.binary.mime_type</code>.
     */
    public void setMimeType(String mimeType) {
        this.mimeType = mimeType;
    }

    /**
     * Getter for <code>public.binary.meta</code>. Custom meta properties to the
     * asset
     */
    public JSONB getMeta() {
        return this.meta;
    }

    /**
     * Setter for <code>public.binary.meta</code>. Custom meta properties to the
     * asset
     */
    public void setMeta(JSONB meta) {
        this.meta = meta;
    }

    /**
     * Getter for <code>public.binary.author</code>.
     */
    public String getAuthor() {
        return this.author;
    }

    /**
     * Setter for <code>public.binary.author</code>.
     */
    public void setAuthor(String author) {
        this.author = author;
    }

    /**
     * Getter for <code>public.binary.geo_lon</code>.
     */
    public BigDecimal getGeoLon() {
        return this.geoLon;
    }

    /**
     * Setter for <code>public.binary.geo_lon</code>.
     */
    public void setGeoLon(BigDecimal geoLon) {
        this.geoLon = geoLon;
    }

    /**
     * Getter for <code>public.binary.geo_lat</code>.
     */
    public BigDecimal getGeoLat() {
        return this.geoLat;
    }

    /**
     * Setter for <code>public.binary.geo_lat</code>.
     */
    public void setGeoLat(BigDecimal geoLat) {
        this.geoLat = geoLat;
    }

    /**
     * Getter for <code>public.binary.initial_origin</code>. Document the
     * initial origin of the binary (e.g. first filepath encountered, first s3
     * path, url, hash)
     */
    public String getInitialOrigin() {
        return this.initialOrigin;
    }

    /**
     * Setter for <code>public.binary.initial_origin</code>. Document the
     * initial origin of the binary (e.g. first filepath encountered, first s3
     * path, url, hash)
     */
    public void setInitialOrigin(String initialOrigin) {
        this.initialOrigin = initialOrigin;
    }

    /**
     * Getter for <code>public.binary.created</code>.
     */
    public LocalDateTime getCreated() {
        return this.created;
    }

    /**
     * Setter for <code>public.binary.created</code>.
     */
    public void setCreated(LocalDateTime created) {
        this.created = created;
    }

    /**
     * Getter for <code>public.binary.creator_uuid</code>.
     */
    public UUID getCreatorUuid() {
        return this.creatorUuid;
    }

    /**
     * Setter for <code>public.binary.creator_uuid</code>.
     */
    public void setCreatorUuid(UUID creatorUuid) {
        this.creatorUuid = creatorUuid;
    }

    /**
     * Getter for <code>public.binary.edited</code>.
     */
    public LocalDateTime getEdited() {
        return this.edited;
    }

    /**
     * Setter for <code>public.binary.edited</code>.
     */
    public void setEdited(LocalDateTime edited) {
        this.edited = edited;
    }

    /**
     * Getter for <code>public.binary.editor_uuid</code>.
     */
    public UUID getEditorUuid() {
        return this.editorUuid;
    }

    /**
     * Setter for <code>public.binary.editor_uuid</code>.
     */
    public void setEditorUuid(UUID editorUuid) {
        this.editorUuid = editorUuid;
    }

    /**
     * Getter for <code>public.binary.s3_bucket_name</code>.
     */
    public String getS3BucketName() {
        return this.s3BucketName;
    }

    /**
     * Setter for <code>public.binary.s3_bucket_name</code>.
     */
    public void setS3BucketName(String s3BucketName) {
        this.s3BucketName = s3BucketName;
    }

    /**
     * Getter for <code>public.binary.s3_object_path</code>.
     */
    public String getS3ObjectPath() {
        return this.s3ObjectPath;
    }

    /**
     * Setter for <code>public.binary.s3_object_path</code>.
     */
    public void setS3ObjectPath(String s3ObjectPath) {
        this.s3ObjectPath = s3ObjectPath;
    }

    /**
     * Getter for <code>public.binary.media_width</code>. Only set for images,
     * video
     */
    public Integer getMediaWidth() {
        return this.mediaWidth;
    }

    /**
     * Setter for <code>public.binary.media_width</code>. Only set for images,
     * video
     */
    public void setMediaWidth(Integer mediaWidth) {
        this.mediaWidth = mediaWidth;
    }

    /**
     * Getter for <code>public.binary.media_height</code>. Only set for images,
     * video
     */
    public Integer getMediaHeight() {
        return this.mediaHeight;
    }

    /**
     * Setter for <code>public.binary.media_height</code>. Only set for images,
     * video
     */
    public void setMediaHeight(Integer mediaHeight) {
        this.mediaHeight = mediaHeight;
    }

    /**
     * Getter for <code>public.binary.duration</code>. Duration of the video,
     * audio
     */
    public Integer getDuration() {
        return this.duration;
    }

    /**
     * Setter for <code>public.binary.duration</code>. Duration of the video,
     * audio
     */
    public void setDuration(Integer duration) {
        this.duration = duration;
    }

    /**
     * Getter for <code>public.binary.video_fingerprint</code>. Video
     * fingerprint information
     */
    public String getVideoFingerprint() {
        return this.videoFingerprint;
    }

    /**
     * Setter for <code>public.binary.video_fingerprint</code>. Video
     * fingerprint information
     */
    public void setVideoFingerprint(String videoFingerprint) {
        this.videoFingerprint = videoFingerprint;
    }

    /**
     * Getter for <code>public.binary.image_fingerprint</code>. Image
     * fingerprint information
     */
    public String getImageFingerprint() {
        return this.imageFingerprint;
    }

    /**
     * Setter for <code>public.binary.image_fingerprint</code>. Image
     * fingerprint information
     */
    public void setImageFingerprint(String imageFingerprint) {
        this.imageFingerprint = imageFingerprint;
    }

    /**
     * Getter for <code>public.binary.image_dominant_color</code>.
     */
    public String getImageDominantColor() {
        return this.imageDominantColor;
    }

    /**
     * Setter for <code>public.binary.image_dominant_color</code>.
     */
    public void setImageDominantColor(String imageDominantColor) {
        this.imageDominantColor = imageDominantColor;
    }

    /**
     * Getter for <code>public.binary.audio_bpm</code>.
     */
    public Integer getAudioBpm() {
        return this.audioBpm;
    }

    /**
     * Setter for <code>public.binary.audio_bpm</code>.
     */
    public void setAudioBpm(Integer audioBpm) {
        this.audioBpm = audioBpm;
    }

    /**
     * Getter for <code>public.binary.audio_sampling_rate</code>.
     */
    public Integer getAudioSamplingRate() {
        return this.audioSamplingRate;
    }

    /**
     * Setter for <code>public.binary.audio_sampling_rate</code>.
     */
    public void setAudioSamplingRate(Integer audioSamplingRate) {
        this.audioSamplingRate = audioSamplingRate;
    }

    /**
     * Getter for <code>public.binary.audio_channels</code>.
     */
    public Integer getAudioChannels() {
        return this.audioChannels;
    }

    /**
     * Setter for <code>public.binary.audio_channels</code>.
     */
    public void setAudioChannels(Integer audioChannels) {
        this.audioChannels = audioChannels;
    }

    /**
     * Getter for <code>public.binary.audio_encoding</code>. Store the audio
     * encoding used for the binary (e.g. mp3, flac)
     */
    public String getAudioEncoding() {
        return this.audioEncoding;
    }

    /**
     * Setter for <code>public.binary.audio_encoding</code>. Store the audio
     * encoding used for the binary (e.g. mp3, flac)
     */
    public void setAudioEncoding(String audioEncoding) {
        this.audioEncoding = audioEncoding;
    }

    /**
     * Getter for <code>public.binary.audio_fingerprint</code>. Audio
     * fingerprint information
     */
    public String getAudioFingerprint() {
        return this.audioFingerprint;
    }

    /**
     * Setter for <code>public.binary.audio_fingerprint</code>. Audio
     * fingerprint information
     */
    public void setAudioFingerprint(String audioFingerprint) {
        this.audioFingerprint = audioFingerprint;
    }

    /**
     * Getter for <code>public.binary.doc_plain_text</code>. Extracted text of
     * the document
     */
    public String getDocPlainText() {
        return this.docPlainText;
    }

    /**
     * Setter for <code>public.binary.doc_plain_text</code>. Extracted text of
     * the document
     */
    public void setDocPlainText(String docPlainText) {
        this.docPlainText = docPlainText;
    }

    /**
     * Getter for <code>public.binary.doc_word_count</code>.
     */
    public Integer getDocWordCount() {
        return this.docWordCount;
    }

    /**
     * Setter for <code>public.binary.doc_word_count</code>.
     */
    public void setDocWordCount(Integer docWordCount) {
        this.docWordCount = docWordCount;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final JooqBinary other = (JooqBinary) obj;
        if (this.uuid == null) {
            if (other.uuid != null)
                return false;
        }
        else if (!this.uuid.equals(other.uuid))
            return false;
        if (this.sha512sum == null) {
            if (other.sha512sum != null)
                return false;
        }
        else if (!this.sha512sum.equals(other.sha512sum))
            return false;
        if (this.size == null) {
            if (other.size != null)
                return false;
        }
        else if (!this.size.equals(other.size))
            return false;
        if (this.sha256sum == null) {
            if (other.sha256sum != null)
                return false;
        }
        else if (!this.sha256sum.equals(other.sha256sum))
            return false;
        if (this.md5sum == null) {
            if (other.md5sum != null)
                return false;
        }
        else if (!this.md5sum.equals(other.md5sum))
            return false;
        if (this.chunkHash == null) {
            if (other.chunkHash != null)
                return false;
        }
        else if (!this.chunkHash.equals(other.chunkHash))
            return false;
        if (this.zeroChunkCount == null) {
            if (other.zeroChunkCount != null)
                return false;
        }
        else if (!this.zeroChunkCount.equals(other.zeroChunkCount))
            return false;
        if (this.mimeType == null) {
            if (other.mimeType != null)
                return false;
        }
        else if (!this.mimeType.equals(other.mimeType))
            return false;
        if (this.meta == null) {
            if (other.meta != null)
                return false;
        }
        else if (!this.meta.equals(other.meta))
            return false;
        if (this.author == null) {
            if (other.author != null)
                return false;
        }
        else if (!this.author.equals(other.author))
            return false;
        if (this.geoLon == null) {
            if (other.geoLon != null)
                return false;
        }
        else if (!this.geoLon.equals(other.geoLon))
            return false;
        if (this.geoLat == null) {
            if (other.geoLat != null)
                return false;
        }
        else if (!this.geoLat.equals(other.geoLat))
            return false;
        if (this.initialOrigin == null) {
            if (other.initialOrigin != null)
                return false;
        }
        else if (!this.initialOrigin.equals(other.initialOrigin))
            return false;
        if (this.created == null) {
            if (other.created != null)
                return false;
        }
        else if (!this.created.equals(other.created))
            return false;
        if (this.creatorUuid == null) {
            if (other.creatorUuid != null)
                return false;
        }
        else if (!this.creatorUuid.equals(other.creatorUuid))
            return false;
        if (this.edited == null) {
            if (other.edited != null)
                return false;
        }
        else if (!this.edited.equals(other.edited))
            return false;
        if (this.editorUuid == null) {
            if (other.editorUuid != null)
                return false;
        }
        else if (!this.editorUuid.equals(other.editorUuid))
            return false;
        if (this.s3BucketName == null) {
            if (other.s3BucketName != null)
                return false;
        }
        else if (!this.s3BucketName.equals(other.s3BucketName))
            return false;
        if (this.s3ObjectPath == null) {
            if (other.s3ObjectPath != null)
                return false;
        }
        else if (!this.s3ObjectPath.equals(other.s3ObjectPath))
            return false;
        if (this.mediaWidth == null) {
            if (other.mediaWidth != null)
                return false;
        }
        else if (!this.mediaWidth.equals(other.mediaWidth))
            return false;
        if (this.mediaHeight == null) {
            if (other.mediaHeight != null)
                return false;
        }
        else if (!this.mediaHeight.equals(other.mediaHeight))
            return false;
        if (this.duration == null) {
            if (other.duration != null)
                return false;
        }
        else if (!this.duration.equals(other.duration))
            return false;
        if (this.videoFingerprint == null) {
            if (other.videoFingerprint != null)
                return false;
        }
        else if (!this.videoFingerprint.equals(other.videoFingerprint))
            return false;
        if (this.imageFingerprint == null) {
            if (other.imageFingerprint != null)
                return false;
        }
        else if (!this.imageFingerprint.equals(other.imageFingerprint))
            return false;
        if (this.imageDominantColor == null) {
            if (other.imageDominantColor != null)
                return false;
        }
        else if (!this.imageDominantColor.equals(other.imageDominantColor))
            return false;
        if (this.audioBpm == null) {
            if (other.audioBpm != null)
                return false;
        }
        else if (!this.audioBpm.equals(other.audioBpm))
            return false;
        if (this.audioSamplingRate == null) {
            if (other.audioSamplingRate != null)
                return false;
        }
        else if (!this.audioSamplingRate.equals(other.audioSamplingRate))
            return false;
        if (this.audioChannels == null) {
            if (other.audioChannels != null)
                return false;
        }
        else if (!this.audioChannels.equals(other.audioChannels))
            return false;
        if (this.audioEncoding == null) {
            if (other.audioEncoding != null)
                return false;
        }
        else if (!this.audioEncoding.equals(other.audioEncoding))
            return false;
        if (this.audioFingerprint == null) {
            if (other.audioFingerprint != null)
                return false;
        }
        else if (!this.audioFingerprint.equals(other.audioFingerprint))
            return false;
        if (this.docPlainText == null) {
            if (other.docPlainText != null)
                return false;
        }
        else if (!this.docPlainText.equals(other.docPlainText))
            return false;
        if (this.docWordCount == null) {
            if (other.docWordCount != null)
                return false;
        }
        else if (!this.docWordCount.equals(other.docWordCount))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
        result = prime * result + ((this.sha512sum == null) ? 0 : this.sha512sum.hashCode());
        result = prime * result + ((this.size == null) ? 0 : this.size.hashCode());
        result = prime * result + ((this.sha256sum == null) ? 0 : this.sha256sum.hashCode());
        result = prime * result + ((this.md5sum == null) ? 0 : this.md5sum.hashCode());
        result = prime * result + ((this.chunkHash == null) ? 0 : this.chunkHash.hashCode());
        result = prime * result + ((this.zeroChunkCount == null) ? 0 : this.zeroChunkCount.hashCode());
        result = prime * result + ((this.mimeType == null) ? 0 : this.mimeType.hashCode());
        result = prime * result + ((this.meta == null) ? 0 : this.meta.hashCode());
        result = prime * result + ((this.author == null) ? 0 : this.author.hashCode());
        result = prime * result + ((this.geoLon == null) ? 0 : this.geoLon.hashCode());
        result = prime * result + ((this.geoLat == null) ? 0 : this.geoLat.hashCode());
        result = prime * result + ((this.initialOrigin == null) ? 0 : this.initialOrigin.hashCode());
        result = prime * result + ((this.created == null) ? 0 : this.created.hashCode());
        result = prime * result + ((this.creatorUuid == null) ? 0 : this.creatorUuid.hashCode());
        result = prime * result + ((this.edited == null) ? 0 : this.edited.hashCode());
        result = prime * result + ((this.editorUuid == null) ? 0 : this.editorUuid.hashCode());
        result = prime * result + ((this.s3BucketName == null) ? 0 : this.s3BucketName.hashCode());
        result = prime * result + ((this.s3ObjectPath == null) ? 0 : this.s3ObjectPath.hashCode());
        result = prime * result + ((this.mediaWidth == null) ? 0 : this.mediaWidth.hashCode());
        result = prime * result + ((this.mediaHeight == null) ? 0 : this.mediaHeight.hashCode());
        result = prime * result + ((this.duration == null) ? 0 : this.duration.hashCode());
        result = prime * result + ((this.videoFingerprint == null) ? 0 : this.videoFingerprint.hashCode());
        result = prime * result + ((this.imageFingerprint == null) ? 0 : this.imageFingerprint.hashCode());
        result = prime * result + ((this.imageDominantColor == null) ? 0 : this.imageDominantColor.hashCode());
        result = prime * result + ((this.audioBpm == null) ? 0 : this.audioBpm.hashCode());
        result = prime * result + ((this.audioSamplingRate == null) ? 0 : this.audioSamplingRate.hashCode());
        result = prime * result + ((this.audioChannels == null) ? 0 : this.audioChannels.hashCode());
        result = prime * result + ((this.audioEncoding == null) ? 0 : this.audioEncoding.hashCode());
        result = prime * result + ((this.audioFingerprint == null) ? 0 : this.audioFingerprint.hashCode());
        result = prime * result + ((this.docPlainText == null) ? 0 : this.docPlainText.hashCode());
        result = prime * result + ((this.docWordCount == null) ? 0 : this.docWordCount.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("JooqBinary (");

        sb.append(uuid);
        sb.append(", ").append(sha512sum);
        sb.append(", ").append(size);
        sb.append(", ").append(sha256sum);
        sb.append(", ").append(md5sum);
        sb.append(", ").append(chunkHash);
        sb.append(", ").append(zeroChunkCount);
        sb.append(", ").append(mimeType);
        sb.append(", ").append(meta);
        sb.append(", ").append(author);
        sb.append(", ").append(geoLon);
        sb.append(", ").append(geoLat);
        sb.append(", ").append(initialOrigin);
        sb.append(", ").append(created);
        sb.append(", ").append(creatorUuid);
        sb.append(", ").append(edited);
        sb.append(", ").append(editorUuid);
        sb.append(", ").append(s3BucketName);
        sb.append(", ").append(s3ObjectPath);
        sb.append(", ").append(mediaWidth);
        sb.append(", ").append(mediaHeight);
        sb.append(", ").append(duration);
        sb.append(", ").append(videoFingerprint);
        sb.append(", ").append(imageFingerprint);
        sb.append(", ").append(imageDominantColor);
        sb.append(", ").append(audioBpm);
        sb.append(", ").append(audioSamplingRate);
        sb.append(", ").append(audioChannels);
        sb.append(", ").append(audioEncoding);
        sb.append(", ").append(audioFingerprint);
        sb.append(", ").append(docPlainText);
        sb.append(", ").append(docWordCount);

        sb.append(")");
        return sb.toString();
    }
}
