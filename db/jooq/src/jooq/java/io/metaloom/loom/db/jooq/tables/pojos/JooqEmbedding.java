/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.metaloom.loom.db.jooq.enums.JooqEmbeddingType;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * Embedding information which was extracted from a binary.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JooqEmbedding implements Serializable {

    private static final long serialVersionUID = 1L;

    private UUID uuid;
    private JSONB meta;
    private String source;
    private Integer frame;
    private Integer areaheight;
    private Integer areawidth;
    private Integer areastartx;
    private Integer areastarty;
    private byte[] embeddings;
    private Long embeddingId;
    private JooqEmbeddingType embeddingType;
    private LocalDateTime created;
    private UUID creatorUuid;
    private LocalDateTime edited;
    private UUID editorUuid;
    private UUID binaryUuid;

    public JooqEmbedding() {}

    public JooqEmbedding(JooqEmbedding value) {
        this.uuid = value.uuid;
        this.meta = value.meta;
        this.source = value.source;
        this.frame = value.frame;
        this.areaheight = value.areaheight;
        this.areawidth = value.areawidth;
        this.areastartx = value.areastartx;
        this.areastarty = value.areastarty;
        this.embeddings = value.embeddings;
        this.embeddingId = value.embeddingId;
        this.embeddingType = value.embeddingType;
        this.created = value.created;
        this.creatorUuid = value.creatorUuid;
        this.edited = value.edited;
        this.editorUuid = value.editorUuid;
        this.binaryUuid = value.binaryUuid;
    }

    public JooqEmbedding(
        UUID uuid,
        JSONB meta,
        String source,
        Integer frame,
        Integer areaheight,
        Integer areawidth,
        Integer areastartx,
        Integer areastarty,
        byte[] embeddings,
        Long embeddingId,
        JooqEmbeddingType embeddingType,
        LocalDateTime created,
        UUID creatorUuid,
        LocalDateTime edited,
        UUID editorUuid,
        UUID binaryUuid
    ) {
        this.uuid = uuid;
        this.meta = meta;
        this.source = source;
        this.frame = frame;
        this.areaheight = areaheight;
        this.areawidth = areawidth;
        this.areastartx = areastartx;
        this.areastarty = areastarty;
        this.embeddings = embeddings;
        this.embeddingId = embeddingId;
        this.embeddingType = embeddingType;
        this.created = created;
        this.creatorUuid = creatorUuid;
        this.edited = edited;
        this.editorUuid = editorUuid;
        this.binaryUuid = binaryUuid;
    }

    /**
     * Getter for <code>public.embedding.uuid</code>.
     */
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.embedding.uuid</code>.
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    /**
     * Getter for <code>public.embedding.meta</code>. Custom meta properties to
     * the embedding.
     */
    public JSONB getMeta() {
        return this.meta;
    }

    /**
     * Setter for <code>public.embedding.meta</code>. Custom meta properties to
     * the embedding.
     */
    public void setMeta(JSONB meta) {
        this.meta = meta;
    }

    /**
     * Getter for <code>public.embedding.source</code>. Additional source
     * information (e.g. face number by dlib)
     */
    public String getSource() {
        return this.source;
    }

    /**
     * Setter for <code>public.embedding.source</code>. Additional source
     * information (e.g. face number by dlib)
     */
    public void setSource(String source) {
        this.source = source;
    }

    /**
     * Getter for <code>public.embedding.frame</code>. Source frame where the
     * face has been detected.
     */
    public Integer getFrame() {
        return this.frame;
    }

    /**
     * Setter for <code>public.embedding.frame</code>. Source frame where the
     * face has been detected.
     */
    public void setFrame(Integer frame) {
        this.frame = frame;
    }

    /**
     * Getter for <code>public.embedding.areaHeight</code>. Area info where the
     * face has been detected.
     */
    public Integer getAreaheight() {
        return this.areaheight;
    }

    /**
     * Setter for <code>public.embedding.areaHeight</code>. Area info where the
     * face has been detected.
     */
    public void setAreaheight(Integer areaheight) {
        this.areaheight = areaheight;
    }

    /**
     * Getter for <code>public.embedding.areaWidth</code>. Area info where the
     * face has been detected.
     */
    public Integer getAreawidth() {
        return this.areawidth;
    }

    /**
     * Setter for <code>public.embedding.areaWidth</code>. Area info where the
     * face has been detected.
     */
    public void setAreawidth(Integer areawidth) {
        this.areawidth = areawidth;
    }

    /**
     * Getter for <code>public.embedding.areaStartX</code>. Area info where the
     * face has been detected.
     */
    public Integer getAreastartx() {
        return this.areastartx;
    }

    /**
     * Setter for <code>public.embedding.areaStartX</code>. Area info where the
     * face has been detected.
     */
    public void setAreastartx(Integer areastartx) {
        this.areastartx = areastartx;
    }

    /**
     * Getter for <code>public.embedding.areaStartY</code>. Area info where the
     * face has been detected.
     */
    public Integer getAreastarty() {
        return this.areastarty;
    }

    /**
     * Setter for <code>public.embedding.areaStartY</code>. Area info where the
     * face has been detected.
     */
    public void setAreastarty(Integer areastarty) {
        this.areastarty = areastarty;
    }

    /**
     * Getter for <code>public.embedding.embeddings</code>. Actual embedding
     * data
     */
    public byte[] getEmbeddings() {
        return this.embeddings;
    }

    /**
     * Setter for <code>public.embedding.embeddings</code>. Actual embedding
     * data
     */
    public void setEmbeddings(byte[] embeddings) {
        this.embeddings = embeddings;
    }

    /**
     * Getter for <code>public.embedding.embedding_id</code>.
     */
    public Long getEmbeddingId() {
        return this.embeddingId;
    }

    /**
     * Setter for <code>public.embedding.embedding_id</code>.
     */
    public void setEmbeddingId(Long embeddingId) {
        this.embeddingId = embeddingId;
    }

    /**
     * Getter for <code>public.embedding.embedding_type</code>. Type of the
     * embedding (e.g. dlib_facemark)
     */
    public JooqEmbeddingType getEmbeddingType() {
        return this.embeddingType;
    }

    /**
     * Setter for <code>public.embedding.embedding_type</code>. Type of the
     * embedding (e.g. dlib_facemark)
     */
    public void setEmbeddingType(JooqEmbeddingType embeddingType) {
        this.embeddingType = embeddingType;
    }

    /**
     * Getter for <code>public.embedding.created</code>.
     */
    public LocalDateTime getCreated() {
        return this.created;
    }

    /**
     * Setter for <code>public.embedding.created</code>.
     */
    public void setCreated(LocalDateTime created) {
        this.created = created;
    }

    /**
     * Getter for <code>public.embedding.creator_uuid</code>.
     */
    public UUID getCreatorUuid() {
        return this.creatorUuid;
    }

    /**
     * Setter for <code>public.embedding.creator_uuid</code>.
     */
    public void setCreatorUuid(UUID creatorUuid) {
        this.creatorUuid = creatorUuid;
    }

    /**
     * Getter for <code>public.embedding.edited</code>.
     */
    public LocalDateTime getEdited() {
        return this.edited;
    }

    /**
     * Setter for <code>public.embedding.edited</code>.
     */
    public void setEdited(LocalDateTime edited) {
        this.edited = edited;
    }

    /**
     * Getter for <code>public.embedding.editor_uuid</code>.
     */
    public UUID getEditorUuid() {
        return this.editorUuid;
    }

    /**
     * Setter for <code>public.embedding.editor_uuid</code>.
     */
    public void setEditorUuid(UUID editorUuid) {
        this.editorUuid = editorUuid;
    }

    /**
     * Getter for <code>public.embedding.binary_uuid</code>.
     */
    public UUID getBinaryUuid() {
        return this.binaryUuid;
    }

    /**
     * Setter for <code>public.embedding.binary_uuid</code>.
     */
    public void setBinaryUuid(UUID binaryUuid) {
        this.binaryUuid = binaryUuid;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final JooqEmbedding other = (JooqEmbedding) obj;
        if (this.uuid == null) {
            if (other.uuid != null)
                return false;
        }
        else if (!this.uuid.equals(other.uuid))
            return false;
        if (this.meta == null) {
            if (other.meta != null)
                return false;
        }
        else if (!this.meta.equals(other.meta))
            return false;
        if (this.source == null) {
            if (other.source != null)
                return false;
        }
        else if (!this.source.equals(other.source))
            return false;
        if (this.frame == null) {
            if (other.frame != null)
                return false;
        }
        else if (!this.frame.equals(other.frame))
            return false;
        if (this.areaheight == null) {
            if (other.areaheight != null)
                return false;
        }
        else if (!this.areaheight.equals(other.areaheight))
            return false;
        if (this.areawidth == null) {
            if (other.areawidth != null)
                return false;
        }
        else if (!this.areawidth.equals(other.areawidth))
            return false;
        if (this.areastartx == null) {
            if (other.areastartx != null)
                return false;
        }
        else if (!this.areastartx.equals(other.areastartx))
            return false;
        if (this.areastarty == null) {
            if (other.areastarty != null)
                return false;
        }
        else if (!this.areastarty.equals(other.areastarty))
            return false;
        if (this.embeddings == null) {
            if (other.embeddings != null)
                return false;
        }
        else if (!Arrays.equals(this.embeddings, other.embeddings))
            return false;
        if (this.embeddingId == null) {
            if (other.embeddingId != null)
                return false;
        }
        else if (!this.embeddingId.equals(other.embeddingId))
            return false;
        if (this.embeddingType == null) {
            if (other.embeddingType != null)
                return false;
        }
        else if (!this.embeddingType.equals(other.embeddingType))
            return false;
        if (this.created == null) {
            if (other.created != null)
                return false;
        }
        else if (!this.created.equals(other.created))
            return false;
        if (this.creatorUuid == null) {
            if (other.creatorUuid != null)
                return false;
        }
        else if (!this.creatorUuid.equals(other.creatorUuid))
            return false;
        if (this.edited == null) {
            if (other.edited != null)
                return false;
        }
        else if (!this.edited.equals(other.edited))
            return false;
        if (this.editorUuid == null) {
            if (other.editorUuid != null)
                return false;
        }
        else if (!this.editorUuid.equals(other.editorUuid))
            return false;
        if (this.binaryUuid == null) {
            if (other.binaryUuid != null)
                return false;
        }
        else if (!this.binaryUuid.equals(other.binaryUuid))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
        result = prime * result + ((this.meta == null) ? 0 : this.meta.hashCode());
        result = prime * result + ((this.source == null) ? 0 : this.source.hashCode());
        result = prime * result + ((this.frame == null) ? 0 : this.frame.hashCode());
        result = prime * result + ((this.areaheight == null) ? 0 : this.areaheight.hashCode());
        result = prime * result + ((this.areawidth == null) ? 0 : this.areawidth.hashCode());
        result = prime * result + ((this.areastartx == null) ? 0 : this.areastartx.hashCode());
        result = prime * result + ((this.areastarty == null) ? 0 : this.areastarty.hashCode());
        result = prime * result + ((this.embeddings == null) ? 0 : Arrays.hashCode(this.embeddings));
        result = prime * result + ((this.embeddingId == null) ? 0 : this.embeddingId.hashCode());
        result = prime * result + ((this.embeddingType == null) ? 0 : this.embeddingType.hashCode());
        result = prime * result + ((this.created == null) ? 0 : this.created.hashCode());
        result = prime * result + ((this.creatorUuid == null) ? 0 : this.creatorUuid.hashCode());
        result = prime * result + ((this.edited == null) ? 0 : this.edited.hashCode());
        result = prime * result + ((this.editorUuid == null) ? 0 : this.editorUuid.hashCode());
        result = prime * result + ((this.binaryUuid == null) ? 0 : this.binaryUuid.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("JooqEmbedding (");

        sb.append(uuid);
        sb.append(", ").append(meta);
        sb.append(", ").append(source);
        sb.append(", ").append(frame);
        sb.append(", ").append(areaheight);
        sb.append(", ").append(areawidth);
        sb.append(", ").append(areastartx);
        sb.append(", ").append(areastarty);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(embeddingId);
        sb.append(", ").append(embeddingType);
        sb.append(", ").append(created);
        sb.append(", ").append(creatorUuid);
        sb.append(", ").append(edited);
        sb.append(", ").append(editorUuid);
        sb.append(", ").append(binaryUuid);

        sb.append(")");
        return sb.toString();
    }
}
