/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.enums.LoomPermissionFlag;
import io.metaloom.loom.db.jooq.tables.interfaces.IUserToken;

import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserToken implements VertxPojo, IUserToken {

    private static final long serialVersionUID = 1L;

    private UUID               uuid;
    private UUID               userUuid;
    private String             note;
    private String             token;
    private LoomPermissionFlag permissions;

    public UserToken() {}

    public UserToken(IUserToken value) {
        this.uuid = value.getUuid();
        this.userUuid = value.getUserUuid();
        this.note = value.getNote();
        this.token = value.getToken();
        this.permissions = value.getPermissions();
    }

    public UserToken(
        UUID               uuid,
        UUID               userUuid,
        String             note,
        String             token,
        LoomPermissionFlag permissions
    ) {
        this.uuid = uuid;
        this.userUuid = userUuid;
        this.note = note;
        this.token = token;
        this.permissions = permissions;
    }

        public UserToken(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>public.user_token.uuid</code>.
     */
    @Override
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.user_token.uuid</code>.
     */
    @Override
    public UserToken setUuid(UUID uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Getter for <code>public.user_token.user_uuid</code>.
     */
    @Override
    public UUID getUserUuid() {
        return this.userUuid;
    }

    /**
     * Setter for <code>public.user_token.user_uuid</code>.
     */
    @Override
    public UserToken setUserUuid(UUID userUuid) {
        this.userUuid = userUuid;
        return this;
    }

    /**
     * Getter for <code>public.user_token.note</code>.
     */
    @Override
    public String getNote() {
        return this.note;
    }

    /**
     * Setter for <code>public.user_token.note</code>.
     */
    @Override
    public UserToken setNote(String note) {
        this.note = note;
        return this;
    }

    /**
     * Getter for <code>public.user_token.token</code>.
     */
    @Override
    public String getToken() {
        return this.token;
    }

    /**
     * Setter for <code>public.user_token.token</code>.
     */
    @Override
    public UserToken setToken(String token) {
        this.token = token;
        return this;
    }

    /**
     * Getter for <code>public.user_token.permissions</code>.
     */
    @Override
    public LoomPermissionFlag getPermissions() {
        return this.permissions;
    }

    /**
     * Setter for <code>public.user_token.permissions</code>.
     */
    @Override
    public UserToken setPermissions(LoomPermissionFlag permissions) {
        this.permissions = permissions;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserToken (");

        sb.append(uuid);
        sb.append(", ").append(userUuid);
        sb.append(", ").append(note);
        sb.append(", ").append(token);
        sb.append(", ").append(permissions);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUserToken from) {
        setUuid(from.getUuid());
        setUserUuid(from.getUserUuid());
        setNote(from.getNote());
        setToken(from.getToken());
        setPermissions(from.getPermissions());
    }

    @Override
    public <E extends IUserToken> E into(E into) {
        into.from(this);
        return into;
    }
}
