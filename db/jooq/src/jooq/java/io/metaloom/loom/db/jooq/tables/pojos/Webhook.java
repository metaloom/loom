/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.metaloom.loom.db.jooq.enums.LoomEvent;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * Table which stores the registered webhooks
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webhook implements Serializable {

    private static final long serialVersionUID = 1L;

    private UUID          uuid;
    private String        url;
    private String        status;
    private Boolean       active;
    private LoomEvent     trigger;
    private String        secrettoken;
    private JSONB         meta;
    private LocalDateTime created;
    private UUID          creatorUuid;
    private LocalDateTime edited;
    private UUID          editorUuid;

    public Webhook() {}

    public Webhook(Webhook value) {
        this.uuid = value.uuid;
        this.url = value.url;
        this.status = value.status;
        this.active = value.active;
        this.trigger = value.trigger;
        this.secrettoken = value.secrettoken;
        this.meta = value.meta;
        this.created = value.created;
        this.creatorUuid = value.creatorUuid;
        this.edited = value.edited;
        this.editorUuid = value.editorUuid;
    }

    public Webhook(
        UUID          uuid,
        String        url,
        String        status,
        Boolean       active,
        LoomEvent     trigger,
        String        secrettoken,
        JSONB         meta,
        LocalDateTime created,
        UUID          creatorUuid,
        LocalDateTime edited,
        UUID          editorUuid
    ) {
        this.uuid = uuid;
        this.url = url;
        this.status = status;
        this.active = active;
        this.trigger = trigger;
        this.secrettoken = secrettoken;
        this.meta = meta;
        this.created = created;
        this.creatorUuid = creatorUuid;
        this.edited = edited;
        this.editorUuid = editorUuid;
    }

    /**
     * Getter for <code>public.webhook.uuid</code>.
     */
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.webhook.uuid</code>.
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    /**
     * Getter for <code>public.webhook.url</code>.
     */
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>public.webhook.url</code>.
     */
    public void setUrl(String url) {
        this.url = url;
    }

    /**
     * Getter for <code>public.webhook.status</code>.
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>public.webhook.status</code>.
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Getter for <code>public.webhook.active</code>.
     */
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>public.webhook.active</code>.
     */
    public void setActive(Boolean active) {
        this.active = active;
    }

    /**
     * Getter for <code>public.webhook.trigger</code>. List of triggers which
     * can invoke the webhook
     */
    public LoomEvent getTrigger() {
        return this.trigger;
    }

    /**
     * Setter for <code>public.webhook.trigger</code>. List of triggers which
     * can invoke the webhook
     */
    public void setTrigger(LoomEvent trigger) {
        this.trigger = trigger;
    }

    /**
     * Getter for <code>public.webhook.secretToken</code>. Secret token which
     * webhook services can use to authenticate the request.
     */
    public String getSecrettoken() {
        return this.secrettoken;
    }

    /**
     * Setter for <code>public.webhook.secretToken</code>. Secret token which
     * webhook services can use to authenticate the request.
     */
    public void setSecrettoken(String secrettoken) {
        this.secrettoken = secrettoken;
    }

    /**
     * Getter for <code>public.webhook.meta</code>. Custom meta properties to
     * the element
     */
    public JSONB getMeta() {
        return this.meta;
    }

    /**
     * Setter for <code>public.webhook.meta</code>. Custom meta properties to
     * the element
     */
    public void setMeta(JSONB meta) {
        this.meta = meta;
    }

    /**
     * Getter for <code>public.webhook.created</code>.
     */
    public LocalDateTime getCreated() {
        return this.created;
    }

    /**
     * Setter for <code>public.webhook.created</code>.
     */
    public void setCreated(LocalDateTime created) {
        this.created = created;
    }

    /**
     * Getter for <code>public.webhook.creator_uuid</code>.
     */
    public UUID getCreatorUuid() {
        return this.creatorUuid;
    }

    /**
     * Setter for <code>public.webhook.creator_uuid</code>.
     */
    public void setCreatorUuid(UUID creatorUuid) {
        this.creatorUuid = creatorUuid;
    }

    /**
     * Getter for <code>public.webhook.edited</code>.
     */
    public LocalDateTime getEdited() {
        return this.edited;
    }

    /**
     * Setter for <code>public.webhook.edited</code>.
     */
    public void setEdited(LocalDateTime edited) {
        this.edited = edited;
    }

    /**
     * Getter for <code>public.webhook.editor_uuid</code>.
     */
    public UUID getEditorUuid() {
        return this.editorUuid;
    }

    /**
     * Setter for <code>public.webhook.editor_uuid</code>.
     */
    public void setEditorUuid(UUID editorUuid) {
        this.editorUuid = editorUuid;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Webhook (");

        sb.append(uuid);
        sb.append(", ").append(url);
        sb.append(", ").append(status);
        sb.append(", ").append(active);
        sb.append(", ").append(trigger);
        sb.append(", ").append(secrettoken);
        sb.append(", ").append(meta);
        sb.append(", ").append(created);
        sb.append(", ").append(creatorUuid);
        sb.append(", ").append(edited);
        sb.append(", ").append(editorUuid);

        sb.append(")");
        return sb.toString();
    }
}
