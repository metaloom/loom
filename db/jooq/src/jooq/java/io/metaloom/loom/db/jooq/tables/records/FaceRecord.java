/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.records;


import io.metaloom.loom.db.jooq.enums.EmbeddingTypes;
import io.metaloom.loom.db.jooq.tables.Face;
import io.metaloom.loom.db.jooq.tables.pojos.JooqFace;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Stores embeddings
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FaceRecord extends UpdatableRecordImpl<FaceRecord> implements Record6<UUID, String, Integer, byte[], JSONB, EmbeddingTypes> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.face.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.face.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.face.source</code>. Identification of the source
     * media
     */
    public void setSource(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.face.source</code>. Identification of the source
     * media
     */
    public String getSource() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.face.face_nr</code>. When the source contains
     * more than one face the id can be used to identify them.
     */
    public void setFaceNr(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.face.face_nr</code>. When the source contains
     * more than one face the id can be used to identify them.
     */
    public Integer getFaceNr() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.face.blob</code>. The actual embedding data
     */
    public void setBlob(byte[] value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.face.blob</code>. The actual embedding data
     */
    public byte[] getBlob() {
        return (byte[]) get(3);
    }

    /**
     * Setter for <code>public.face.meta</code>. Custom meta properties to the
     * face
     */
    public void setMeta(JSONB value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.face.meta</code>. Custom meta properties to the
     * face
     */
    public JSONB getMeta() {
        return (JSONB) get(4);
    }

    /**
     * Setter for <code>public.face.type</code>.
     */
    public void setType(EmbeddingTypes value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.face.type</code>.
     */
    public EmbeddingTypes getType() {
        return (EmbeddingTypes) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, Integer, byte[], JSONB, EmbeddingTypes> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<UUID, String, Integer, byte[], JSONB, EmbeddingTypes> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Face.FACE.UUID;
    }

    @Override
    public Field<String> field2() {
        return Face.FACE.SOURCE;
    }

    @Override
    public Field<Integer> field3() {
        return Face.FACE.FACE_NR;
    }

    @Override
    public Field<byte[]> field4() {
        return Face.FACE.BLOB;
    }

    @Override
    public Field<JSONB> field5() {
        return Face.FACE.META;
    }

    @Override
    public Field<EmbeddingTypes> field6() {
        return Face.FACE.TYPE;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public String component2() {
        return getSource();
    }

    @Override
    public Integer component3() {
        return getFaceNr();
    }

    @Override
    public byte[] component4() {
        return getBlob();
    }

    @Override
    public JSONB component5() {
        return getMeta();
    }

    @Override
    public EmbeddingTypes component6() {
        return getType();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public String value2() {
        return getSource();
    }

    @Override
    public Integer value3() {
        return getFaceNr();
    }

    @Override
    public byte[] value4() {
        return getBlob();
    }

    @Override
    public JSONB value5() {
        return getMeta();
    }

    @Override
    public EmbeddingTypes value6() {
        return getType();
    }

    @Override
    public FaceRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public FaceRecord value2(String value) {
        setSource(value);
        return this;
    }

    @Override
    public FaceRecord value3(Integer value) {
        setFaceNr(value);
        return this;
    }

    @Override
    public FaceRecord value4(byte[] value) {
        setBlob(value);
        return this;
    }

    @Override
    public FaceRecord value5(JSONB value) {
        setMeta(value);
        return this;
    }

    @Override
    public FaceRecord value6(EmbeddingTypes value) {
        setType(value);
        return this;
    }

    @Override
    public FaceRecord values(UUID value1, String value2, Integer value3, byte[] value4, JSONB value5, EmbeddingTypes value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FaceRecord
     */
    public FaceRecord() {
        super(Face.FACE);
    }

    /**
     * Create a detached, initialised FaceRecord
     */
    public FaceRecord(UUID uuid, String source, Integer faceNr, byte[] blob, JSONB meta, EmbeddingTypes type) {
        super(Face.FACE);

        setUuid(uuid);
        setSource(source);
        setFaceNr(faceNr);
        setBlob(blob);
        setMeta(meta);
        setType(type);
    }

    /**
     * Create a detached, initialised FaceRecord
     */
    public FaceRecord(JooqFace value) {
        super(Face.FACE);

        if (value != null) {
            setUuid(value.getUuid());
            setSource(value.getSource());
            setFaceNr(value.getFaceNr());
            setBlob(value.getBlob());
            setMeta(value.getMeta());
            setType(value.getType());
        }
    }
}
