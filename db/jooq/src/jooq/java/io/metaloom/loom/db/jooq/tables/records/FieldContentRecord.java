/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.enums.LoomContentType;
import io.metaloom.loom.db.jooq.tables.FieldContent;
import io.metaloom.loom.db.jooq.tables.interfaces.IFieldContent;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.TableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Crosstable that tracks all fields for a content
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldContentRecord extends TableRecordImpl<FieldContentRecord> implements VertxPojo, Record4<UUID, UUID, String, LoomContentType>, IFieldContent {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.field_content.fields_uuid</code>.
     */
    @Override
    public FieldContentRecord setFieldsUuid(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.field_content.fields_uuid</code>.
     */
    @Override
    public UUID getFieldsUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.field_content.content_uuid</code>.
     */
    @Override
    public FieldContentRecord setContentUuid(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.field_content.content_uuid</code>.
     */
    @Override
    public UUID getContentUuid() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.field_content.webroot_path_info</code>. prefixed with branch
     */
    @Override
    public FieldContentRecord setWebrootPathInfo(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.field_content.webroot_path_info</code>. prefixed with branch
     */
    @Override
    public String getWebrootPathInfo() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.field_content.content_type</code>. D or P for draft and published
     */
    @Override
    public FieldContentRecord setContentType(LoomContentType value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.field_content.content_type</code>. D or P for draft and published
     */
    @Override
    public LoomContentType getContentType() {
        return (LoomContentType) get(3);
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, LoomContentType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, UUID, String, LoomContentType> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return FieldContent.FIELD_CONTENT.FIELDS_UUID;
    }

    @Override
    public Field<UUID> field2() {
        return FieldContent.FIELD_CONTENT.CONTENT_UUID;
    }

    @Override
    public Field<String> field3() {
        return FieldContent.FIELD_CONTENT.WEBROOT_PATH_INFO;
    }

    @Override
    public Field<LoomContentType> field4() {
        return FieldContent.FIELD_CONTENT.CONTENT_TYPE;
    }

    @Override
    public UUID component1() {
        return getFieldsUuid();
    }

    @Override
    public UUID component2() {
        return getContentUuid();
    }

    @Override
    public String component3() {
        return getWebrootPathInfo();
    }

    @Override
    public LoomContentType component4() {
        return getContentType();
    }

    @Override
    public UUID value1() {
        return getFieldsUuid();
    }

    @Override
    public UUID value2() {
        return getContentUuid();
    }

    @Override
    public String value3() {
        return getWebrootPathInfo();
    }

    @Override
    public LoomContentType value4() {
        return getContentType();
    }

    @Override
    public FieldContentRecord value1(UUID value) {
        setFieldsUuid(value);
        return this;
    }

    @Override
    public FieldContentRecord value2(UUID value) {
        setContentUuid(value);
        return this;
    }

    @Override
    public FieldContentRecord value3(String value) {
        setWebrootPathInfo(value);
        return this;
    }

    @Override
    public FieldContentRecord value4(LoomContentType value) {
        setContentType(value);
        return this;
    }

    @Override
    public FieldContentRecord values(UUID value1, UUID value2, String value3, LoomContentType value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IFieldContent from) {
        setFieldsUuid(from.getFieldsUuid());
        setContentUuid(from.getContentUuid());
        setWebrootPathInfo(from.getWebrootPathInfo());
        setContentType(from.getContentType());
    }

    @Override
    public <E extends IFieldContent> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FieldContentRecord
     */
    public FieldContentRecord() {
        super(FieldContent.FIELD_CONTENT);
    }

    /**
     * Create a detached, initialised FieldContentRecord
     */
    public FieldContentRecord(UUID fieldsUuid, UUID contentUuid, String webrootPathInfo, LoomContentType contentType) {
        super(FieldContent.FIELD_CONTENT);

        setFieldsUuid(fieldsUuid);
        setContentUuid(contentUuid);
        setWebrootPathInfo(webrootPathInfo);
        setContentType(contentType);
    }

        public FieldContentRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
