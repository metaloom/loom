/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.records;


import io.metaloom.loom.db.jooq.enums.LoomPermission;
import io.metaloom.loom.db.jooq.tables.RolePermission;
import io.metaloom.loom.db.jooq.tables.pojos.JooqRolePermission;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RolePermissionRecord extends UpdatableRecordImpl<RolePermissionRecord> implements Record3<UUID, String, LoomPermission> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.role_permission.role_uuid</code>.
     */
    public void setRoleUuid(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.role_permission.role_uuid</code>.
     */
    public UUID getRoleUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.role_permission.resource</code>.
     */
    public void setResource(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.role_permission.resource</code>.
     */
    public String getResource() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.role_permission.permission</code>.
     */
    public void setPermission(LoomPermission value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.role_permission.permission</code>.
     */
    public LoomPermission getPermission() {
        return (LoomPermission) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, LoomPermission> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, LoomPermission> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return RolePermission.ROLE_PERMISSION.ROLE_UUID;
    }

    @Override
    public Field<String> field2() {
        return RolePermission.ROLE_PERMISSION.RESOURCE;
    }

    @Override
    public Field<LoomPermission> field3() {
        return RolePermission.ROLE_PERMISSION.PERMISSION;
    }

    @Override
    public UUID component1() {
        return getRoleUuid();
    }

    @Override
    public String component2() {
        return getResource();
    }

    @Override
    public LoomPermission component3() {
        return getPermission();
    }

    @Override
    public UUID value1() {
        return getRoleUuid();
    }

    @Override
    public String value2() {
        return getResource();
    }

    @Override
    public LoomPermission value3() {
        return getPermission();
    }

    @Override
    public RolePermissionRecord value1(UUID value) {
        setRoleUuid(value);
        return this;
    }

    @Override
    public RolePermissionRecord value2(String value) {
        setResource(value);
        return this;
    }

    @Override
    public RolePermissionRecord value3(LoomPermission value) {
        setPermission(value);
        return this;
    }

    @Override
    public RolePermissionRecord values(UUID value1, String value2, LoomPermission value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RolePermissionRecord
     */
    public RolePermissionRecord() {
        super(RolePermission.ROLE_PERMISSION);
    }

    /**
     * Create a detached, initialised RolePermissionRecord
     */
    public RolePermissionRecord(UUID roleUuid, String resource, LoomPermission permission) {
        super(RolePermission.ROLE_PERMISSION);

        setRoleUuid(roleUuid);
        setResource(resource);
        setPermission(permission);
    }

    /**
     * Create a detached, initialised RolePermissionRecord
     */
    public RolePermissionRecord(JooqRolePermission value) {
        super(RolePermission.ROLE_PERMISSION);

        if (value != null) {
            setRoleUuid(value.getRoleUuid());
            setResource(value.getResource());
            setPermission(value.getPermission());
        }
    }
}
