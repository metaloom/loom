/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.AssetRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Asset extends TableImpl<AssetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.asset</code>
     */
    public static final Asset ASSET = new Asset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AssetRecord> getRecordType() {
        return AssetRecord.class;
    }

    /**
     * The column <code>public.asset.uuid</code>.
     */
    public final TableField<AssetRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.asset.asset_binary_uuid</code>.
     */
    public final TableField<AssetRecord, java.util.UUID> ASSET_BINARY_UUID = createField(DSL.name("asset_binary_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset.namespace_uuid</code>.
     */
    public final TableField<AssetRecord, java.util.UUID> NAMESPACE_UUID = createField(DSL.name("namespace_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset.filename</code>.
     */
    public final TableField<AssetRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.asset.localPath</code>. Local path to the asset (when using the local path feature)
     */
    public final TableField<AssetRecord, String> LOCALPATH = createField(DSL.name("localPath"), SQLDataType.VARCHAR, this, "Local path to the asset (when using the local path feature)");

    /**
     * The column <code>public.asset.meta</code>. Custom meta properties to the element
     */
    public final TableField<AssetRecord, String> META = createField(DSL.name("meta"), SQLDataType.VARCHAR, this, "Custom meta properties to the element");

    /**
     * The column <code>public.asset.rating</code>. Absolute or computed asset rating
     */
    public final TableField<AssetRecord, Integer> RATING = createField(DSL.name("rating"), SQLDataType.INTEGER, this, "Absolute or computed asset rating");

    /**
     * The column <code>public.asset.dominantColor</code>.
     */
    public final TableField<AssetRecord, String> DOMINANTCOLOR = createField(DSL.name("dominantColor"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset.mimeType</code>.
     */
    public final TableField<AssetRecord, String> MIMETYPE = createField(DSL.name("mimeType"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset.gps_lon</code>.
     */
    public final TableField<AssetRecord, BigDecimal> GPS_LON = createField(DSL.name("gps_lon"), SQLDataType.NUMERIC(9, 6), this, "");

    /**
     * The column <code>public.asset.gps_lat</code>.
     */
    public final TableField<AssetRecord, BigDecimal> GPS_LAT = createField(DSL.name("gps_lat"), SQLDataType.NUMERIC(8, 6), this, "");

    /**
     * The column <code>public.asset.s3_bucket_name</code>.
     */
    public final TableField<AssetRecord, String> S3_BUCKET_NAME = createField(DSL.name("s3_bucket_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset.s3_object_path</code>.
     */
    public final TableField<AssetRecord, String> S3_OBJECT_PATH = createField(DSL.name("s3_object_path"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.asset.created</code>.
     */
    public final TableField<AssetRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.asset.creator_uuid</code>.
     */
    public final TableField<AssetRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.asset.edited</code>.
     */
    public final TableField<AssetRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.asset.editor_uuid</code>.
     */
    public final TableField<AssetRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Asset(Name alias, Table<AssetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Asset(Name alias, Table<AssetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.asset</code> table reference
     */
    public Asset(String alias) {
        this(DSL.name(alias), ASSET);
    }

    /**
     * Create an aliased <code>public.asset</code> table reference
     */
    public Asset(Name alias) {
        this(alias, ASSET);
    }

    /**
     * Create a <code>public.asset</code> table reference
     */
    public Asset() {
        this(DSL.name("asset"), null);
    }

    public <O extends Record> Asset(Table<O> child, ForeignKey<O, AssetRecord> key) {
        super(child, key, ASSET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ASSET_UUID_NAMESPACE_UUID_IDX);
    }

    @Override
    public UniqueKey<AssetRecord> getPrimaryKey() {
        return Keys.ASSET_PKEY;
    }

    @Override
    public List<UniqueKey<AssetRecord>> getKeys() {
        return Arrays.<UniqueKey<AssetRecord>>asList(Keys.ASSET_PKEY);
    }

    @Override
    public List<ForeignKey<AssetRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AssetRecord, ?>>asList(Keys.ASSET__ASSET_ASSET_BINARY_UUID_FKEY, Keys.ASSET__ASSET_NAMESPACE_UUID_FKEY, Keys.ASSET__ASSET_CREATOR_UUID_FKEY, Keys.ASSET__ASSET_EDITOR_UUID_FKEY);
    }

    private transient AssetBinary _assetBinary;
    private transient Namespace _namespace;
    private transient User _assetCreatorUuidFkey;
    private transient User _assetEditorUuidFkey;

    public AssetBinary assetBinary() {
        if (_assetBinary == null)
            _assetBinary = new AssetBinary(this, Keys.ASSET__ASSET_ASSET_BINARY_UUID_FKEY);

        return _assetBinary;
    }

    public Namespace namespace() {
        if (_namespace == null)
            _namespace = new Namespace(this, Keys.ASSET__ASSET_NAMESPACE_UUID_FKEY);

        return _namespace;
    }

    public User assetCreatorUuidFkey() {
        if (_assetCreatorUuidFkey == null)
            _assetCreatorUuidFkey = new User(this, Keys.ASSET__ASSET_CREATOR_UUID_FKEY);

        return _assetCreatorUuidFkey;
    }

    public User assetEditorUuidFkey() {
        if (_assetEditorUuidFkey == null)
            _assetEditorUuidFkey = new User(this, Keys.ASSET__ASSET_EDITOR_UUID_FKEY);

        return _assetEditorUuidFkey;
    }

    @Override
    public Asset as(String alias) {
        return new Asset(DSL.name(alias), this);
    }

    @Override
    public Asset as(Name alias) {
        return new Asset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(String name) {
        return new Asset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Asset rename(Name name) {
        return new Asset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<java.util.UUID, java.util.UUID, java.util.UUID, String, String, String, Integer, String, String, BigDecimal, BigDecimal, String, String, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
