/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables;


import io.metaloom.loom.db.jooq.Indexes;
import io.metaloom.loom.db.jooq.Keys;
import io.metaloom.loom.db.jooq.Public;
import io.metaloom.loom.db.jooq.tables.records.ModelRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Model extends TableImpl<ModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.model</code>
     */
    public static final Model MODEL = new Model();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelRecord> getRecordType() {
        return ModelRecord.class;
    }

    /**
     * The column <code>public.model.uuid</code>.
     */
    public final TableField<ModelRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.model.name</code>. Human readable name of the content model
     */
    public final TableField<ModelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "Human readable name of the content model");

    /**
     * The column <code>public.model.latest_version_uuid</code>.
     */
    public final TableField<ModelRecord, java.util.UUID> LATEST_VERSION_UUID = createField(DSL.name("latest_version_uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.model.created</code>.
     */
    public final TableField<ModelRecord, LocalDateTime> CREATED = createField(DSL.name("created"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.model.creator_uuid</code>.
     */
    public final TableField<ModelRecord, java.util.UUID> CREATOR_UUID = createField(DSL.name("creator_uuid"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.model.edited</code>.
     */
    public final TableField<ModelRecord, LocalDateTime> EDITED = createField(DSL.name("edited"), SQLDataType.LOCALDATETIME(6).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.model.editor_uuid</code>.
     */
    public final TableField<ModelRecord, java.util.UUID> EDITOR_UUID = createField(DSL.name("editor_uuid"), SQLDataType.UUID, this, "");

    private Model(Name alias, Table<ModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Model(Name alias, Table<ModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.model</code> table reference
     */
    public Model(String alias) {
        this(DSL.name(alias), MODEL);
    }

    /**
     * Create an aliased <code>public.model</code> table reference
     */
    public Model(Name alias) {
        this(alias, MODEL);
    }

    /**
     * Create a <code>public.model</code> table reference
     */
    public Model() {
        this(DSL.name("model"), null);
    }

    public <O extends Record> Model(Table<O> child, ForeignKey<O, ModelRecord> key) {
        super(child, key, MODEL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MODEL_NAME_IDX);
    }

    @Override
    public UniqueKey<ModelRecord> getPrimaryKey() {
        return Keys.MODEL_PKEY;
    }

    @Override
    public List<UniqueKey<ModelRecord>> getKeys() {
        return Arrays.<UniqueKey<ModelRecord>>asList(Keys.MODEL_PKEY, Keys.MODEL_NAME_KEY);
    }

    @Override
    public List<ForeignKey<ModelRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelRecord, ?>>asList(Keys.MODEL__MODEL_LATEST_VERSION_UUID_FKEY, Keys.MODEL__MODEL_CREATOR_UUID_FKEY, Keys.MODEL__MODEL_EDITOR_UUID_FKEY);
    }

    private transient ModelVersion _modelVersion;
    private transient User _modelCreatorUuidFkey;
    private transient User _modelEditorUuidFkey;

    public ModelVersion modelVersion() {
        if (_modelVersion == null)
            _modelVersion = new ModelVersion(this, Keys.MODEL__MODEL_LATEST_VERSION_UUID_FKEY);

        return _modelVersion;
    }

    public User modelCreatorUuidFkey() {
        if (_modelCreatorUuidFkey == null)
            _modelCreatorUuidFkey = new User(this, Keys.MODEL__MODEL_CREATOR_UUID_FKEY);

        return _modelCreatorUuidFkey;
    }

    public User modelEditorUuidFkey() {
        if (_modelEditorUuidFkey == null)
            _modelEditorUuidFkey = new User(this, Keys.MODEL__MODEL_EDITOR_UUID_FKEY);

        return _modelEditorUuidFkey;
    }

    @Override
    public Model as(String alias) {
        return new Model(DSL.name(alias), this);
    }

    @Override
    public Model as(Name alias) {
        return new Model(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(String name) {
        return new Model(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(Name name) {
        return new Model(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<java.util.UUID, String, java.util.UUID, LocalDateTime, java.util.UUID, LocalDateTime, java.util.UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
