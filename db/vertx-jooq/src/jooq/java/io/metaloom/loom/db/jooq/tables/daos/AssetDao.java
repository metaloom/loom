/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.Asset;
import io.metaloom.loom.db.jooq.tables.records.AssetRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetDao extends AbstractReactiveVertxDAO<AssetRecord, io.metaloom.loom.db.jooq.tables.pojos.Asset, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Asset>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<AssetRecord,io.metaloom.loom.db.jooq.tables.pojos.Asset,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public AssetDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Asset.ASSET, io.metaloom.loom.db.jooq.tables.pojos.Asset.class, new ReactiveRXQueryExecutor<AssetRecord,io.metaloom.loom.db.jooq.tables.pojos.Asset,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getAssetMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Asset object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>asset_binary_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByAssetBinaryUuid(Collection<UUID> values) {
                return findManyByCondition(Asset.ASSET.ASSET_BINARY_UUID.in(values));
        }

        /**
     * Find records that have <code>asset_binary_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByAssetBinaryUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Asset.ASSET.ASSET_BINARY_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>namespace_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByNamespaceUuid(Collection<UUID> values) {
                return findManyByCondition(Asset.ASSET.NAMESPACE_UUID.in(values));
        }

        /**
     * Find records that have <code>namespace_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByNamespaceUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Asset.ASSET.NAMESPACE_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>filename IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByFilename(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.FILENAME.in(values));
        }

        /**
     * Find records that have <code>filename IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByFilename(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.FILENAME.in(values),limit);
        }

        /**
     * Find records that have <code>localPath IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByLocalpath(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.LOCALPATH.in(values));
        }

        /**
     * Find records that have <code>localPath IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByLocalpath(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.LOCALPATH.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.META.in(values),limit);
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByRating(Collection<Integer> values) {
                return findManyByCondition(Asset.ASSET.RATING.in(values));
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByRating(Collection<Integer> values, int limit) {
                return findManyByCondition(Asset.ASSET.RATING.in(values),limit);
        }

        /**
     * Find records that have <code>dominantColor IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByDominantcolor(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.DOMINANTCOLOR.in(values));
        }

        /**
     * Find records that have <code>dominantColor IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByDominantcolor(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.DOMINANTCOLOR.in(values),limit);
        }

        /**
     * Find records that have <code>mimeType IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByMimetype(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.MIMETYPE.in(values));
        }

        /**
     * Find records that have <code>mimeType IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByMimetype(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.MIMETYPE.in(values),limit);
        }

        /**
     * Find records that have <code>gps_lon IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByGpsLon(Collection<BigDecimal> values) {
                return findManyByCondition(Asset.ASSET.GPS_LON.in(values));
        }

        /**
     * Find records that have <code>gps_lon IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByGpsLon(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(Asset.ASSET.GPS_LON.in(values),limit);
        }

        /**
     * Find records that have <code>gps_lat IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByGpsLat(Collection<BigDecimal> values) {
                return findManyByCondition(Asset.ASSET.GPS_LAT.in(values));
        }

        /**
     * Find records that have <code>gps_lat IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByGpsLat(Collection<BigDecimal> values, int limit) {
                return findManyByCondition(Asset.ASSET.GPS_LAT.in(values),limit);
        }

        /**
     * Find records that have <code>s3_bucket_name IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByS3BucketName(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.S3_BUCKET_NAME.in(values));
        }

        /**
     * Find records that have <code>s3_bucket_name IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByS3BucketName(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.S3_BUCKET_NAME.in(values),limit);
        }

        /**
     * Find records that have <code>s3_object_path IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByS3ObjectPath(Collection<String> values) {
                return findManyByCondition(Asset.ASSET.S3_OBJECT_PATH.in(values));
        }

        /**
     * Find records that have <code>s3_object_path IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByS3ObjectPath(Collection<String> values, int limit) {
                return findManyByCondition(Asset.ASSET.S3_OBJECT_PATH.in(values),limit);
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByCreated(Collection<LocalDateTime> values) {
                return findManyByCondition(Asset.ASSET.CREATED.in(values));
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByCreated(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Asset.ASSET.CREATED.in(values),limit);
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByCreatorUuid(Collection<UUID> values) {
                return findManyByCondition(Asset.ASSET.CREATOR_UUID.in(values));
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByCreatorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Asset.ASSET.CREATOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByEdited(Collection<LocalDateTime> values) {
                return findManyByCondition(Asset.ASSET.EDITED.in(values));
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByEdited(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Asset.ASSET.EDITED.in(values),limit);
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByEditorUuid(Collection<UUID> values) {
                return findManyByCondition(Asset.ASSET.EDITOR_UUID.in(values));
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Asset>> findManyByEditorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Asset.ASSET.EDITOR_UUID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<AssetRecord,io.metaloom.loom.db.jooq.tables.pojos.Asset,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<AssetRecord,io.metaloom.loom.db.jooq.tables.pojos.Asset,UUID>) super.queryExecutor();
        }
}
