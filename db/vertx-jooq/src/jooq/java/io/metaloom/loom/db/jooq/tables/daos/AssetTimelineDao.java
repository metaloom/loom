/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.AssetTimeline;
import io.metaloom.loom.db.jooq.tables.records.AssetTimelineRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This table contains asset timeline entries
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AssetTimelineDao extends AbstractReactiveVertxDAO<AssetTimelineRecord, io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<AssetTimelineRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public AssetTimelineDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(AssetTimeline.ASSET_TIMELINE, io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline.class, new ReactiveRXQueryExecutor<AssetTimelineRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getAssetTimelineMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>asset_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByAssetUuid(Collection<UUID> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.ASSET_UUID.in(values));
        }

        /**
     * Find records that have <code>asset_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByAssetUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.ASSET_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>from IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByFrom(Collection<Integer> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.FROM.in(values));
        }

        /**
     * Find records that have <code>from IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByFrom(Collection<Integer> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.FROM.in(values),limit);
        }

        /**
     * Find records that have <code>to IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByTo(Collection<Integer> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.TO.in(values));
        }

        /**
     * Find records that have <code>to IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByTo(Collection<Integer> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.TO.in(values),limit);
        }

        /**
     * Find records that have <code>description IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByDescription(Collection<String> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.DESCRIPTION.in(values));
        }

        /**
     * Find records that have <code>description IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByDescription(Collection<String> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.DESCRIPTION.in(values),limit);
        }

        /**
     * Find records that have <code>tags IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByTags(Collection<String> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.TAGS.in(values));
        }

        /**
     * Find records that have <code>tags IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByTags(Collection<String> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.TAGS.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.META.in(values),limit);
        }

        /**
     * Find records that have <code>thumbail IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByThumbail(Collection<String> values) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.THUMBAIL.in(values));
        }

        /**
     * Find records that have <code>thumbail IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline>> findManyByThumbail(Collection<String> values, int limit) {
                return findManyByCondition(AssetTimeline.ASSET_TIMELINE.THUMBAIL.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<AssetTimelineRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<AssetTimelineRecord,io.metaloom.loom.db.jooq.tables.pojos.AssetTimeline,UUID>) super.queryExecutor();
        }
}
