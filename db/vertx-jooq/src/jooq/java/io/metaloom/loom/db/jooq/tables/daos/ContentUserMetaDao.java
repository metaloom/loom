/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.ContentUserMeta;
import io.metaloom.loom.db.jooq.tables.records.ContentUserMetaRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContentUserMetaDao extends AbstractReactiveVertxDAO<ContentUserMetaRecord, io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta, Record2<UUID, UUID>, Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>>, Single<Integer>, Single<Record2<UUID, UUID>>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<ContentUserMetaRecord,io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta,Record2<UUID, UUID>> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public ContentUserMetaDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(ContentUserMeta.CONTENT_USER_META, io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta.class, new ReactiveRXQueryExecutor<ContentUserMetaRecord,io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta,Record2<UUID, UUID>>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getContentUserMetaMapper()));
        }

        @Override
        protected Record2<UUID, UUID> getId(io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta object) {
                return compositeKeyRecord(object.getContentUuid(), object.getUserUuid());
        }

        /**
     * Find records that have <code>user_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>> findManyByUserUuid(Collection<UUID> values) {
                return findManyByCondition(ContentUserMeta.CONTENT_USER_META.USER_UUID.in(values));
        }

        /**
     * Find records that have <code>user_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>> findManyByUserUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(ContentUserMeta.CONTENT_USER_META.USER_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>> findManyByRating(Collection<Integer> values) {
                return findManyByCondition(ContentUserMeta.CONTENT_USER_META.RATING.in(values));
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>> findManyByRating(Collection<Integer> values, int limit) {
                return findManyByCondition(ContentUserMeta.CONTENT_USER_META.RATING.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(ContentUserMeta.CONTENT_USER_META.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(ContentUserMeta.CONTENT_USER_META.META.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<ContentUserMetaRecord,io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta,Record2<UUID, UUID>> queryExecutor(){
                return (ReactiveRXQueryExecutor<ContentUserMetaRecord,io.metaloom.loom.db.jooq.tables.pojos.ContentUserMeta,Record2<UUID, UUID>>) super.queryExecutor();
        }
}
