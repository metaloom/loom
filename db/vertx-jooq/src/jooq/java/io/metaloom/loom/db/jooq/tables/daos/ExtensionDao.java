/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.enums.LoomExtensionType;
import io.metaloom.loom.db.jooq.tables.Extension;
import io.metaloom.loom.db.jooq.tables.records.ExtensionRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * Table which lists the registered extensions
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtensionDao extends AbstractReactiveVertxDAO<ExtensionRecord, io.metaloom.loom.db.jooq.tables.pojos.Extension, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Extension>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<ExtensionRecord,io.metaloom.loom.db.jooq.tables.pojos.Extension,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public ExtensionDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Extension.EXTENSION, io.metaloom.loom.db.jooq.tables.pojos.Extension.class, new ReactiveRXQueryExecutor<ExtensionRecord,io.metaloom.loom.db.jooq.tables.pojos.Extension,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getExtensionMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Extension object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>url IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByUrl(Collection<String> values) {
                return findManyByCondition(Extension.EXTENSION.URL.in(values));
        }

        /**
     * Find records that have <code>url IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByUrl(Collection<String> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.URL.in(values),limit);
        }

        /**
     * Find records that have <code>kind IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByKind(Collection<LoomExtensionType> values) {
                return findManyByCondition(Extension.EXTENSION.KIND.in(values));
        }

        /**
     * Find records that have <code>kind IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByKind(Collection<LoomExtensionType> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.KIND.in(values),limit);
        }

        /**
     * Find records that have <code>status IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByStatus(Collection<String> values) {
                return findManyByCondition(Extension.EXTENSION.STATUS.in(values));
        }

        /**
     * Find records that have <code>status IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByStatus(Collection<String> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.STATUS.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(Extension.EXTENSION.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.META.in(values),limit);
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByCreated(Collection<LocalDateTime> values) {
                return findManyByCondition(Extension.EXTENSION.CREATED.in(values));
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByCreated(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.CREATED.in(values),limit);
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByCreatorUuid(Collection<UUID> values) {
                return findManyByCondition(Extension.EXTENSION.CREATOR_UUID.in(values));
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByCreatorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.CREATOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByEdited(Collection<LocalDateTime> values) {
                return findManyByCondition(Extension.EXTENSION.EDITED.in(values));
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByEdited(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.EDITED.in(values),limit);
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByEditorUuid(Collection<UUID> values) {
                return findManyByCondition(Extension.EXTENSION.EDITOR_UUID.in(values));
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Extension>> findManyByEditorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Extension.EXTENSION.EDITOR_UUID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<ExtensionRecord,io.metaloom.loom.db.jooq.tables.pojos.Extension,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<ExtensionRecord,io.metaloom.loom.db.jooq.tables.pojos.Extension,UUID>) super.queryExecutor();
        }
}
