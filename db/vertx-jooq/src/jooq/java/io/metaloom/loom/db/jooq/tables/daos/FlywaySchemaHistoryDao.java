/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.FlywaySchemaHistory;
import io.metaloom.loom.db.jooq.tables.records.FlywaySchemaHistoryRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FlywaySchemaHistoryDao extends AbstractReactiveVertxDAO<FlywaySchemaHistoryRecord, io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory, Integer, Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>>, Single<Integer>, Single<Integer>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<FlywaySchemaHistoryRecord,io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory,Integer> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public FlywaySchemaHistoryDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory.class, new ReactiveRXQueryExecutor<FlywaySchemaHistoryRecord,io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory,Integer>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getFlywaySchemaHistoryMapper()));
        }

        @Override
        protected Integer getId(io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory object) {
                return object.getInstalledRank();
        }

        /**
     * Find records that have <code>version IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByVersion(Collection<String> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.VERSION.in(values));
        }

        /**
     * Find records that have <code>version IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByVersion(Collection<String> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.VERSION.in(values),limit);
        }

        /**
     * Find records that have <code>description IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByDescription(Collection<String> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.DESCRIPTION.in(values));
        }

        /**
     * Find records that have <code>description IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByDescription(Collection<String> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.DESCRIPTION.in(values),limit);
        }

        /**
     * Find records that have <code>type IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByType(Collection<String> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.TYPE.in(values));
        }

        /**
     * Find records that have <code>type IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByType(Collection<String> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.TYPE.in(values),limit);
        }

        /**
     * Find records that have <code>script IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByScript(Collection<String> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.SCRIPT.in(values));
        }

        /**
     * Find records that have <code>script IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByScript(Collection<String> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.SCRIPT.in(values),limit);
        }

        /**
     * Find records that have <code>checksum IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByChecksum(Collection<Integer> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.CHECKSUM.in(values));
        }

        /**
     * Find records that have <code>checksum IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByChecksum(Collection<Integer> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.CHECKSUM.in(values),limit);
        }

        /**
     * Find records that have <code>installed_by IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByInstalledBy(Collection<String> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_BY.in(values));
        }

        /**
     * Find records that have <code>installed_by IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByInstalledBy(Collection<String> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_BY.in(values),limit);
        }

        /**
     * Find records that have <code>installed_on IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByInstalledOn(Collection<LocalDateTime> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_ON.in(values));
        }

        /**
     * Find records that have <code>installed_on IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByInstalledOn(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_ON.in(values),limit);
        }

        /**
     * Find records that have <code>execution_time IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByExecutionTime(Collection<Integer> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.EXECUTION_TIME.in(values));
        }

        /**
     * Find records that have <code>execution_time IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyByExecutionTime(Collection<Integer> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.EXECUTION_TIME.in(values),limit);
        }

        /**
     * Find records that have <code>success IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyBySuccess(Collection<Boolean> values) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.SUCCESS.in(values));
        }

        /**
     * Find records that have <code>success IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory>> findManyBySuccess(Collection<Boolean> values, int limit) {
                return findManyByCondition(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.SUCCESS.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<FlywaySchemaHistoryRecord,io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory,Integer> queryExecutor(){
                return (ReactiveRXQueryExecutor<FlywaySchemaHistoryRecord,io.metaloom.loom.db.jooq.tables.pojos.FlywaySchemaHistory,Integer>) super.queryExecutor();
        }
}
