/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.Namespace;
import io.metaloom.loom.db.jooq.tables.records.NamespaceRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NamespaceDao extends AbstractReactiveVertxDAO<NamespaceRecord, io.metaloom.loom.db.jooq.tables.pojos.Namespace, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Namespace>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<NamespaceRecord,io.metaloom.loom.db.jooq.tables.pojos.Namespace,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public NamespaceDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Namespace.NAMESPACE, io.metaloom.loom.db.jooq.tables.pojos.Namespace.class, new ReactiveRXQueryExecutor<NamespaceRecord,io.metaloom.loom.db.jooq.tables.pojos.Namespace,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getNamespaceMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Namespace object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByName(Collection<String> values) {
                return findManyByCondition(Namespace.NAMESPACE.NAME.in(values));
        }

        /**
     * Find records that have <code>name IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>root_content_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByRootContentUuid(Collection<UUID> values) {
                return findManyByCondition(Namespace.NAMESPACE.ROOT_CONTENT_UUID.in(values));
        }

        /**
     * Find records that have <code>root_content_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByRootContentUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.ROOT_CONTENT_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(Namespace.NAMESPACE.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.META.in(values),limit);
        }

        /**
     * Find records that have <code>path_prefix IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByPathPrefix(Collection<String> values) {
                return findManyByCondition(Namespace.NAMESPACE.PATH_PREFIX.in(values));
        }

        /**
     * Find records that have <code>path_prefix IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByPathPrefix(Collection<String> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.PATH_PREFIX.in(values),limit);
        }

        /**
     * Find records that have <code>model_filters IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByModelFilters(Collection<String> values) {
                return findManyByCondition(Namespace.NAMESPACE.MODEL_FILTERS.in(values));
        }

        /**
     * Find records that have <code>model_filters IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByModelFilters(Collection<String> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.MODEL_FILTERS.in(values),limit);
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByCreated(Collection<LocalDateTime> values) {
                return findManyByCondition(Namespace.NAMESPACE.CREATED.in(values));
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByCreated(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.CREATED.in(values),limit);
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByCreatorUuid(Collection<UUID> values) {
                return findManyByCondition(Namespace.NAMESPACE.CREATOR_UUID.in(values));
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByCreatorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.CREATOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByEdited(Collection<LocalDateTime> values) {
                return findManyByCondition(Namespace.NAMESPACE.EDITED.in(values));
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByEdited(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.EDITED.in(values),limit);
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByEditorUuid(Collection<UUID> values) {
                return findManyByCondition(Namespace.NAMESPACE.EDITOR_UUID.in(values));
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findManyByEditorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Namespace.NAMESPACE.EDITOR_UUID.in(values),limit);
        }

        /**
     * Find a unique record that has <code>name = value</code> asynchronously
     */
        public Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Namespace>> findOneByName(String value) {
                return findOneByCondition(Namespace.NAMESPACE.NAME.eq(value));
        }

        @Override
        public ReactiveRXQueryExecutor<NamespaceRecord,io.metaloom.loom.db.jooq.tables.pojos.Namespace,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<NamespaceRecord,io.metaloom.loom.db.jooq.tables.pojos.Namespace,UUID>) super.queryExecutor();
        }
}
