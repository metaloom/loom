/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.RoleGroup;
import io.metaloom.loom.db.jooq.tables.records.RoleGroupRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.Record2;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoleGroupDao extends AbstractReactiveVertxDAO<RoleGroupRecord, io.metaloom.loom.db.jooq.tables.pojos.RoleGroup, Record2<UUID, UUID>, Single<List<io.metaloom.loom.db.jooq.tables.pojos.RoleGroup>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.RoleGroup>>, Single<Integer>, Single<Record2<UUID, UUID>>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<RoleGroupRecord,io.metaloom.loom.db.jooq.tables.pojos.RoleGroup,Record2<UUID, UUID>> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public RoleGroupDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(RoleGroup.ROLE_GROUP, io.metaloom.loom.db.jooq.tables.pojos.RoleGroup.class, new ReactiveRXQueryExecutor<RoleGroupRecord,io.metaloom.loom.db.jooq.tables.pojos.RoleGroup,Record2<UUID, UUID>>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getRoleGroupMapper()));
        }

        @Override
        protected Record2<UUID, UUID> getId(io.metaloom.loom.db.jooq.tables.pojos.RoleGroup object) {
                return compositeKeyRecord(object.getGroupUuid(), object.getRoleUuid());
        }

        /**
     * Find records that have <code>role_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.RoleGroup>> findManyByRoleUuid(Collection<UUID> values) {
                return findManyByCondition(RoleGroup.ROLE_GROUP.ROLE_UUID.in(values));
        }

        /**
     * Find records that have <code>role_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.RoleGroup>> findManyByRoleUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(RoleGroup.ROLE_GROUP.ROLE_UUID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<RoleGroupRecord,io.metaloom.loom.db.jooq.tables.pojos.RoleGroup,Record2<UUID, UUID>> queryExecutor(){
                return (ReactiveRXQueryExecutor<RoleGroupRecord,io.metaloom.loom.db.jooq.tables.pojos.RoleGroup,Record2<UUID, UUID>>) super.queryExecutor();
        }
}
