/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.tables.Tag;
import io.metaloom.loom.db.jooq.tables.records.TagRecord;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TagDao extends AbstractReactiveVertxDAO<TagRecord, io.metaloom.loom.db.jooq.tables.pojos.Tag, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.Tag>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<TagRecord,io.metaloom.loom.db.jooq.tables.pojos.Tag,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public TagDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(Tag.TAG, io.metaloom.loom.db.jooq.tables.pojos.Tag.class, new ReactiveRXQueryExecutor<TagRecord,io.metaloom.loom.db.jooq.tables.pojos.Tag,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getTagMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.Tag object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>name IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByName(Collection<String> values) {
                return findManyByCondition(Tag.TAG.NAME.in(values));
        }

        /**
     * Find records that have <code>name IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByName(Collection<String> values, int limit) {
                return findManyByCondition(Tag.TAG.NAME.in(values),limit);
        }

        /**
     * Find records that have <code>collection IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByCollection(Collection<String> values) {
                return findManyByCondition(Tag.TAG.COLLECTION.in(values));
        }

        /**
     * Find records that have <code>collection IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByCollection(Collection<String> values, int limit) {
                return findManyByCondition(Tag.TAG.COLLECTION.in(values),limit);
        }

        /**
     * Find records that have <code>namespace_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByNamespaceUuid(Collection<UUID> values) {
                return findManyByCondition(Tag.TAG.NAMESPACE_UUID.in(values));
        }

        /**
     * Find records that have <code>namespace_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByNamespaceUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Tag.TAG.NAMESPACE_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByMeta(Collection<String> values) {
                return findManyByCondition(Tag.TAG.META.in(values));
        }

        /**
     * Find records that have <code>meta IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByMeta(Collection<String> values, int limit) {
                return findManyByCondition(Tag.TAG.META.in(values),limit);
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByRating(Collection<Integer> values) {
                return findManyByCondition(Tag.TAG.RATING.in(values));
        }

        /**
     * Find records that have <code>rating IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByRating(Collection<Integer> values, int limit) {
                return findManyByCondition(Tag.TAG.RATING.in(values),limit);
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByCreated(Collection<LocalDateTime> values) {
                return findManyByCondition(Tag.TAG.CREATED.in(values));
        }

        /**
     * Find records that have <code>created IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByCreated(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Tag.TAG.CREATED.in(values),limit);
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByCreatorUuid(Collection<UUID> values) {
                return findManyByCondition(Tag.TAG.CREATOR_UUID.in(values));
        }

        /**
     * Find records that have <code>creator_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByCreatorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Tag.TAG.CREATOR_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByEdited(Collection<LocalDateTime> values) {
                return findManyByCondition(Tag.TAG.EDITED.in(values));
        }

        /**
     * Find records that have <code>edited IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByEdited(Collection<LocalDateTime> values, int limit) {
                return findManyByCondition(Tag.TAG.EDITED.in(values),limit);
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByEditorUuid(Collection<UUID> values) {
                return findManyByCondition(Tag.TAG.EDITOR_UUID.in(values));
        }

        /**
     * Find records that have <code>editor_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.Tag>> findManyByEditorUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(Tag.TAG.EDITOR_UUID.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<TagRecord,io.metaloom.loom.db.jooq.tables.pojos.Tag,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<TagRecord,io.metaloom.loom.db.jooq.tables.pojos.Tag,UUID>) super.queryExecutor();
        }
}
