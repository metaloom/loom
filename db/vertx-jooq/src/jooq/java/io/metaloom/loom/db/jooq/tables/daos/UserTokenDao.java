/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.daos;


import io.github.jklingsporn.vertx.jooq.shared.reactive.AbstractReactiveVertxDAO;
import io.metaloom.loom.db.jooq.enums.LoomPermissionFlag;
import io.metaloom.loom.db.jooq.tables.UserToken;
import io.metaloom.loom.db.jooq.tables.records.UserTokenRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Configuration;


import java.util.List;
import io.reactivex.Single;
import java.util.Optional;
import io.github.jklingsporn.vertx.jooq.rx.reactivepg.ReactiveRXQueryExecutor;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTokenDao extends AbstractReactiveVertxDAO<UserTokenRecord, io.metaloom.loom.db.jooq.tables.pojos.UserToken, UUID, Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>>, Single<Optional<io.metaloom.loom.db.jooq.tables.pojos.UserToken>>, Single<Integer>, Single<UUID>> implements io.github.jklingsporn.vertx.jooq.rx.VertxDAO<UserTokenRecord,io.metaloom.loom.db.jooq.tables.pojos.UserToken,UUID> {

        /**
     * @param configuration The Configuration used for rendering and query execution.
     * @param vertx the vertx instance
     */
        public UserTokenDao(Configuration configuration, io.vertx.reactivex.sqlclient.SqlClient delegate) {
                super(UserToken.USER_TOKEN, io.metaloom.loom.db.jooq.tables.pojos.UserToken.class, new ReactiveRXQueryExecutor<UserTokenRecord,io.metaloom.loom.db.jooq.tables.pojos.UserToken,UUID>(configuration,delegate,io.metaloom.loom.db.jooq.tables.mappers.RowMappers.getUserTokenMapper()));
        }

        @Override
        protected UUID getId(io.metaloom.loom.db.jooq.tables.pojos.UserToken object) {
                return object.getUuid();
        }

        /**
     * Find records that have <code>user_uuid IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByUserUuid(Collection<UUID> values) {
                return findManyByCondition(UserToken.USER_TOKEN.USER_UUID.in(values));
        }

        /**
     * Find records that have <code>user_uuid IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByUserUuid(Collection<UUID> values, int limit) {
                return findManyByCondition(UserToken.USER_TOKEN.USER_UUID.in(values),limit);
        }

        /**
     * Find records that have <code>note IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByNote(Collection<String> values) {
                return findManyByCondition(UserToken.USER_TOKEN.NOTE.in(values));
        }

        /**
     * Find records that have <code>note IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByNote(Collection<String> values, int limit) {
                return findManyByCondition(UserToken.USER_TOKEN.NOTE.in(values),limit);
        }

        /**
     * Find records that have <code>token IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByToken(Collection<String> values) {
                return findManyByCondition(UserToken.USER_TOKEN.TOKEN.in(values));
        }

        /**
     * Find records that have <code>token IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByToken(Collection<String> values, int limit) {
                return findManyByCondition(UserToken.USER_TOKEN.TOKEN.in(values),limit);
        }

        /**
     * Find records that have <code>permissions IN (values)</code> asynchronously
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByPermissions(Collection<LoomPermissionFlag> values) {
                return findManyByCondition(UserToken.USER_TOKEN.PERMISSIONS.in(values));
        }

        /**
     * Find records that have <code>permissions IN (values)</code> asynchronously limited by the given limit
     */
        public Single<List<io.metaloom.loom.db.jooq.tables.pojos.UserToken>> findManyByPermissions(Collection<LoomPermissionFlag> values, int limit) {
                return findManyByCondition(UserToken.USER_TOKEN.PERMISSIONS.in(values),limit);
        }

        @Override
        public ReactiveRXQueryExecutor<UserTokenRecord,io.metaloom.loom.db.jooq.tables.pojos.UserToken,UUID> queryExecutor(){
                return (ReactiveRXQueryExecutor<UserTokenRecord,io.metaloom.loom.db.jooq.tables.pojos.UserToken,UUID>) super.queryExecutor();
        }
}
