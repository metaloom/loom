/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IAsset extends VertxPojo, Serializable {

    /**
     * Setter for <code>public.asset.uuid</code>.
     */
    public IAsset setUuid(UUID value);

    /**
     * Getter for <code>public.asset.uuid</code>.
     */
    public UUID getUuid();

    /**
     * Setter for <code>public.asset.asset_binary_uuid</code>.
     */
    public IAsset setAssetBinaryUuid(UUID value);

    /**
     * Getter for <code>public.asset.asset_binary_uuid</code>.
     */
    public UUID getAssetBinaryUuid();

    /**
     * Setter for <code>public.asset.namespace_uuid</code>.
     */
    public IAsset setNamespaceUuid(UUID value);

    /**
     * Getter for <code>public.asset.namespace_uuid</code>.
     */
    public UUID getNamespaceUuid();

    /**
     * Setter for <code>public.asset.filename</code>.
     */
    public IAsset setFilename(String value);

    /**
     * Getter for <code>public.asset.filename</code>.
     */
    public String getFilename();

    /**
     * Setter for <code>public.asset.localPath</code>. Local path to the asset (when using the local path feature)
     */
    public IAsset setLocalpath(String value);

    /**
     * Getter for <code>public.asset.localPath</code>. Local path to the asset (when using the local path feature)
     */
    public String getLocalpath();

    /**
     * Setter for <code>public.asset.meta</code>. Custom meta properties to the element
     */
    public IAsset setMeta(String value);

    /**
     * Getter for <code>public.asset.meta</code>. Custom meta properties to the element
     */
    public String getMeta();

    /**
     * Setter for <code>public.asset.rating</code>. Absolute or computed asset rating
     */
    public IAsset setRating(Integer value);

    /**
     * Getter for <code>public.asset.rating</code>. Absolute or computed asset rating
     */
    public Integer getRating();

    /**
     * Setter for <code>public.asset.dominantColor</code>.
     */
    public IAsset setDominantcolor(String value);

    /**
     * Getter for <code>public.asset.dominantColor</code>.
     */
    public String getDominantcolor();

    /**
     * Setter for <code>public.asset.mimeType</code>.
     */
    public IAsset setMimetype(String value);

    /**
     * Getter for <code>public.asset.mimeType</code>.
     */
    public String getMimetype();

    /**
     * Setter for <code>public.asset.gps_lon</code>.
     */
    public IAsset setGpsLon(BigDecimal value);

    /**
     * Getter for <code>public.asset.gps_lon</code>.
     */
    public BigDecimal getGpsLon();

    /**
     * Setter for <code>public.asset.gps_lat</code>.
     */
    public IAsset setGpsLat(BigDecimal value);

    /**
     * Getter for <code>public.asset.gps_lat</code>.
     */
    public BigDecimal getGpsLat();

    /**
     * Setter for <code>public.asset.s3_bucket_name</code>.
     */
    public IAsset setS3BucketName(String value);

    /**
     * Getter for <code>public.asset.s3_bucket_name</code>.
     */
    public String getS3BucketName();

    /**
     * Setter for <code>public.asset.s3_object_path</code>.
     */
    public IAsset setS3ObjectPath(String value);

    /**
     * Getter for <code>public.asset.s3_object_path</code>.
     */
    public String getS3ObjectPath();

    /**
     * Setter for <code>public.asset.created</code>.
     */
    public IAsset setCreated(LocalDateTime value);

    /**
     * Getter for <code>public.asset.created</code>.
     */
    public LocalDateTime getCreated();

    /**
     * Setter for <code>public.asset.creator_uuid</code>.
     */
    public IAsset setCreatorUuid(UUID value);

    /**
     * Getter for <code>public.asset.creator_uuid</code>.
     */
    public UUID getCreatorUuid();

    /**
     * Setter for <code>public.asset.edited</code>.
     */
    public IAsset setEdited(LocalDateTime value);

    /**
     * Getter for <code>public.asset.edited</code>.
     */
    public LocalDateTime getEdited();

    /**
     * Setter for <code>public.asset.editor_uuid</code>.
     */
    public IAsset setEditorUuid(UUID value);

    /**
     * Getter for <code>public.asset.editor_uuid</code>.
     */
    public UUID getEditorUuid();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IAsset
     */
    public void from(IAsset from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IAsset
     */
    public <E extends IAsset> E into(E into);

        @Override
        public default IAsset fromJson(io.vertx.core.json.JsonObject json) {
                // Omitting unrecognized type java.util.UUID for column uuid!
                // Omitting unrecognized type java.util.UUID for column asset_binary_uuid!
                // Omitting unrecognized type java.util.UUID for column namespace_uuid!
                setOrThrow(this::setFilename,json::getString,"filename","java.lang.String");
                setOrThrow(this::setLocalpath,json::getString,"localPath","java.lang.String");
                setOrThrow(this::setMeta,json::getString,"meta","java.lang.String");
                setOrThrow(this::setRating,json::getInteger,"rating","java.lang.Integer");
                setOrThrow(this::setDominantcolor,json::getString,"dominantColor","java.lang.String");
                setOrThrow(this::setMimetype,json::getString,"mimeType","java.lang.String");
                // Omitting unrecognized type java.math.BigDecimal for column gps_lon!
                // Omitting unrecognized type java.math.BigDecimal for column gps_lat!
                setOrThrow(this::setS3BucketName,json::getString,"s3_bucket_name","java.lang.String");
                setOrThrow(this::setS3ObjectPath,json::getString,"s3_object_path","java.lang.String");
                setOrThrow(this::setCreated,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"created","java.time.LocalDateTime");
                // Omitting unrecognized type java.util.UUID for column creator_uuid!
                setOrThrow(this::setEdited,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"edited","java.time.LocalDateTime");
                // Omitting unrecognized type java.util.UUID for column editor_uuid!
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                // Omitting unrecognized type java.util.UUID for column uuid!
                // Omitting unrecognized type java.util.UUID for column asset_binary_uuid!
                // Omitting unrecognized type java.util.UUID for column namespace_uuid!
                json.put("filename",getFilename());
                json.put("localPath",getLocalpath());
                json.put("meta",getMeta());
                json.put("rating",getRating());
                json.put("dominantColor",getDominantcolor());
                json.put("mimeType",getMimetype());
                // Omitting unrecognized type java.math.BigDecimal for column gps_lon!
                // Omitting unrecognized type java.math.BigDecimal for column gps_lat!
                json.put("s3_bucket_name",getS3BucketName());
                json.put("s3_object_path",getS3ObjectPath());
                json.put("created",getCreated()==null?null:getCreated().toString());
                // Omitting unrecognized type java.util.UUID for column creator_uuid!
                json.put("edited",getEdited()==null?null:getEdited().toString());
                // Omitting unrecognized type java.util.UUID for column editor_uuid!
                return json;
        }

}
