/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Table which stores the actual fields content as JSON
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IField extends VertxPojo, Serializable {

    /**
     * Setter for <code>public.field.uuid</code>.
     */
    public IField setUuid(UUID value);

    /**
     * Getter for <code>public.field.uuid</code>.
     */
    public UUID getUuid();

    /**
     * Setter for <code>public.field.content_uuid</code>. Reference to the content that uses this fields record
     */
    public IField setContentUuid(UUID value);

    /**
     * Getter for <code>public.field.content_uuid</code>. Reference to the content that uses this fields record
     */
    public UUID getContentUuid();

    /**
     * Setter for <code>public.field.fields_json</code>. JSON which contains the actual fields content
     */
    public IField setFieldsJson(String value);

    /**
     * Getter for <code>public.field.fields_json</code>. JSON which contains the actual fields content
     */
    public String getFieldsJson();

    /**
     * Setter for <code>public.field.language_uuid</code>.
     */
    public IField setLanguageUuid(UUID value);

    /**
     * Getter for <code>public.field.language_uuid</code>.
     */
    public UUID getLanguageUuid();

    /**
     * Setter for <code>public.field.edited</code>.
     */
    public IField setEdited(LocalDateTime value);

    /**
     * Getter for <code>public.field.edited</code>.
     */
    public LocalDateTime getEdited();

    /**
     * Setter for <code>public.field.editor_uuid</code>.
     */
    public IField setEditorUuid(UUID value);

    /**
     * Getter for <code>public.field.editor_uuid</code>.
     */
    public UUID getEditorUuid();

    /**
     * Setter for <code>public.field.modelversion_uuid</code>.
     */
    public IField setModelversionUuid(UUID value);

    /**
     * Getter for <code>public.field.modelversion_uuid</code>.
     */
    public UUID getModelversionUuid();

    /**
     * Setter for <code>public.field.version</code>.
     */
    public IField setVersion(Integer value);

    /**
     * Getter for <code>public.field.version</code>.
     */
    public Integer getVersion();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IField
     */
    public void from(IField from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IField
     */
    public <E extends IField> E into(E into);

        @Override
        public default IField fromJson(io.vertx.core.json.JsonObject json) {
                // Omitting unrecognized type java.util.UUID for column uuid!
                // Omitting unrecognized type java.util.UUID for column content_uuid!
                setOrThrow(this::setFieldsJson,json::getString,"fields_json","java.lang.String");
                // Omitting unrecognized type java.util.UUID for column language_uuid!
                setOrThrow(this::setEdited,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"edited","java.time.LocalDateTime");
                // Omitting unrecognized type java.util.UUID for column editor_uuid!
                // Omitting unrecognized type java.util.UUID for column modelversion_uuid!
                setOrThrow(this::setVersion,json::getInteger,"version","java.lang.Integer");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                // Omitting unrecognized type java.util.UUID for column uuid!
                // Omitting unrecognized type java.util.UUID for column content_uuid!
                json.put("fields_json",getFieldsJson());
                // Omitting unrecognized type java.util.UUID for column language_uuid!
                json.put("edited",getEdited()==null?null:getEdited().toString());
                // Omitting unrecognized type java.util.UUID for column editor_uuid!
                // Omitting unrecognized type java.util.UUID for column modelversion_uuid!
                json.put("version",getVersion());
                return json;
        }

}
