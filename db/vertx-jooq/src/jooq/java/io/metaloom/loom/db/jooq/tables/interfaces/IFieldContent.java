/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.enums.LoomContentType;

import java.io.Serializable;
import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Crosstable that tracks all fields for a content
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IFieldContent extends VertxPojo, Serializable {

    /**
     * Setter for <code>public.field_content.fields_uuid</code>.
     */
    public IFieldContent setFieldsUuid(UUID value);

    /**
     * Getter for <code>public.field_content.fields_uuid</code>.
     */
    public UUID getFieldsUuid();

    /**
     * Setter for <code>public.field_content.content_uuid</code>.
     */
    public IFieldContent setContentUuid(UUID value);

    /**
     * Getter for <code>public.field_content.content_uuid</code>.
     */
    public UUID getContentUuid();

    /**
     * Setter for <code>public.field_content.webroot_path_info</code>. prefixed with branch
     */
    public IFieldContent setWebrootPathInfo(String value);

    /**
     * Getter for <code>public.field_content.webroot_path_info</code>. prefixed with branch
     */
    public String getWebrootPathInfo();

    /**
     * Setter for <code>public.field_content.content_type</code>. D or P for draft and published
     */
    public IFieldContent setContentType(LoomContentType value);

    /**
     * Getter for <code>public.field_content.content_type</code>. D or P for draft and published
     */
    public LoomContentType getContentType();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IFieldContent
     */
    public void from(IFieldContent from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IFieldContent
     */
    public <E extends IFieldContent> E into(E into);

        @Override
        public default IFieldContent fromJson(io.vertx.core.json.JsonObject json) {
                // Omitting unrecognized type java.util.UUID for column fields_uuid!
                // Omitting unrecognized type java.util.UUID for column content_uuid!
                setOrThrow(this::setWebrootPathInfo,json::getString,"webroot_path_info","java.lang.String");
                setOrThrow(this::setContentType,key -> java.util.Arrays.stream(io.metaloom.loom.db.jooq.enums.LoomContentType.values()).filter(td -> td.getLiteral().equals(json.getString(key))).findFirst().orElse(null),"content_type","io.metaloom.loom.db.jooq.enums.LoomContentType");
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                // Omitting unrecognized type java.util.UUID for column fields_uuid!
                // Omitting unrecognized type java.util.UUID for column content_uuid!
                json.put("webroot_path_info",getWebrootPathInfo());
                json.put("content_type",getContentType()==null?null:getContentType().getLiteral());
                return json;
        }

}
