/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.interfaces;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.enums.LoomEvents;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Table which stores the registered webhooks
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public interface IWebhook extends VertxPojo, Serializable {

    /**
     * Setter for <code>public.webhook.uuid</code>.
     */
    public IWebhook setUuid(UUID value);

    /**
     * Getter for <code>public.webhook.uuid</code>.
     */
    public UUID getUuid();

    /**
     * Setter for <code>public.webhook.url</code>.
     */
    public IWebhook setUrl(String value);

    /**
     * Getter for <code>public.webhook.url</code>.
     */
    public String getUrl();

    /**
     * Setter for <code>public.webhook.status</code>.
     */
    public IWebhook setStatus(String value);

    /**
     * Getter for <code>public.webhook.status</code>.
     */
    public String getStatus();

    /**
     * Setter for <code>public.webhook.active</code>.
     */
    public IWebhook setActive(Boolean value);

    /**
     * Getter for <code>public.webhook.active</code>.
     */
    public Boolean getActive();

    /**
     * Setter for <code>public.webhook.triggers</code>. List of triggers which can invoke the webhook
     */
    public IWebhook setTriggers(LoomEvents value);

    /**
     * Getter for <code>public.webhook.triggers</code>. List of triggers which can invoke the webhook
     */
    public LoomEvents getTriggers();

    /**
     * Setter for <code>public.webhook.secretToken</code>. Secret token which webhook services can use to authenticate the request.
     */
    public IWebhook setSecrettoken(String value);

    /**
     * Getter for <code>public.webhook.secretToken</code>. Secret token which webhook services can use to authenticate the request.
     */
    public String getSecrettoken();

    /**
     * Setter for <code>public.webhook.meta</code>. Custom meta properties to the element
     */
    public IWebhook setMeta(String value);

    /**
     * Getter for <code>public.webhook.meta</code>. Custom meta properties to the element
     */
    public String getMeta();

    /**
     * Setter for <code>public.webhook.created</code>.
     */
    public IWebhook setCreated(LocalDateTime value);

    /**
     * Getter for <code>public.webhook.created</code>.
     */
    public LocalDateTime getCreated();

    /**
     * Setter for <code>public.webhook.creator_uuid</code>.
     */
    public IWebhook setCreatorUuid(UUID value);

    /**
     * Getter for <code>public.webhook.creator_uuid</code>.
     */
    public UUID getCreatorUuid();

    /**
     * Setter for <code>public.webhook.edited</code>.
     */
    public IWebhook setEdited(LocalDateTime value);

    /**
     * Getter for <code>public.webhook.edited</code>.
     */
    public LocalDateTime getEdited();

    /**
     * Setter for <code>public.webhook.editor_uuid</code>.
     */
    public IWebhook setEditorUuid(UUID value);

    /**
     * Getter for <code>public.webhook.editor_uuid</code>.
     */
    public UUID getEditorUuid();

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    /**
     * Load data from another generated Record/POJO implementing the common interface IWebhook
     */
    public void from(IWebhook from);

    /**
     * Copy data into another generated Record/POJO implementing the common interface IWebhook
     */
    public <E extends IWebhook> E into(E into);

        @Override
        public default IWebhook fromJson(io.vertx.core.json.JsonObject json) {
                // Omitting unrecognized type java.util.UUID for column uuid!
                setOrThrow(this::setUrl,json::getString,"url","java.lang.String");
                setOrThrow(this::setStatus,json::getString,"status","java.lang.String");
                setOrThrow(this::setActive,json::getBoolean,"active","java.lang.Boolean");
                setOrThrow(this::setTriggers,key -> java.util.Arrays.stream(io.metaloom.loom.db.jooq.enums.LoomEvents.values()).filter(td -> td.getLiteral().equals(json.getString(key))).findFirst().orElse(null),"triggers","io.metaloom.loom.db.jooq.enums.LoomEvents");
                setOrThrow(this::setSecrettoken,json::getString,"secretToken","java.lang.String");
                setOrThrow(this::setMeta,json::getString,"meta","java.lang.String");
                setOrThrow(this::setCreated,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"created","java.time.LocalDateTime");
                // Omitting unrecognized type java.util.UUID for column creator_uuid!
                setOrThrow(this::setEdited,key -> {String s = json.getString(key); return s==null?null:java.time.LocalDateTime.parse(s);},"edited","java.time.LocalDateTime");
                // Omitting unrecognized type java.util.UUID for column editor_uuid!
                return this;
        }


        @Override
        public default io.vertx.core.json.JsonObject toJson() {
                io.vertx.core.json.JsonObject json = new io.vertx.core.json.JsonObject();
                // Omitting unrecognized type java.util.UUID for column uuid!
                json.put("url",getUrl());
                json.put("status",getStatus());
                json.put("active",getActive());
                json.put("triggers",getTriggers()==null?null:getTriggers().getLiteral());
                json.put("secretToken",getSecrettoken());
                json.put("meta",getMeta());
                json.put("created",getCreated()==null?null:getCreated().toString());
                // Omitting unrecognized type java.util.UUID for column creator_uuid!
                json.put("edited",getEdited()==null?null:getEdited().toString());
                // Omitting unrecognized type java.util.UUID for column editor_uuid!
                return json;
        }

}
