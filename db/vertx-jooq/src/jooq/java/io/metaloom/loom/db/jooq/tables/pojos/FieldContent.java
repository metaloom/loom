/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.enums.LoomContentType;
import io.metaloom.loom.db.jooq.tables.interfaces.IFieldContent;

import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Crosstable that tracks all fields for a content
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldContent implements VertxPojo, IFieldContent {

    private static final long serialVersionUID = 1L;

    private UUID            fieldsUuid;
    private UUID            contentUuid;
    private String          webrootPathInfo;
    private LoomContentType contentType;

    public FieldContent() {}

    public FieldContent(IFieldContent value) {
        this.fieldsUuid = value.getFieldsUuid();
        this.contentUuid = value.getContentUuid();
        this.webrootPathInfo = value.getWebrootPathInfo();
        this.contentType = value.getContentType();
    }

    public FieldContent(
        UUID            fieldsUuid,
        UUID            contentUuid,
        String          webrootPathInfo,
        LoomContentType contentType
    ) {
        this.fieldsUuid = fieldsUuid;
        this.contentUuid = contentUuid;
        this.webrootPathInfo = webrootPathInfo;
        this.contentType = contentType;
    }

        public FieldContent(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>public.field_content.fields_uuid</code>.
     */
    @Override
    public UUID getFieldsUuid() {
        return this.fieldsUuid;
    }

    /**
     * Setter for <code>public.field_content.fields_uuid</code>.
     */
    @Override
    public FieldContent setFieldsUuid(UUID fieldsUuid) {
        this.fieldsUuid = fieldsUuid;
        return this;
    }

    /**
     * Getter for <code>public.field_content.content_uuid</code>.
     */
    @Override
    public UUID getContentUuid() {
        return this.contentUuid;
    }

    /**
     * Setter for <code>public.field_content.content_uuid</code>.
     */
    @Override
    public FieldContent setContentUuid(UUID contentUuid) {
        this.contentUuid = contentUuid;
        return this;
    }

    /**
     * Getter for <code>public.field_content.webroot_path_info</code>. prefixed with branch
     */
    @Override
    public String getWebrootPathInfo() {
        return this.webrootPathInfo;
    }

    /**
     * Setter for <code>public.field_content.webroot_path_info</code>. prefixed with branch
     */
    @Override
    public FieldContent setWebrootPathInfo(String webrootPathInfo) {
        this.webrootPathInfo = webrootPathInfo;
        return this;
    }

    /**
     * Getter for <code>public.field_content.content_type</code>. D or P for draft and published
     */
    @Override
    public LoomContentType getContentType() {
        return this.contentType;
    }

    /**
     * Setter for <code>public.field_content.content_type</code>. D or P for draft and published
     */
    @Override
    public FieldContent setContentType(LoomContentType contentType) {
        this.contentType = contentType;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("FieldContent (");

        sb.append(fieldsUuid);
        sb.append(", ").append(contentUuid);
        sb.append(", ").append(webrootPathInfo);
        sb.append(", ").append(contentType);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IFieldContent from) {
        setFieldsUuid(from.getFieldsUuid());
        setContentUuid(from.getContentUuid());
        setWebrootPathInfo(from.getWebrootPathInfo());
        setContentType(from.getContentType());
    }

    @Override
    public <E extends IFieldContent> E into(E into) {
        into.from(this);
        return into;
    }
}
