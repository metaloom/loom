/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.pojos;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.enums.LoomEvents;
import io.metaloom.loom.db.jooq.tables.interfaces.IWebhook;

import java.time.LocalDateTime;
import java.util.UUID;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Table which stores the registered webhooks
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webhook implements VertxPojo, IWebhook {

    private static final long serialVersionUID = 1L;

    private UUID          uuid;
    private String        url;
    private String        status;
    private Boolean       active;
    private LoomEvents    triggers;
    private String        secrettoken;
    private String        meta;
    private LocalDateTime created;
    private UUID          creatorUuid;
    private LocalDateTime edited;
    private UUID          editorUuid;

    public Webhook() {}

    public Webhook(IWebhook value) {
        this.uuid = value.getUuid();
        this.url = value.getUrl();
        this.status = value.getStatus();
        this.active = value.getActive();
        this.triggers = value.getTriggers();
        this.secrettoken = value.getSecrettoken();
        this.meta = value.getMeta();
        this.created = value.getCreated();
        this.creatorUuid = value.getCreatorUuid();
        this.edited = value.getEdited();
        this.editorUuid = value.getEditorUuid();
    }

    public Webhook(
        UUID          uuid,
        String        url,
        String        status,
        Boolean       active,
        LoomEvents    triggers,
        String        secrettoken,
        String        meta,
        LocalDateTime created,
        UUID          creatorUuid,
        LocalDateTime edited,
        UUID          editorUuid
    ) {
        this.uuid = uuid;
        this.url = url;
        this.status = status;
        this.active = active;
        this.triggers = triggers;
        this.secrettoken = secrettoken;
        this.meta = meta;
        this.created = created;
        this.creatorUuid = creatorUuid;
        this.edited = edited;
        this.editorUuid = editorUuid;
    }

        public Webhook(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }

    /**
     * Getter for <code>public.webhook.uuid</code>.
     */
    @Override
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.webhook.uuid</code>.
     */
    @Override
    public Webhook setUuid(UUID uuid) {
        this.uuid = uuid;
        return this;
    }

    /**
     * Getter for <code>public.webhook.url</code>.
     */
    @Override
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>public.webhook.url</code>.
     */
    @Override
    public Webhook setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Getter for <code>public.webhook.status</code>.
     */
    @Override
    public String getStatus() {
        return this.status;
    }

    /**
     * Setter for <code>public.webhook.status</code>.
     */
    @Override
    public Webhook setStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Getter for <code>public.webhook.active</code>.
     */
    @Override
    public Boolean getActive() {
        return this.active;
    }

    /**
     * Setter for <code>public.webhook.active</code>.
     */
    @Override
    public Webhook setActive(Boolean active) {
        this.active = active;
        return this;
    }

    /**
     * Getter for <code>public.webhook.triggers</code>. List of triggers which can invoke the webhook
     */
    @Override
    public LoomEvents getTriggers() {
        return this.triggers;
    }

    /**
     * Setter for <code>public.webhook.triggers</code>. List of triggers which can invoke the webhook
     */
    @Override
    public Webhook setTriggers(LoomEvents triggers) {
        this.triggers = triggers;
        return this;
    }

    /**
     * Getter for <code>public.webhook.secretToken</code>. Secret token which webhook services can use to authenticate the request.
     */
    @Override
    public String getSecrettoken() {
        return this.secrettoken;
    }

    /**
     * Setter for <code>public.webhook.secretToken</code>. Secret token which webhook services can use to authenticate the request.
     */
    @Override
    public Webhook setSecrettoken(String secrettoken) {
        this.secrettoken = secrettoken;
        return this;
    }

    /**
     * Getter for <code>public.webhook.meta</code>. Custom meta properties to the element
     */
    @Override
    public String getMeta() {
        return this.meta;
    }

    /**
     * Setter for <code>public.webhook.meta</code>. Custom meta properties to the element
     */
    @Override
    public Webhook setMeta(String meta) {
        this.meta = meta;
        return this;
    }

    /**
     * Getter for <code>public.webhook.created</code>.
     */
    @Override
    public LocalDateTime getCreated() {
        return this.created;
    }

    /**
     * Setter for <code>public.webhook.created</code>.
     */
    @Override
    public Webhook setCreated(LocalDateTime created) {
        this.created = created;
        return this;
    }

    /**
     * Getter for <code>public.webhook.creator_uuid</code>.
     */
    @Override
    public UUID getCreatorUuid() {
        return this.creatorUuid;
    }

    /**
     * Setter for <code>public.webhook.creator_uuid</code>.
     */
    @Override
    public Webhook setCreatorUuid(UUID creatorUuid) {
        this.creatorUuid = creatorUuid;
        return this;
    }

    /**
     * Getter for <code>public.webhook.edited</code>.
     */
    @Override
    public LocalDateTime getEdited() {
        return this.edited;
    }

    /**
     * Setter for <code>public.webhook.edited</code>.
     */
    @Override
    public Webhook setEdited(LocalDateTime edited) {
        this.edited = edited;
        return this;
    }

    /**
     * Getter for <code>public.webhook.editor_uuid</code>.
     */
    @Override
    public UUID getEditorUuid() {
        return this.editorUuid;
    }

    /**
     * Setter for <code>public.webhook.editor_uuid</code>.
     */
    @Override
    public Webhook setEditorUuid(UUID editorUuid) {
        this.editorUuid = editorUuid;
        return this;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Webhook (");

        sb.append(uuid);
        sb.append(", ").append(url);
        sb.append(", ").append(status);
        sb.append(", ").append(active);
        sb.append(", ").append(triggers);
        sb.append(", ").append(secrettoken);
        sb.append(", ").append(meta);
        sb.append(", ").append(created);
        sb.append(", ").append(creatorUuid);
        sb.append(", ").append(edited);
        sb.append(", ").append(editorUuid);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IWebhook from) {
        setUuid(from.getUuid());
        setUrl(from.getUrl());
        setStatus(from.getStatus());
        setActive(from.getActive());
        setTriggers(from.getTriggers());
        setSecrettoken(from.getSecrettoken());
        setMeta(from.getMeta());
        setCreated(from.getCreated());
        setCreatorUuid(from.getCreatorUuid());
        setEdited(from.getEdited());
        setEditorUuid(from.getEditorUuid());
    }

    @Override
    public <E extends IWebhook> E into(E into) {
        into.from(this);
        return into;
    }
}
