/*
 * This file is generated by jOOQ.
 */
package io.metaloom.loom.db.jooq.tables.records;


import io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo;
import io.metaloom.loom.db.jooq.tables.Field;
import io.metaloom.loom.db.jooq.tables.interfaces.IField;

import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


import static io.github.jklingsporn.vertx.jooq.shared.internal.VertxPojo.*;
/**
 * Table which stores the actual fields content as JSON
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldRecord extends UpdatableRecordImpl<FieldRecord> implements VertxPojo, Record8<UUID, UUID, String, UUID, LocalDateTime, UUID, UUID, Integer>, IField {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.field.uuid</code>.
     */
    @Override
    public FieldRecord setUuid(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.field.uuid</code>.
     */
    @Override
    public UUID getUuid() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.field.content_uuid</code>. Reference to the content that uses this fields record
     */
    @Override
    public FieldRecord setContentUuid(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.field.content_uuid</code>. Reference to the content that uses this fields record
     */
    @Override
    public UUID getContentUuid() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.field.fields_json</code>. JSON which contains the actual fields content
     */
    @Override
    public FieldRecord setFieldsJson(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.field.fields_json</code>. JSON which contains the actual fields content
     */
    @Override
    public String getFieldsJson() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.field.language_uuid</code>.
     */
    @Override
    public FieldRecord setLanguageUuid(UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.field.language_uuid</code>.
     */
    @Override
    public UUID getLanguageUuid() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>public.field.edited</code>.
     */
    @Override
    public FieldRecord setEdited(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.field.edited</code>.
     */
    @Override
    public LocalDateTime getEdited() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.field.editor_uuid</code>.
     */
    @Override
    public FieldRecord setEditorUuid(UUID value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.field.editor_uuid</code>.
     */
    @Override
    public UUID getEditorUuid() {
        return (UUID) get(5);
    }

    /**
     * Setter for <code>public.field.modelversion_uuid</code>.
     */
    @Override
    public FieldRecord setModelversionUuid(UUID value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.field.modelversion_uuid</code>.
     */
    @Override
    public UUID getModelversionUuid() {
        return (UUID) get(6);
    }

    /**
     * Setter for <code>public.field.version</code>.
     */
    @Override
    public FieldRecord setVersion(Integer value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.field.version</code>.
     */
    @Override
    public Integer getVersion() {
        return (Integer) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, UUID, String, UUID, LocalDateTime, UUID, UUID, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<UUID, UUID, String, UUID, LocalDateTime, UUID, UUID, Integer> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public org.jooq.Field<UUID> field1() {
        return Field.FIELD.UUID;
    }

    @Override
    public org.jooq.Field<UUID> field2() {
        return Field.FIELD.CONTENT_UUID;
    }

    @Override
    public org.jooq.Field<String> field3() {
        return Field.FIELD.FIELDS_JSON;
    }

    @Override
    public org.jooq.Field<UUID> field4() {
        return Field.FIELD.LANGUAGE_UUID;
    }

    @Override
    public org.jooq.Field<LocalDateTime> field5() {
        return Field.FIELD.EDITED;
    }

    @Override
    public org.jooq.Field<UUID> field6() {
        return Field.FIELD.EDITOR_UUID;
    }

    @Override
    public org.jooq.Field<UUID> field7() {
        return Field.FIELD.MODELVERSION_UUID;
    }

    @Override
    public org.jooq.Field<Integer> field8() {
        return Field.FIELD.VERSION;
    }

    @Override
    public UUID component1() {
        return getUuid();
    }

    @Override
    public UUID component2() {
        return getContentUuid();
    }

    @Override
    public String component3() {
        return getFieldsJson();
    }

    @Override
    public UUID component4() {
        return getLanguageUuid();
    }

    @Override
    public LocalDateTime component5() {
        return getEdited();
    }

    @Override
    public UUID component6() {
        return getEditorUuid();
    }

    @Override
    public UUID component7() {
        return getModelversionUuid();
    }

    @Override
    public Integer component8() {
        return getVersion();
    }

    @Override
    public UUID value1() {
        return getUuid();
    }

    @Override
    public UUID value2() {
        return getContentUuid();
    }

    @Override
    public String value3() {
        return getFieldsJson();
    }

    @Override
    public UUID value4() {
        return getLanguageUuid();
    }

    @Override
    public LocalDateTime value5() {
        return getEdited();
    }

    @Override
    public UUID value6() {
        return getEditorUuid();
    }

    @Override
    public UUID value7() {
        return getModelversionUuid();
    }

    @Override
    public Integer value8() {
        return getVersion();
    }

    @Override
    public FieldRecord value1(UUID value) {
        setUuid(value);
        return this;
    }

    @Override
    public FieldRecord value2(UUID value) {
        setContentUuid(value);
        return this;
    }

    @Override
    public FieldRecord value3(String value) {
        setFieldsJson(value);
        return this;
    }

    @Override
    public FieldRecord value4(UUID value) {
        setLanguageUuid(value);
        return this;
    }

    @Override
    public FieldRecord value5(LocalDateTime value) {
        setEdited(value);
        return this;
    }

    @Override
    public FieldRecord value6(UUID value) {
        setEditorUuid(value);
        return this;
    }

    @Override
    public FieldRecord value7(UUID value) {
        setModelversionUuid(value);
        return this;
    }

    @Override
    public FieldRecord value8(Integer value) {
        setVersion(value);
        return this;
    }

    @Override
    public FieldRecord values(UUID value1, UUID value2, String value3, UUID value4, LocalDateTime value5, UUID value6, UUID value7, Integer value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IField from) {
        setUuid(from.getUuid());
        setContentUuid(from.getContentUuid());
        setFieldsJson(from.getFieldsJson());
        setLanguageUuid(from.getLanguageUuid());
        setEdited(from.getEdited());
        setEditorUuid(from.getEditorUuid());
        setModelversionUuid(from.getModelversionUuid());
        setVersion(from.getVersion());
    }

    @Override
    public <E extends IField> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FieldRecord
     */
    public FieldRecord() {
        super(Field.FIELD);
    }

    /**
     * Create a detached, initialised FieldRecord
     */
    public FieldRecord(UUID uuid, UUID contentUuid, String fieldsJson, UUID languageUuid, LocalDateTime edited, UUID editorUuid, UUID modelversionUuid, Integer version) {
        super(Field.FIELD);

        setUuid(uuid);
        setContentUuid(contentUuid);
        setFieldsJson(fieldsJson);
        setLanguageUuid(languageUuid);
        setEdited(edited);
        setEditorUuid(editorUuid);
        setModelversionUuid(modelversionUuid);
        setVersion(version);
    }

        public FieldRecord(io.vertx.core.json.JsonObject json) {
                this();
                fromJson(json);
        }
}
