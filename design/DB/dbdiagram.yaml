Project LOOM {
  Note: '''
    # MetaLoom - Loom 1.0 Database model

  '''
}
//// -- LEVEL 1
//// -- Tables and References

// Creating tables

Table loom as LOOM [headercolor: #4B82B0] {
  db_rev varchar
  last_used_timestamp timestamp [default: `now()`, not null]
}

Table user as U [headercolor: #16a085] {
  uuid uuid_generate_v4 [increment]
  username varchar [unique, not null]
  firstname varchar
  lastname varchar
  email varchar
  enabled boolean [default: true, not null, note: "Flag to enable or disable the user."]
  sso boolean [default: false, not null, note: "Flag that indicates that the user was created via SSO mappings"]
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`]
  creator_uuid uuid  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid_generate_v4 [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (username) [unique]
  }
}

Table token as AK {
  uuid uuid_generate_v4 [increment]
  user_uuid uuid_generate_v4 [ref: > U.uuid]
  description varchar
  token varchar [not null]
  created timestamp [default: `now()`]
  meta varchar [note: "Custom meta properties to the element"]
  
  Indexes {
    (uuid) [pk]
    (token) [unique]
    (user_uuid)
  }

}

Table role as R [headercolor: #16a085] {
  uuid uuid_generate_v4 [increment]
  name varchar [unique, not null]
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid_generate_v4  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid_generate_v4 [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}

Table role_permission as PERM {
  role_uuid uuid_generate_v4 [ref: > R.uuid]
  resource varchar [not null]
  permission loom_permission [note: "Permission granted / granted to the resource"]
  
  Indexes {
    (role_uuid, resource) [pk]
  }
}

Table user_permission as UPERM {
  user_uuid uuid_generate_v4 [ref: > U.uuid]
  resource varchar [not null]
  permission loom_permission [note: "Permission granted / granted to the resource"]
  
  Indexes {
    (user_uuid, resource) [pk]
  }
}

Table token_permission as TPERM {
  token_uuid uuid_generate_v4 [ref: > AK.uuid]
  resource varchar [not null]
  permission loom_permission [note: "Permission granted / granted to the resource"]
  
  Indexes {
    (token_uuid, resource) [pk]
  }
}

Table group as G [headercolor: #16a085] {
  uuid uuid_generate_v4 [increment]
  name varchar [unique, not null]
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid_generate_v4  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid_generate_v4 [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}
 
Table role_group as RG {
   group_uuid uuid_generate_v4 [ref: > G.uuid, not null]
   role_uuid uuid_generate_v4 [ref: > R.uuid, not null]
   
  Indexes {
    (group_uuid, role_uuid) [pk]
  }
}

Table user_group as UG {
   user_uuid uuid_generate_v4 [ref: > U.uuid, not null]
   group_uuid uuid_generate_v4 [ref: > G.uuid, not null]
   
  Indexes {
    (user_uuid, group_uuid) [pk]
  }
}

Table tag as T [headercolor: #16a085] {
  uuid uuid_generate_v4 [increment]
  name varchar [not null]
  collection varchar [not null]
  meta varchar [note: "Custom meta properties to the element"]
  rating int [note: "Absolute or buffered/precomputed rating information"]

  created timestamp [default: `now()`, not null]
  creator_uuid uuid_generate_v4  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid_generate_v4 [ref: > U.uuid]

  Indexes {
    (uuid) [pk]
    (name, collection) [unique]
  }
}

Table tag_user_meta as TUM {
  tag_uuid uuid_generate_v4 [ref: > T.uuid, not null]
  user_uuid uuid_generate_v4 [ref: > U.uuid, not null]
  rating int [not null, note: "Rating of the tag by the user"]
  meta varchar [note: "Custom meta properties"]
}


Table tag_asset {
  tag_uuid uuid_generate_v4 [ref: > T.uuid, not null]
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid, not null]
  
  Indexes {
    (tag_uuid, asset_uuid) [pk]
  }
  
  note: "Store tag <-> asset reference"
}


Table tag_collection {
  tag_uuid uuid_generate_v4 [ref: > T.uuid, not null]
  collection_uuid uuid_generate_v4 [ref: > COLLECTION.uuid, not null]
  
  Indexes {
    (tag_uuid, collection_uuid) [pk]
  }
  
  note: "Store tag <-> collection reference"
}


tablegroup Tagging {
  tag
  tag_asset
  tag_collection
  tag_user_meta
}




Table asset_binary as AB {
  uuid uuid_generate_v4 [increment]
  sha512sum varchar [not null]

  size int [not null]
  sha256sum varchar [not null]
  md5sum varchar [not null]
  media_width  int [note: "Only set for images"]
  media_height int [note: "Only set for images"]
  fingerprint varchar [note: "Media fingerprint information"]

  // TODO extracted meta attribute -> Asset?

  Indexes {
    (sha512sum) [pk]
  }
  
  note: "This table stores the immutable asset information"
}

Table asset as ASSET [headercolor: #16a085] {
  uuid uuid_generate_v4 [increment]
  asset_binary_uuid uuid_generate_v4 [ref: > AB.uuid, not null]

  filename varchar [not null]
  localPath varchar [note: "Local path to the asset (when using the local path feature)"]
  meta varchar [note: "Custom meta properties to the element"]
  rating int [note: "Absolute or computed asset rating"]
  dominantColor varchar
  mimeType varchar
  gps_lon decimal(9,6)
  gps_lat decimal(8,6)

  state varchar
  locked_by_uuid uuid_generate_v4 [ref: > U.uuid]
  // Locking reason can be stored in meta? or state? Do we need a dedicated field?
  //author, license, metadata

  // S3
  // Whenever the props change the asset_binary information has to be checked
  // Information must be mutable to avoid broken images in case of bucket changes
  s3_bucket_name varchar
  s3_object_path varchar

  // TODO store information which processor did handle the asset? eg. useful for re-run of processors

  created timestamp [default: `now()`, not null]
  creator_uuid uuid_generate_v4  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid_generate_v4 [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
  }
}

Table asset_face {
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid, not null]
  face_uuid uuid_generate_v4 [ref: > FACE.uuid, not null]
}

Table face as FACE [headercolor: #16A085] {
  uuid uuid_generate_v4 [increment]
  meta varchar [note: "Custom meta properties to the face."]
  source varchar [note: "Source information (e.g.: frame of the media from which the face was extracted)."]
  face_nr int [not null, note: "When the source contains more than one face the id can be used to identify them."]
  embeddings bytea [not null, note: "Actual embedding data"]
}

Table face_cluster as FACE_CLUSTER {
  uuid uuid_generate_v4 [increment]
  name varchar [note: "Name of the cluster"]
  description varchar [note: "Description of the cluster"]
  meta varchar [note: "Custom meta properties to the cluster."]
}

// Asset Collection

// TODO per namespace?
Table collection as COLLECTION [headercolor: #16A085] {
  uuid uuid_generate_v4 [increment]
  name varchar [unique, not null]
  meta varchar [note: "Custom meta properties"]
  description varchar
  //thumbail varchar
  Indexes {
    (uuid) [pk]
  }
  
  note: "Collections are used to group assets together"
}


Table asset_collection {
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid, not null]
  collection_uuid uuid_generate_v4 [ref: > COLLECTION.uuid, not null]
}

tablegroup AssetCollection {
  collection
  asset_collection
}

// Comment

Table comment as COMMENT [headercolor: #16A085] {
  uuid uuid_generate_v4 [increment]
  title varchar [note: "Comment title"]
  content varchar [note: "Comment text"]
  user_uuid uuid_generate_v4 [ref: > U.uuid]
  created varchar  [note: "Creation timestamp"]
  edited varchar  [note: "Edit timestamp"]
  parent_uuid uuid_generate_v4 [ref: > COMMENT.uuid]
}

// TODO maybe better to use a  root_comment_uuid field in task
Table task_comment {
  task_uuid uuid_generate_v4 [ref: > TASK.uuid, not null]
  comment_uuid uuid_generate_v4 [ref: > COMMENT.uuid, not null]
}

Table annotaion_comment {
  annotation_uuid uuid_generate_v4 [ref: > ANNOTATION.uuid, not null]
  comment_uuid uuid_generate_v4 [ref: > COMMENT.uuid, not null]
}


tablegroup Comment {
  comment
  task_comment
  annotaion_comment
}

// Reaction

Table reaction as REACTION [headercolor: #16A085] {
  uuid uuid_generate_v4 [increment]
  type varchar [note: "Type of the reaction"]
  user_uuid  uuid_generate_v4 [ref: > U.uuid]
}

Table reaction_asset {
  reaction_uuid uuid_generate_v4 [ref: > REACTION.uuid]
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid]
}

Table reaction_comment {
  reaction_uuid uuid_generate_v4 [ref: > REACTION.uuid]
  comment_uuid uuid_generate_v4 [ref: > COMMENT.uuid]
}

Table reaction_annotation {
  reaction_uuid uuid_generate_v4 [ref: > REACTION.uuid]
  annotation_uuid uuid_generate_v4 [ref: > ANNOTATION.uuid]
}



tablegroup Reaction {
  reaction
  reaction_asset
  reaction_comment
  reaction_annotation
}

// Annotation

Table annotation as ANNOTATION [headercolor: #16A085] {
  uuid uuid_generate_v4 [increment]
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid, not null]
  creator_uuid  uuid_generate_v4 [ref: > U.uuid]
  created timestamp [default: `now()`]
  description varchar
  from int
  to int
  areaStartX int
  areaStartY int
  areaWidth  int
  areaHeight int
  meta jsonb [note: "Custom meta properties"]
  kind varchar [note: "Type of the annotation"]
    
  tags varchar
  thumbail varchar

  Indexes {
    (uuid) [pk]
  }
  
  note: "This table contains asset annotation entries"
}

Table annotation_tag as ANNOTATION_TAGS {
  annotation_uuid   uuid_generate_v4 [ref: > ANNOTATION.uuid, not null]
  tag_uuid          uuid_generate_v4 [ref: > T.uuid, not null]
}

tablegroup Annotation {
  annotation
  annotation_tag
}

// TASKS

Table task as TASK [headercolor: #16A085] {
  uuid uuid_generate_v4 [increment]
  title varchar [not null, note: "Title of the task"]
  content varchar [note: "Description of the task"]
  created timestamp [default: `now()`]
  due_date timestamp [default: `now()`]
}


Table asset_task {
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid, not null]
  task_uuid uuid_generate_v4 [ref: > TASK.uuid, not null]
}

Table annotation_task {
  annotation_uuid uuid_generate_v4 [ref: > ANNOTATION.uuid, not null]
  task_uuid uuid_generate_v4 [ref: > TASK.uuid, not null]
}

tablegroup Task {
  task  
  annotation_task
  asset_task  
}



Table asset_user_meta as AUM {
  asset_uuid uuid_generate_v4 [ref: > ASSET.uuid, not null]
  user_uuid uuid_generate_v4 [ref: > U.uuid, not null]
  rating int [note: "Asset rating by the user"]
  meta varchar [note: "Custom meta properties"]
  
  Indexes {
    (asset_uuid, user_uuid) [pk]
  }
}


Table webhook as W [headercolor: #16a085] {
  uuid uuid_generate_v4 [increment]
  url varchar [not null]
  status varchar
  active boolean [default: true, not null]
  triggers loom_events [note: "List of triggers which can invoke the webhook"]
  secretToken varchar [note: "Secret token which webhook services can use to authenticate the request."]
  meta varchar [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid_generate_v4 [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid_generate_v4 [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
  }
  
  note: "Table which stores the registered webhooks"
}


// Groups

tablegroup Others {
  loom
}

tablegroup Connectivity {
  webhook
}

tablegroup Assets {
  asset
  asset_binary
  asset_user_meta
}

tablegroup ACL {
  user
  role
  group
  user_group
  role_group
  token
  role_permission
  user_permission
  token_permission
}


tablegroup Face {
  face
  asset_face
  face_cluster
}



// Enums

Enum loom_extension_type {
  ASSET_PROCESSOR
  USER_MAPPER
}

Enum loom_events {

  USER_LOGGED_IN
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_MAPPED
  
  GROUP_CREATED
  GROUP_UPDATED
  GROUP_DELETED
  
  ROLE_CREATED
  ROLE_UPDATED
  ROLE_DELETED

  ASSET_UPLOADED
  ASSET_CREATED
  ASSET_UPDATED
  ASSET_DELETED
  ASSET_TAGGED
  
  TAG_CREATED
  TAG_DELETED
  TAG_UPDATED  
 
  WEBHOOK_CREATED
  WEBHOOK_DELETED
  WEBHOOK_UPDATED
  
  //note: "List of events which can trigger a webhook"
}


Enum loom_content_type {
  D
  P
  I [note: 'Maybe implicitly used']
}

Enum state_status {
  ACCEPTED
  REJECTED
  PENDING
  REVIEW
}


Enum loom_permission {
  // C
  CREATE_CONTENT
  READ_CONTENT
  UPDATE_CONTENT
  DELETE_CONTENT
  PUBLISH_CONTENT
  UNPUBLISH_CONTENT
  LOCK_CONTENT
  UNLOCK_CONTENT

  // N
  CREATE_NAMESPACE
  READ_NAMESPACE
  UPDATE_NAMESPACE
  DELETE_NAMESPACE
  
  // U
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  
  // G
  CREATE_GROUP
  READ_GROUP
  UPDATE_GROUP
  DELETE_GROUP
  
  // R
  CREATE_ROLE
  READ_ROLE
  UPDATE_ROLE
  DELETE_ROLE
  
  // T
  CREATE_TAG
  READ_TAG
  UPDATE_TAG
  DELETE_TAG
  
  // M
  CREATE_MODEL
  READ_MODEL
  UPDATE_MODEL
  DELETE_MODEL
  
  // A
  CREATE_ASSET
  READ_ASSET
  UPDATE_ASSET
  DELETE_ASSET
  UPLOAD_ASSET
  DOWNLOAD_ASSET
  LOCK_ASSET
  UNLOCK_ASSET
  
  // W
  CREATE_WEBHOOK
  READ_WEBHOOK
  UPDATE_WEBHOOK
  DELETE_WEBHOOK

  // E
  CREATE_EXTENSION
  READ_EXTENSION
  UPDATE_EXTENSION
  DELETE_EXTENSION

  // L
  CREATE_LANGUAGE
  READ_LANGUAGE
  UPDATE_LANGUAGE
  DELETE_LANGUAGE

  // ADMIN
  // TBD
  
}

Ref: "asset"."edited" < "asset"."created"


Ref: "collection"."description" < "collection"."uuid"
