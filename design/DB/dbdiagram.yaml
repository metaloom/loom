Project LOOM {
  Note: '''
    # MetaLoom - Loom 1.0 Database model

  '''
}
//// -- LEVEL 1
//// -- Tables and References

// Creating tables

Table loom as LOOM [headercolor: #4B82B0] {
  db_rev varchar
  last_used_timestamp timestamp [default: `now()`, not null]
}

Table user as U [headercolor: #16a085] {
  uuid uuid [increment]
  username varchar [unique, not null]
  firstname varchar
  lastname varchar
  email varchar
  enabled boolean [default: true, not null, note: "Flag to enable or disable the user."]
  sso boolean [default: false, not null, note: "Flag that indicates that the user was created via SSO mappings"]
  meta jsonb [note: "Custom meta properties to the element"]
  password_hash varchar
  
  created timestamp [default: `now()`]
  creator_uuid uuid  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (username) [unique]
  }
}

Table token as AK [headercolor: #16A085] {
  uuid uuid [increment]
  user_uuid uuid [ref: > U.uuid]
  description varchar
  token varchar [not null]
  created timestamp [default: `now()`]
  meta jsonb [note: "Custom meta properties to the element"]
  
  Indexes {
    (uuid) [pk]
    (token) [unique]
    (user_uuid)
  }
}

Table role as R [headercolor: #16a085] {
  uuid uuid [increment]
  name varchar [unique, not null]
  meta jsonb [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}

Table role_permission as PERM [headercolor: #24BAB1] {
  role_uuid uuid [ref: > R.uuid]
  resource varchar [not null]
  permission loom_permission [note: "Permission granted / granted to the resource", not null]
  
  Indexes {
    (role_uuid) [pk]
    (role_uuid, resource, permission) [unique]
  }
}

Table user_permission as UPERM [headercolor: #24BAB1] {
  user_uuid uuid [ref: > U.uuid]
  resource varchar [not null]
  permission loom_permission [note: "Permission granted / granted to the resource", not null]
  
  Indexes {
    (user_uuid) [pk]
    (user_uuid, resource, permission) [unique]
  }
}

Table token_permission as TPERM [headercolor: #24BAB1] {
  token_uuid uuid [ref: > AK.uuid]
  resource varchar [not null]
  permission loom_permission [note: "Permission granted / granted to the resource", not null]
  
  Indexes {
    (token_uuid) [pk]
    (token_uuid, resource, permission) [unique]
  }
}

Table group as G [headercolor: #16a085] {
  uuid uuid [increment]
  name varchar [unique, not null]
  meta jsonb [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}
 
Table role_group as RG {
   group_uuid uuid [ref: > G.uuid, not null]
   role_uuid uuid [ref: > R.uuid, not null]
   
  Indexes {
    (group_uuid, role_uuid) [pk]
  }
}

Table user_group as UG {
   user_uuid uuid [ref: > U.uuid, not null]
   group_uuid uuid [ref: > G.uuid, not null]
   
  Indexes {
    (user_uuid, group_uuid) [pk]
  }
}


// Tag

Table tag as T [headercolor: #16a085] {
  uuid uuid [increment]
  name varchar [not null]
  collection varchar [not null]
  meta jsonb [note: "Custom meta properties to the element"]
  rating int [note: "Absolute or buffered/precomputed rating information"]

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  Indexes {
    (uuid) [pk]
    (name, collection) [unique]
  }

  note: "Tag on various elements. Tags are not user specifc"
}

Table tag_user_meta as TUM {
  tag_uuid uuid [ref: > T.uuid, not null]
  user_uuid uuid [ref: > U.uuid, not null]
  rating int [not null, note: "Rating of the tag by the user"]
  meta jsonb [note: "Custom meta properties"]

  Indexes {
    (tag_uuid, user_uuid) [pk]
  }
}


Table tag_asset {
  tag_uuid uuid [ref: > T.uuid, not null]
  asset_uuid uuid [ref: > ASSET.uuid, not null]
  
  Indexes {
    (tag_uuid, asset_uuid) [pk]
  }
  
  note: "Store tag <-> asset reference"
}


Table tag_collection {
  tag_uuid uuid [ref: > T.uuid, not null]
  collection_uuid uuid [ref: > COLLECTION.uuid, not null]
  
  Indexes {
    (tag_uuid, collection_uuid) [pk]
  }
  
  note: "Store tag <-> collection reference"
}


Table tag_cluster {
  tag_uuid uuid [ref: > T.uuid, not null]
  cluster_uuid uuid [ref: > CLUSTER.uuid, not null]
  
  Indexes {
    (tag_uuid, cluster_uuid) [pk]
  }
  
  note: "Store tag <-> cluster reference"
}

tablegroup Tagging {
  tag
  tag_asset
  tag_collection
  tag_user_meta
  tag_cluster
}


// Asset

Table binary as BIN [headercolor: #16a085] {
  uuid uuid [increment]

  // Common properties
  sha512sum varchar [not null]
  size bigint [not null]
  sha256sum varchar [not null]
  md5sum varchar [not null]
  chunk_hash varchar [not null]
  zero_chunk_count bigint [not null]
  mime_type varchar [not null]
  meta jsonb [note: "Custom meta properties to the asset"]
  author varchar
  geo_lon decimal(9,6)
  geo_lat decimal(8,6)
  initial_origin varchar [note: "Document the initial origin of the binary (e.g. first filepath encountered, first s3 path, url, hash)",not null]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  // S3
  // Whenever the props change the asset_binary information has to be checked
  // Information must be mutable to avoid broken images in case of bucket changes
  s3_bucket_name varchar
  s3_object_path varchar

  // Video + Audio
  media_width  int [note: "Only set for images, video"]
  media_height int [note: "Only set for images, video"]
  duration int [note: "Duration of the video, audio"]

  // Video
  video_fingerprint varchar [note: "Video fingerprint information"]

  // Image
  image_fingerprint varchar [note: "Image fingerprint information"]
  image_dominant_color varchar

  // Audio
  audio_bpm int
  audio_sampling_rate int
  audio_channels int
  audio_encoding varchar [note: "Store the audio encoding used for the binary (e.g. mp3, flac)"]
  audio_fingerprint varchar [note: "Audio fingerprint information"]

  // Document
  doc_plain_text varchar [note: "Extracted text of the document"]
  doc_word_count int

  // Other

  Indexes {
    (sha512sum) [pk]
    (uuid) [unique]
    (geo_lon, geo_lat) // Unsure whether this works for null,null
  }
  
  note: "This table stores information on the binary component of the asset"
}

Table binary_remix {
  binary_a_uuid uuid [ref: > BIN.uuid, not null]
  binary_b_uuid uuid [ref: > BIN.uuid, not null]
  meta jsonb [note: "Custom meta properties to the element"]
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]

  Indexes {
    (binary_a_uuid)
    (binary_b_uuid)
  }

  note: "Store information on remixes of binaries."
}

Table asset as ASSET [headercolor: #16a085] {
  uuid uuid [increment]
  binary_uuid uuid [ref: > BIN.uuid, not null, note: "Reference to the media binary that contains the actual data for the asset."]

  path varchar [not null, note: "Currently known path to the asset in the filesystem"]
  
  // Store the filekey that is used to identify the file by the filesystem scanner
  filekey_inode int
  filekey_stdev int
  filekey_edate_nano int
  filekey_edate int

  meta varchar [note: "Custom meta properties to the asset"]

  // TODO same mime_type in binary to override the value?
  mime_type varchar
  license varchar

  state varchar
  locked_by_uuid uuid [ref: > U.uuid]
  // Locking reason can be stored in meta? or state? Do we need a dedicated field?

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
    (path)
  }

  note: "Assets keep track of media that has been found by the scanner. Multiple assets may share the same binary thus the properties will be decoupled from binary."
}


tablegroup Assets {
  asset
  binary
  binary_remix
  asset_user_meta
}

// Embedding

Table embedding as EMBEDDING [headercolor: #16A085] {
  uuid uuid [increment]
  meta jsonb [note: "Custom meta properties to the embedding."]
  source varchar [note: "Additional source information (e.g. face number by dlib)"]

  // Spatial / temporal origin of the embedding
  frame int [note: "Source frame where the face has been detected.", not null]
  areaHeight int [note: "Area info where the face has been detected.", not null]
  areaWidth  int [note: "Area info where the face has been detected.", not null]
  areaStartX int [note: "Area info where the face has been detected.", not null]
  areaStartY int [note: "Area info where the face has been detected.", not null]

  // Actual embedding data
  embeddings bytea [not null, note: "Actual embedding data"]
  embedding_id int [note: "Additional id which references the embedding in the binary. (A binary can have multiple embeddings)"]
  embedding_type embedding_type [note: "Type of the embedding (e.g. dlib_facemark)"]

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  binary_uuid uuid [ref: > BIN.uuid, not null]

  Indexes {
    (uuid) [pk]
    (binary_uuid) [note: "Index to allow faster selection of embeddings of an binary"]
  }

  note: "Embedding information which was extracted from a binary."
}

Enum embedding_type {
  DLIB_FACE_RESNET_v1
  VIDEO4J_FINGERPRINT_V1
}

Table cluster as CLUSTER [headercolor: #16A085] {
  uuid uuid [increment]
  name varchar [note: "Name of the cluster. (e.g. name of a person)", not null]
  meta jsonb [note: "Custom meta properties to the embedding."]
  type cluster_type [note: "Type of the cluster (e.g. person)", not null]

  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  Indexes {
    (uuid) [pk]
    (name) [unique]
  }
  
  note: '''
    Generic cluster that aggregates multiple embeddings. 
    A cluster could for example represent a person which can have multiple face embeddings.
    Alternatively media fingerprint embeddings can be used to group media together by visual similarity.
  '''
}

Enum cluster_type {
  PERSON
  REMIX
}

Table embedding_cluster {
  embedding_uuid uuid [ref: > EMBEDDING.uuid, not null]
  cluster_uuid uuid [ref: > CLUSTER.uuid, not null]

  Indexes {
    (embedding_uuid, cluster_uuid) [pk]
  }

  note: "List embeddings for clusters"
}

tablegroup  Embeddings {
    embedding
    cluster
    embedding_cluster
}

// Asset Collection

// What is the difference between tags and collections? Don't those serve the same purpose?

Table collection as COLLECTION [headercolor: #16A085] {
  uuid uuid [increment]
  name varchar [unique, not null]
  meta jsonb [note: "Custom meta properties"]
  description varchar
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid  [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  parent_collection_uuid uuid [ref: > COLLECTION.uuid]
  
  //thumbail varchar
  Indexes {
    (uuid) [pk]
  }
  
  note: '''
    Collections are used to group assets together.
    
    A collection may be a folder which groups together assets for a project.
  '''
}

Table collection_asset {
  collection_uuid uuid [ref: > COLLECTION.uuid, not null]
  asset_uuid uuid [ref: > ASSET.uuid, not null]

  Indexes {
    (collection_uuid, asset_uuid) [pk]
    (collection_uuid)
    (asset_uuid)
  }

  note: "Track assets that belong to a collection."
}

Table collection_binary {
  collection_uuid uuid [ref: > COLLECTION.uuid, not null]
  binary_uuid uuid [ref: > BIN.uuid, not null]

  Indexes {
    (collection_uuid, binary_uuid) [pk]
    (collection_uuid)
    (binary_uuid)
  }

  note: '''
    Track binaries that belong to a collection.
    User facing this will result in all transitive assets being added to the collection.
  '''
}

Table collection_cluster {
  collection_uuid uuid [ref: > COLLECTION.uuid, not null]
  cluster_uuid uuid [ref: > CLUSTER.uuid, not null]

  Indexes {
    (collection_uuid, cluster_uuid) [pk]
    (collection_uuid)
    (cluster_uuid)
  }

  note: '''
    Track clusters of embeddings that belong to a collection.
  '''
}


tablegroup AssetCollection {
  collection
  collection_asset
  collection_binary
  collection_cluster
}

// Vector Index Configuration

Table vector_config {
  uuid uuid [increment]
  name varchar [unique, not null]
  weights jsonb [note: "Index definition which lists the weights for each component that should be included in the index"]

  note:  '''
    This table stores the custom index definition that will be used when creating custom indices in a vector database that list specific aspects of loom data.

    A custom configuration may define that a specific meta property should be added to the index when generating the vector.
    This feature can be used to generate a custom recommendation feature by including and ranking and encoding specific properties as vectors.
  '''
}


// Comment

Table comment as COMMENT [headercolor: #16A085] {
  uuid uuid [increment]
  title varchar [note: "Comment title"]
  content varchar [note: "Comment text", not null]
  user_uuid uuid [ref: > U.uuid, not null]
  created varchar  [note: "Creation timestamp", not null]
  edited varchar  [note: "Edit timestamp"]
  // editor is also user, admin edits are hidden?
  parent_uuid uuid [ref: > COMMENT.uuid]

  Indexes {
    (uuid) [pk]
  }

  note: "Stores comments on tasks, annotations.."
}

// TODO maybe better to use a  root_comment_uuid field in task
Table comment_task {
  comment_uuid uuid [ref: > COMMENT.uuid, not null]
  task_uuid uuid [ref: > TASK.uuid, not null]

  Indexes {
    (comment_uuid, task_uuid) [pk]
  }
}

Table comment_annotaion {
  comment_uuid uuid [ref: > COMMENT.uuid, not null]
  annotation_uuid uuid [ref: > ANNOTATION.uuid, not null]

  Indexes {
    (comment_uuid, annotation_uuid) [pk]
  }
}

tablegroup Comment {
  comment
  comment_task
  comment_annotaion
}

// Blacklist

Table blacklist as BLACKLIST [headercolor: #16A085] {
  uuid uuid [increment]
  binary_uuid uuid [ref: > BIN.uuid, note: "Blacklisted binary", not null] 
  
  created varchar  [note: "Creation timestamp", not null]
  creator_uuid  uuid [ref: > U.uuid, note: "Creator of the blacklist entry", not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  type varchar [note: "Type of the blacklist entry (e.g. copyright claim)"]
  review_count int [note: "Amount of times this blacklist entry has been reviewed.", default: 1]
  meta jsonb [note: "Custom meta properties of the block entry. May contain additional information on the reason."]

  Indexes {
    (uuid) [pk]
    (binary_uuid, creator_uuid) [unique, note: "Allow only one blacklist entry per user for a binary"]
  }

  note: '''
    Stores information on blocked binaries.
    A binary can be blocked due to copyright claim issues or because the virus scanner marked it.
    '''
}

tablegroup Blacklist {
  blacklist
}

// Reaction

Table reaction as REACTION [headercolor: #16A085] {
  uuid uuid [increment]
  type varchar [note: "Type of the reaction (e.g. thumbsup)"]
  rating int [note: "Rating by the user"]
  meta jsonb [note: "Custom meta properties to the reaction."]
  
  created timestamp [note: "Creation timestamp",default: `now()`, not null]
  creator_uuid uuid [note: "Creator of the reaction", ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  asset_uuid uuid [ref: <> ASSET.uuid]
  comment_uuid uuid [ref: <> COMMENT.uuid]
  annotation_uuid uuid [ref: <> ANNOTATION.uuid]

  Indexes {
    (uuid) [pk]
    (creator_uuid, type, asset_uuid) [unique, note: "Prevent duplicate same type reactions on a specific asset"]
    (creator_uuid, type, comment_uuid) [unique, note: "Prevent duplicate same type reactions on a specific comment"]
    (creator_uuid, type, annotation_uuid) [unique, note: "Prevent duplicate same type reactions on a specific annotation"]
  }
  
  note: "Stores social reactions on multiple elements"
}

tablegroup Reaction {
  reaction
}

// Annotation

Table annotation as ANNOTATION [headercolor: #16A085] {
  uuid uuid [increment]
  type annotation_type [not null]
  
  asset_uuid uuid [ref: > ASSET.uuid, not null]
  creator_uuid  uuid [ref: > U.uuid, not null]
  created timestamp [note: "Creation timestamp", default: `now()`, not null]
  title varchar
  description varchar
  
  // Spatial / Temporal information
  time_from int
  time_to int
  areaStartX int
  areaStartY int
  areaWidth  int
  areaHeight int

  meta jsonb [note: "Custom meta properties"]
  thumbail varchar [note: "Reference to the thumbnail that depics the annotated element/area"]

  Indexes {
    (uuid) [pk]
  }
  
  note: "This table contains asset annotation entries which can be used to create chapters or sections to assign tasks to."
}

Table annotation_tag as ANNOTATION_TAGS {
  annotation_uuid   uuid [ref: > ANNOTATION.uuid, not null]
  tag_uuid          uuid [ref: > T.uuid, not null]

  Indexes {
    (annotation_uuid, tag_uuid) [pk]
  }
}

Enum annotation_type {
  FEEDBACK
  TAG
  CHAPTER
}

tablegroup Annotation {
  annotation
  annotation_tag
}


// Tasks

Table task as TASK [headercolor: #16A085] {
  uuid uuid [increment]
  title varchar [not null, note: "Title of the task"]
  content varchar [note: "Description of the task"]
  due_date timestamp
  status task_status [note: "Current status of the task (e.g. PENDING, REJECTED)", default: "PENDING"]
  priority int

  created timestamp [default: `now()`, not null]
  creator_uuid uuid [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]

  Indexes {
    (uuid) [pk]
  }
}

Table task_asset {
  task_uuid uuid [ref: > TASK.uuid, not null]
  asset_uuid uuid [ref: > ASSET.uuid, not null]
  
  Indexes {
    (task_uuid, asset_uuid) [pk]
  }
}

Table task_annotation {
  task_uuid uuid [ref: > TASK.uuid, not null]
  annotation_uuid uuid [ref: > ANNOTATION.uuid, not null]

  Indexes {
    (task_uuid, annotation_uuid) [pk]
  }
}

enum task_status {
  PENDING
  REJECTED
  ACCEPTED
  REVIEW
}

tablegroup Task {
  task  
  task_annotation
  task_asset
}


Table asset_user_meta as AUM [headercolor: #16A085] {
  asset_uuid uuid [ref: > ASSET.uuid, not null]
  user_uuid uuid [ref: > U.uuid, not null]
  meta varchar [note: "Custom meta properties"]
  
  // Timestamps and editors will be updated in ASSET

  Indexes {
    (asset_uuid, user_uuid) [pk]
  }

  note: "Stores user specific metadata that can be added to assets"
}


Table webhook as W [headercolor: #16a085] {
  uuid uuid [increment]
  url varchar [not null]
  status varchar
  active boolean [default: true, not null]
  triggers loom_events [note: "List of triggers which can invoke the webhook"]
  secretToken varchar [note: "Secret token which webhook services can use to authenticate the request."]
  meta jsonb [note: "Custom meta properties to the element"]
  
  created timestamp [default: `now()`, not null]
  creator_uuid uuid [ref: > U.uuid, not null]
  edited timestamp [default: `now()`]
  editor_uuid uuid [ref: > U.uuid]
  
  Indexes {
    (uuid) [pk]
  }
  
  note: "Table which stores the registered webhooks"
}


// Libary

Table library as LIB [headercolor: #16a085] {
 uuid uuid [increment]
 name varchar [not null]
 meta jsonb [note: "Custom meta properties to the element"]
 description varchar

 created timestamp [default: `now()`, not null]
 creator_uuid uuid [ref: > U.uuid, not null]
 edited timestamp [default: `now()`]
 editor_uuid uuid [ref: > U.uuid]

 Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}

Table library_asset {
 library_uuid uuid [ref: > LIB.uuid, not null]
 asset_uuid   uuid [ref: > ASSET.uuid, not null]
 
 Indexes {
    (library_uuid, asset_uuid) [pk]
 }
}

Table library_collection {
 library_uuid uuid [ref: > LIB.uuid, not null]
 collection_uuid   uuid [ref: > COLLECTION.uuid, not null]

 Indexes {
    (library_uuid, collection_uuid) [pk]
 }
}

tablegroup Library {
  library
  library_asset
  library_collection
}

// Project

Table project as PROJECT [headercolor: #16a085] {
 uuid uuid [increment]
 name varchar [not null]
 meta jsonb [note: "Custom meta properties to the element"]
 description varchar

 created timestamp [default: `now()`, not null]
 creator_uuid uuid [ref: > U.uuid, not null]
 edited timestamp [default: `now()`]
 editor_uuid uuid [ref: > U.uuid]

 Indexes {
    (uuid) [pk]
    (name) [unique]
  }
}

Table project_collection {
 project_uuid uuid [ref: > PROJECT.uuid, not null]
 collection_uuid   uuid [ref: > COLLECTION.uuid, not null]

 Indexes {
    (project_uuid, collection_uuid) [pk]
 }
}

Table project_library {
 project_uuid uuid [ref: > PROJECT.uuid, not null]
 library_uuid   uuid [ref: > LIB.uuid, not null]

 Indexes {
    (project_uuid, library_uuid) [pk]
 }
}

tablegroup Project {
  project
  project_collection
  project_library
}

// Other

tablegroup Others {
  loom
}

tablegroup Connectivity {
  webhook
}


tablegroup ACL {
  user
  role
  group
  user_group
  role_group
  token
  role_permission
  user_permission
  token_permission
}


// Enums

Enum loom_events {

  USER_LOGGED_IN
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_MAPPED
  
  GROUP_CREATED
  GROUP_UPDATED
  GROUP_DELETED
  
  ROLE_CREATED
  ROLE_UPDATED
  ROLE_DELETED

  ASSET_UPLOADED
  ASSET_CREATED
  ASSET_UPDATED
  ASSET_DELETED
  ASSET_TAGGED
  
  TAG_CREATED
  TAG_DELETED
  TAG_UPDATED  
 
  WEBHOOK_CREATED
  WEBHOOK_DELETED
  WEBHOOK_UPDATED
  
  //note: "List of events which can trigger a webhook"
}


Enum loom_permission {
  // U
  CREATE_USER
  READ_USER
  UPDATE_USER
  DELETE_USER
  
  // G
  CREATE_GROUP
  READ_GROUP
  UPDATE_GROUP
  DELETE_GROUP
  
  // R
  CREATE_ROLE
  READ_ROLE
  UPDATE_ROLE
  DELETE_ROLE
  
  // T
  CREATE_TAG
  READ_TAG
  UPDATE_TAG
  DELETE_TAG
  
  // A
  CREATE_ASSET
  READ_ASSET
  UPDATE_ASSET
  DELETE_ASSET
  UPLOAD_ASSET
  DOWNLOAD_ASSET
  LOCK_ASSET
  UNLOCK_ASSET
  
  // W
  CREATE_WEBHOOK
  READ_WEBHOOK
  UPDATE_WEBHOOK
  DELETE_WEBHOOK  
}

Ref: "asset"."edited" < "asset"."created"


Ref: "collection"."description" < "collection"."uuid"
